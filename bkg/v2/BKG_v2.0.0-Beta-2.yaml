openapi: 3.0.3
info:
  version: 2.0.0-Beta-2
  title: DCSA OpenAPI specification for Booking
  description: |
    API specification issued by DCSA.org.

    For explanation of specific values or objects please refer to the [Information Model 2023.Q4](https://dcsa.org/wp-content/uploads/2024/01/DCSA-Information-Model-2023.Q4.pdf). This API specification does not define the allowable updates and their timing in accordance with the established business rules. Refer to the [DCSA Interface Standard for the Booking process 2.0 Beta 1](https://dcsa.atlassian.net/wiki/external/ZjAyOGZhYThjYjBiNDM5ODlmZjc0ODMxNjc4MWNiZjk) to address this. **All use cases mentioned in this API specification refer to use cases defined in this Booking IFS**.

    All other documents related to the Booking publication can be found [here](https://dcsa.org/standards/booking-process/)

    It is possible to use the Booking API as a standalone API. In that case poll on the following endPoints:

        GET /v2/bookings/{bookingReference}

    in order to poll information about status changes.

    ### Notifications
    It is possible to have notifications pushed to you whenever the provider needs input and/or a state change. The format of the notification is defined by the [Booking Notification API](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_BKG_NTF/2.0.0-Beta-1). Signing up for notifications is defined outside the scope of this API specification.

    ### Stats API
    The Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to the Booking API. Further details can be found [here](https://developer.dcsa.org/#/http/guides/api-guides/stats-api)

    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/bkg/v2#v200B1). Please [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: 'https://dcsa.org'
    email: info@dcsa.org
security: []
tags:
  - name: Booking
    description: The Booking
paths:
  /v2/bookings:
    post:
      tags:
        - Booking
      summary: |
        Creates a new Booking
      operationId: create-bookings
      parameters:
        - $ref: '#/components/parameters/Api-Version-Major'
      description: |
        Creates a new booking request. This endPoint corresponds with **UseCase 1 - Submit booking request**.

        **Needs to be updated**

        ## Precondition
        The consumer has information for a `Booking Request`

        ## Postcondition
        The provider has received the `Booking Request`. 

        The consumer will receive a `201` (Created) if the request payload schema-validates or a `400` (Bad Request) if it does not.

        ## Flow
        The following occurs when a provider receives a `Booking Request`:
        1. The payload (`Booking Request`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.

           **The process stops here!**
        2. The payload is schema-valid which means
            - all required properties are provided
            - all values provided have correct data type.

            A `carrierBookingRequestReference` (as a reference to the `Booking Request`) is created and stored along with the payload in the provider system.
          
            **For the rest of this description and in all examples the value `cbrr-123` will be used as `carrierBookingRequestReference`**

        3. A `201` (Created) response is returned with the following payload
            ```
            {
              carrierBookingRequestReference: 'cbrr-123',
              bookingStatus: 'RECEIVED'
            }
            ```
        4. All '_relevant_' subscribers will be notified via a [Booking Notification](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_BKG_NTF/2.0.0-Beta-1#/Notifications/booking-notifications).

        For `POST` `Booking Request` the process ends here. The `Booking Request`

          - is now stored in the provider system
          - has status `RECEIVED`
          - a `201` (Created) response is sent to the consumer with a payload containing `bookingStatus='RECEIVED'`
          - awaits further processing by the provider
          - '_relevant_' subscribers have been notified.

        The provider wil now start asynchronous processing. Once processed, the new status of the `Booking Request` will be communicated via a `Booking Notification`. In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the

            GET /v2/bookings/{bookingReference}
            
          endPoint to check if the `bookingStatus` of the `Booking Request` has changed.
      requestBody:
        description: The payload used to create a `Booking Request`
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBooking'
            examples:
              dryExample:
                summary: |
                  Standard dry cargo Booking
                description: |
                  Make a `Booking Request` with standard Dry cargo being sent from Bremerhaven, Germany to Norfolk, US
                value:
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTermCode: PRE
                  destinationChargesPaymentTermCode: COL
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  isImportLicenseRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  communicationChannelCode: AO
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: FF
                      value: KN-00103004
                  documentParties:
                    - party:
                        partyName: KN Bremerhaven
                        address:
                          name: Kuehne + Nagel (AG & Co.) KG
                          street: Amerikaring
                          streetNumber: '40'
                          postCode: '27568'
                          city: Bremerhaven
                          country: Germany
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                      partyFunction: DDR
                      isToBeNotified: false
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        locationType: UNLO
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        locationType: UNLO
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 42GP
                      units: 3
                      commodities:
                        - commodityType: 'Dry cargo, Freight all kinds'
                          cargoGrossWeight: 36000
                          cargoGrossWeightUnit: KGM
              reeferExample:
                summary: |
                  Reefer cargo Booking (Apple Juice)
                description: |
                  Make a `Booking Request` with reefer requirements (1Â° celcius with vents and drain holes open and genset required) sent from Bremerhaven, Germany to Norfolk, US
                value:
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTermCode: PRE
                  destinationChargesPaymentTermCode: COL
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  isImportLicenseRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  communicationChannelCode: AO
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: FF
                      value: KN-00103004
                  documentParties:
                    - party:
                        partyName: KN Bremerhaven
                        address:
                          name: Kuehne + Nagel (AG & Co.) KG
                          street: Amerikaring
                          streetNumber: '40'
                          postCode: '27568'
                          city: Bremerhaven
                          country: Germany
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                      partyFunction: DDR
                      isToBeNotified: false
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        locationType: UNLO
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        locationType: UNLO
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 45R1
                      units: 3
                      isNonOperatingReefer: false
                      activeReeferSettings:
                        temperatureSetpoint: 1
                        temperatureUnit: CEL
                        isVentilationOpen: true
                        isDrainholesOpen: false
                        isGeneratorSetRequired: true
                      commodities:
                        - commodityType: Apple juice
                          HSCodes:
                            - 20097919
                          cargoGrossWeight: 36000
                          cargoGrossWeightUnit: KGM
              norExample:
                summary: |
                  Standard dry cargo Booking using a Reefer Container
                description: |
                  Make a `Booking Request` with standard Dry cargo using a reefer container being sent from Bremerhaven, Germany to Norfolk, US
                value:
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTermCode: PRE
                  destinationChargesPaymentTermCode: COL
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  isImportLicenseRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  communicationChannelCode: AO
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: FF
                      value: KN-00103004
                  documentParties:
                    - party:
                        partyName: KN Bremerhaven
                        address:
                          name: Kuehne + Nagel (AG & Co.) KG
                          street: Amerikaring
                          streetNumber: '40'
                          postCode: '27568'
                          city: Bremerhaven
                          country: Germany
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                      partyFunction: DDR
                      isToBeNotified: false
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        locationType: UNLO
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        locationType: UNLO
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 45R1
                      isNonOperatingReefer: true
                      units: 3
                      commodities:
                        - commodityType: 'Dry cargo, Freight all kinds'
                          cargoGrossWeight: 36000
                          cargoGrossWeightUnit: KGM
              dgExample:
                summary: |
                  Dangerous Goods (DG) cargo Booking
                description: |
                  Make a `Booking Request` with DG cargo (*Environmentally hazardous substance, liquid, N.O.S (Propiconazole)*) being sent from Bremerhaven, Germany to Norfolk, US
                value:
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTermCode: PRE
                  destinationChargesPaymentTermCode: COL
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  isImportLicenseRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  communicationChannelCode: AO
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: FF
                      value: KN-00103004
                  documentParties:
                    - party:
                        partyName: KN Bremerhaven
                        address:
                          name: Kuehne + Nagel (AG & Co.) KG
                          street: Amerikaring
                          streetNumber: '40'
                          postCode: '27568'
                          city: Bremerhaven
                          country: Germany
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                      partyFunction: DDR
                      isToBeNotified: false
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        locationType: UNLO
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        locationType: UNLO
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 42GP
                      units: 3
                      commodities:
                        - commodityType: 'Environmentally hazardous substance, liquid, N.O.S (Propiconazole)'
                          HSCodes:
                            - 293499
                          cargoGrossWeight: 36000
                          cargoGrossWeightUnit: KGM
                          outerPackaging:
                            imoPackagingCode: 3A1
                            numberOfPackages: 100
                            description: 'Jerrican, steel'
                            dangerousGoods:
                              - unNumber: '3082'
                                properShippingName: 'Environmentally hazardous substance, liquid, N.O.S'
                                imoClass: '9'
                                isMarinePollutant: false
                                packingGroup: 3
                                isLimitedQuantity: false
                                isExceptedQuantity: false
                                isSalvagePackings: false
                                isEmptyUncleanedResidue: false
                                isWaste: false
                                isHot: false
                                isCompetentAuthorityApprovalProvided: false
                                emergencyContactDetails:
                                  contact: John Doe
                                  phone: +1 123062970
                                EMSNumber: F-A S-F
                                isReportableQuantity: false
                                grossWeight:
                                  value: 12000
                                  unit: KGM
      responses:
        '201':
          description: |
            `Booking Request` has been successfully created in the provider system. The status of the `Booking Request` is now `RECEIVED`. The consumer is now awaiting provider to process the `Booking Request` asynchronously.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/BookingRefStatus'
              examples:
                receExample:
                  summary: |
                    Booking request received
                  description: |
                    A `Booking Request` has been received (`bookingStatus='RECEIVED'`), schema validated and stored in provider system
                  value:
                    carrierBookingRequestReference: cbrr-123
                    bookingStatus: RECEIVED
        '400':
          description: |
            In case the `Booking Request` does not schema validate a `400` (Bad Request) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                badRequestExample:
                  summary: |
                    Booking missing receiptTypeAtOrigin
                  description: |
                    `receiptTypeAtOrigin` is a mandatory property in the `Booking Request`. This is an example of how the error object would look in case this property is missing

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/bookings
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: receiptTypeAtOrigin not found - it is a mandatory property in Booking request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        property: receiptTypeAtOrigin
                        errorCodeText: mandatory property missing
                        errorCodeMessage: receiptTypeAtOrigin must be provided as part of a Booking request
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Booking Request
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/bookings
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Booking request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            For other errors the error object should be populated with relevant information
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Bookings Requests
                  description: |
                    Calling the endPoint

                        POST /v2/bookings
                        
                    too many times within a timeperiod.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/bookings
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    statusCodeMessage: Too many request to create a booking has been requested. Please try again in 1 hour
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Max Booking requests reached
                        errorCodeMessage: A maximum of 10 Bookings can be created per hour
  '/v2/bookings/{bookingReference}':
    put:
      tags:
        - Booking
      summary: |
        Updates the Booking
      operationId: update-bookings
      parameters:
        - $ref: '#/components/parameters/bookingReferencePathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      description: |
        Updates the `Booking Request` with the `bookingReference`. The path can contain either a `carrierBookingRequestReference` or a `carrierBookingReference`. This endPoint corresponds with either

        - **UseCase 3 - Submit updated Booking request**
        - **UseCase 7 - Request amendments to confirmed Booking**

        This endPoint is to be used in response to

        - **UseCase 2 - Request to update Booking request**
        - **UseCase 6 - Request to amend confirmed Booking**

        the endPoint can also be used in case `bookingStatus='RECEIVED'` and the consumer has an update to the `Booking Request`.

        ### Precondition
        In order to update a `Booking Request`, the status of the `Booking Request` needs to be in state

        - `RECEIVED` in case the consumer has updated information for the `Booking Request`
        - `PENDING UPDATE` in case the provider has requested the consumer to update the `Booking Request` (a result of **UseCase 2 - Request to update Booking request**)
        - `UPDATE RECEIVED` in case the consumer has additional changes to an already sent update
        - `PENDING AMENDMENT` in case the provider has requested the consumer to amend the `Booking Request` (a result of **UseCase 6 - Request to amend confirmed Booking**)
        - `CONFIRMED` in case the consumer has an amendment to the `Booking Request`

        ## Postcondition
        The provider has received an update (**UseCase 3 - Submit updated Booking request**) or an amendment (**UseCase 7 - Request amendments to confirmed Booking**) to the `Booking Request`.

        In case an amendment was received to the `Booking Request`(**UseCase 7 - Request to amend confirmed Booking**) - the amendment will be called `Amended Booking`. The `Amended Booking` and the "original" `Booking Request` will **co-exist** until a new amendment is submitted by the consumer (via **UseCase 7: Request amendments to confirmed Booking**) or until the provider requests an update (sets the `bookingStatus='PENDING AMENDMENT'` via **UseCase 6: Request to amend confirmed Booking**). If the `amendedBookingStatus` is present it always represents the latest version of an amendment received by the provider.

        The consumer will receive a `200` (OK) if the payload schema-validates or a `400` (Bad Request) if it does not.

        ## Flow
        The following occurs when a provider receives an **update** to a `Booking Request`
        1. The payload (`Booking Request`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.

           **The process stops here!**

        2. The payload is schema-valid which means
           - all required properties are provided
           - all values provided have correct data type
          
           The updated `Booking Request` is stored in the provider system.

           **For the rest of this description and in all examples the value `cbrr-123` will be used as `carrierBookingRequestReference`**

        3. The response depends on which useCase is the reason for calling this endPoint (what the `bookingStatus` is):

            - If `bookingStatus` **is** `RECEIVED` then this endPoint is being used in addition to **UseCase 1 - Submit booking request**. In this case the consumer would like to make an update to an already sent `Booking Request` - this is done via **UseCase 3 - Submit updated Booking Request**. The `bookingStatus` now changes to `UPDATE RECEIVED`.
            
              A `200` (OK) response corresponding to the following payload is returned
              ```
              {
                carrierBookingRequestReference: 'cbrr-123',
                bookingStatus: 'UPDATE RECEIVED'
              }
              ```

            - If `bookingStatus` is `PENDING UPDATE` then this endPoint is being used as a reponse to **UseCase 2 - Request to update Booking request** in this case the provider has requested an update to a `Booking Request`.  The `bookingStatus` now changes to `UPDATE RECEIVED`.

              A `200` (OK) response corresponding to the following payload is returned
              ```
              {
                carrierBookingRequestReference: 'cbrr-123',
                bookingStatus: 'UPDATE RECEIVED'
              }
              ```
            
            - If `bookingStatus` is `UPDATE RECEIVED` then this endPoint is being used to update an already sent update. The `bookingStatus` stays as `UPDATE RECEIVED`.

              A `200` (OK) response corresponding to the following payload is returned
              ```
              {
                carrierBookingRequestReference: 'cbrr-123',
                bookingStatus: 'UPDATE RECEIVED'
              }
              ```
            
            - If `bookingStatus` is `PENDING AMENDMENT` then this endPoint is being used as a response to **UseCase 6 - Request to amend Confirmed Booking**, in this case the provider has requested an amendment to a `Confirmed Booking`. The `bookingStatus` stays `PENDING AMENDMENT` and `amendedBookingStatus` is set to `AMENDMENT RECEVIED`.
            
              A `200` (OK) response corresponding to the following payload is returned
              ```
              {
                carrierBookingReference: 'cbr-987',
                carrierBookingRequestReference: 'cbrr-123',
                bookingStatus: 'PENDING AMENDMENT',
                amendedBookingStatus: 'AMENDMENT RECEIVED'
              }
              ```
            
            - If `bookingStatus` is `CONFIRMED` then this endPoint is being used in order to request an amendment to a `Confirmed Booking` this is done via **UseCase 7 - Request Amendments to Confirmed Booking**. The `bookingStatus` stays `CONFIRMED` and `amendedBookingStatus` is set to `AMENDMENT RECEIVED`.
            
              A `200` (OK) response corresponding to the following payload is returned
              ```
              {
                carrierBookingReference: 'cbr-987',
                carrierBookingRequestReference: 'cbrr-123',
                bookingStatus: 'CONFIRMED',
                amendedBookingStatus: 'AMENDMENT RECEIVED'
              }
              ```
        4. All '_relevant_' subscribers will be notified via a [Booking Notification](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_BKG_NTF/2.0.0-Beta-1#/Notifications/booking-notifications).

        For `PUT` `Booking Request` the process ends here. The `Booking Request`

          - is now stored in the provider system
          - a `200` (OK) response is sent to the consumer with the status of the `Booking` (and possibly also with the `amendedBookingStatus`) with one of the following values (depending on the useCase):
            - `bookingStatus='UPDATE RECEIVED'` (if endPoint used before a `Booking`has been confirmed)
            - `bookingStatus='PENDING AMENDMENT'` and `amendedBookingStatus='AMENDMENT RECEIVED'` (if endPoint used as a response to **UseCase 6 - Request to amend Confirmed Booking**)
            - `bookingStatus='CONFIRMED'` and `amendedBookingStatus='AMENDMENT RECEIVED'` (if consumer is requesting an amendment to a `Confirmed Booking`)
          - awaits further processing by the provider
          - '_relevant_' subscribers have been notified.

        The provider wil now start asynchronous processing. Once processed, the new status of the `Booking` and `Amended Booking Request` will be communicated via a `Booking Notification`. In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the

            GET /v2/bookings/{bookingReference}
            
          endPoint to check if the `bookingStatus` and `amendedBookingStatus` of the `Booking` has changed.
          
          If the consumer wants to get the content of the `Amended Booking` provided via this `PUT` endPoint, the `GET` endPoint needs to be used in combination with the `?amendedContent=true` queryParameter:

              GET /v2/bookings/{bookingReference}?amendedContent=true

          It is possible to `GET` the content of the `Amended Booking` via the example above until either:

          - the provider requests for a new amendment (**UseCase 6: Request to amend confirmed Booking**) in which case the "old update" is no longer accessible
          - the consumer submits a new update (**UseCase 7: Request amendment to confirmed Booking**) in which case the "new amendment" provided **replaces** the "old amendment".
      requestBody:
        description: |
          Parameters used to update the `Booking request`
        required: true
        content:
          application/json:
            schema:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/UpdateBooking'
            examples:
              dryExample:
                summary: |
                  Standard dry cargo Booking
                description: |
                  Updating a `Booking Request` with standard Dry cargo being sent from Bremerhaven, Germany to Norfolk, US
                value:
                  carrierBookingRequestReference: cbrr-123
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTermCode: PRE
                  destinationChargesPaymentTermCode: COL
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  isImportLicenseRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  communicationChannelCode: AO
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: FF
                      value: KN-00103004
                  documentParties:
                    - party:
                        partyName: KN Bremerhaven
                        address:
                          name: Kuehne + Nagel (AG & Co.) KG
                          street: Amerikaring
                          streetNumber: '40'
                          postCode: '27568'
                          city: Bremerhaven
                          country: Germany
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                      partyFunction: DDR
                      isToBeNotified: false
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        locationType: UNLO
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        locationType: UNLO
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 42GP
                      units: 3
                      commodities:
                        - commodityType: 'Dry cargo, Freight all kinds'
                          cargoGrossWeight: 36000
                          cargoGrossWeightUnit: KGM
              reeferExample:
                summary: |
                  Reefer cargo Booking (Apple Juice)
                description: |
                  Updating a `Booking Request` with reefer requirements (2Â° celcius with vents and drain holes open and genset required) sent from Bremerhaven, Germany to Norfolk, US
                value:
                  carrierBookingRequestReference: cbrr-123
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTermCode: PRE
                  destinationChargesPaymentTermCode: COL
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  isImportLicenseRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  communicationChannelCode: AO
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: FF
                      value: KN-00103004
                  documentParties:
                    - party:
                        partyName: KN Bremerhaven
                        address:
                          name: Kuehne + Nagel (AG & Co.) KG
                          street: Amerikaring
                          streetNumber: '40'
                          postCode: '27568'
                          city: Bremerhaven
                          country: Germany
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                      partyFunction: DDR
                      isToBeNotified: false
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        locationType: UNLO
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        locationType: UNLO
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 45R1
                      units: 3
                      isNonOperatingReefer: false
                      activeReeferSettings:
                        temperatureSetpoint: 2
                        temperatureUnit: CEL
                        isVentilationOpen: true
                        isDrainholesOpen: false
                        isGeneratorSetRequired: true
                      commodities:
                        - commodityType: Apple juice
                          HSCodes:
                            - 20097919
                          cargoGrossWeight: 36000
                          cargoGrossWeightUnit: KGM
              norExample:
                summary: |
                  Standard dry cargo Booking using a Reefer Container
                description: |
                  Update a `Booking Request` with standard Dry cargo using a reefer container being sent from Bremerhaven, Germany to Norfolk, US
                value:
                  carrierBookingRequestReference: cbrr-123
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTermCode: PRE
                  destinationChargesPaymentTermCode: COL
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  isImportLicenseRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  communicationChannelCode: AO
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: FF
                      value: KN-00103004
                  documentParties:
                    - party:
                        partyName: KN Bremerhaven
                        address:
                          name: Kuehne + Nagel (AG & Co.) KG
                          street: Amerikaring
                          streetNumber: '40'
                          postCode: '27568'
                          city: Bremerhaven
                          country: Germany
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                      partyFunction: DDR
                      isToBeNotified: false
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        locationType: UNLO
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        locationType: UNLO
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 45R1
                      isNonOperatingReefer: true
                      units: 3
                      commodities:
                        - commodityType: 'Dry cargo, Freight all kinds'
                          cargoGrossWeight: 36000
                          cargoGrossWeightUnit: KGM
              dgExample:
                summary: |
                  Dangerous Goods (DG) cargo Booking
                description: |
                  Update a `Confirmed Booking` (a `Booking` with `carrierBookingReference='cbr-987'`) with DG cargo (*Environmentally hazardous substance, liquid, N.O.S (Propiconazole)*) being sent from Bremerhaven, Germany to Norfolk, US
                value:
                  carrierBookingRequestReference: cbrr-123
                  carrierBookingReference: cbr-987
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTermCode: PRE
                  destinationChargesPaymentTermCode: COL
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  isImportLicenseRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  communicationChannelCode: AO
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: FF
                      value: KN-00103004
                  documentParties:
                    - party:
                        partyName: KN Bremerhaven
                        address:
                          name: Kuehne + Nagel (AG & Co.) KG
                          street: Amerikaring
                          streetNumber: '40'
                          postCode: '27568'
                          city: Bremerhaven
                          country: Germany
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                      partyFunction: DDR
                      isToBeNotified: false
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        locationType: UNLO
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        locationType: UNLO
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 42GP
                      units: 3
                      commodities:
                        - commodityType: 'Environmentally hazardous substance, liquid, N.O.S (Propiconazole)'
                          HSCodes:
                            - 293499
                          cargoGrossWeight: 36000
                          cargoGrossWeightUnit: KGM
                          outerPackaging:
                            imoPackagingCode: 3A1
                            numberOfPackages: 100
                            description: 'Jerrican, steel'
                            dangerousGoods:
                              - unNumber: '3082'
                                properShippingName: 'Environmentally hazardous substance, liquid, N.O.S'
                                imoClass: '9'
                                isMarinePollutant: false
                                packingGroup: 3
                                isLimitedQuantity: false
                                isExceptedQuantity: false
                                isSalvagePackings: false
                                isEmptyUncleanedResidue: false
                                isWaste: false
                                isHot: false
                                isCompetentAuthorityApprovalProvided: false
                                emergencyContactDetails:
                                  contact: John Doe
                                  phone: +1 123062970
                                EMSNumber: F-A S-F
                                isReportableQuantity: false
                                grossWeight:
                                  value: 12000
                                  unit: KGM
      responses:
        '200':
          description: |
            The `Booking request` has been successfully updated in the provider systemwith one of the following combinations (depending on the use case):
            - `bookingStatus='PENDING UPDATE'` in case the consumer has provided an update to a `Booking request` and is awaiting the provider to take action
            - `bookingStatus='PENDING AMENDMENT'` and `amendedBookingStatus='AMENDMENT RECEIVED'` in case the provider has requested an amendment and the consumer has provided an amendment to a `Confirmed Booking` and is awaiting the provider to take action
            - `bookingStatus='CONFIRMED'` and `amendedBookingStatus='AMENDMENT RECEIVED'` in case the consumer has provided an amendment to a `Confirmed Booking` and is awaiting the provider to take action

            The status of the `Booking` can be monitored on the

                GET /v2/bookings/{bookingReference}

              endPoint by the consumer. If the consumer wants to get the content of the `Amended Booking` the `GET` endPoint needs to be used in combination with the `?amendedContent=true` queryParameter:

                GET /v2/bookings/{bookingReference}?amendedContent=true
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/BookingRefStatus'
              examples:
                updateReceivedExample:
                  summary: |
                    Booking request updated
                  description: |
                    An updated `Booking request` received, schema validated and stored in provider system - the `Booking` now awaits provider action

                        bookingStatus='UPDATE RECEIVED'
                  value:
                    carrierBookingRequestReference: cbrr-123
                    bookingStatus: UPDATE RECEIVED
                pendingAmendmentApprovalExample:
                  summary: |
                    Confirmed Booking amendment
                  description: |
                    An amendment to a `Confirmed Booking` received, schema validated and stored in provider system - the `Booking` now awaits provider action

                        bookingStatus='CONFIRMED'
                        amendedBookingStatus: 'AMENDMENT RECEIVED'
                  value:
                    carrierBookingRequestReference: cbrr-123
                    carrierBookingReference: cbr-987
                    bookingStatus: CONFIRMED
                    amendedBookingStatus: AMENDMENT RECEIVED
                pendingAmendmentExample:
                  summary: |
                    Confirm requested Booking amendment
                  description: |
                    A requested amendment to a `Confirmed Booking` by the provider has been received, schema validated and stored in provider system. The `Booking` now awaits provider action

                        bookingStatus='PENDING AMENDMENT'
                        amendedBookingStatus: 'AMENDMENT RECEIVED'
                  value:
                    carrierBookingRequestReference: cbrr-123
                    carrierBookingReference: cbr-987
                    bookingStatus: PENDING AMENDMENT
                    amendedBookingStatus: AMENDMENT RECEIVED
        '400':
          description: |
            In case the updated/amended `Booking request` does not schema validate a `400` (Bad Request) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                badRequestExample:
                  summary: |
                    Booking missing receiptTypeAtOrigin
                  description: |
                    `receiptTypeAtOrigin` is a mandatory property in the `Booking request`. This is an example of how the error object would look in case this property is missing

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: receiptTypeAtOrigin not found - it is a mandatory property in Booking request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        property: receiptTypeAtOrigin
                        errorCodeText: mandatory property missing
                        errorCodeMessage: receiptTypeAtOrigin must be provided as part of a Booking request
        '409':
          description: |
            In case the provider is processing an already updated `Booking request` - it is possible for the provider to reject new incomming requests by returning a `409` (Conflict)
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                conflictExample:
                  summary: |
                    Conflicting request
                  description: |
                    The provider is already processing a request and needs to finish this process before any new requests are processed

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 409
                    statusCodeText: Conflict
                    statusCodeMessage: Previous request is being processed. Please try again later
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Conflicting request is being processed
                        errorCodeMessage: The Booking cannot be updated/amended while it is being processed. Please try again later
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Booking request
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Booking request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            For other errors the error object should be populated with relevant information
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                tooManyRequestsExample:
                  summary: |
                    Updating too many Bookings requests
                  description: |
                    Calling the endPoint GET /v2/bookings/cbrr-123 too many times within a timeperiod.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    statusCodeMessage: Too many request to update a booking has been requested. Please try again in 1 hour
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Max Booking requests reached
                        errorCodeMessage: A maximum of 10 Bookings can be updated per hour
    get:
      tags:
        - Booking
      summary: |
        Gets the Booking
      operationId: get-bookings
      description: |
        Retrieves the `Booking Request` with the `bookingReference`. The path can contain a `carrierBookingRequestReference` or a `carrierBookingReference`. It is recommended to use this endPoint to `GET` data before an update is made to make sure latest version is being updated.

        The default payload when calling this endPoint is the "original" `Booking`. It is also possible to get the latest amendment to a `Booking` called the `Amended Booking`. In order to get the `Amended Booking`, it is necessary to use the query parameter `amendedContent` and set it to `true`.

            GET /v2/bookings/{bookingReference}?amendedContent=true

        The `status` of the "original" `Booking` is included in both payloads as `bookingStatus`. `amendedBookingStatus` and related content is only available after the provider has approved the `Booking` via **UseCase 5: Confirm Booking request** and until:
        - the provider requests for a new amendment (**UseCase 6: Request to amend confirmed Booking**) in which case the "old update" is no longer accessable.
        - the consumer submits a new amendment (**UseCase 7: Request amendment to confirmed Booking**) in which case the "new update" provided **replaces** the "old update".
        - the provider re-confirms the `Booking` (**UseCase 5: Confirm booking request**) in which case the "old update" is no longer accessable.

        If `amendedContent=true` is requested but no amendment has yet been provided by the consumer **or** the state of the "original" `Booking` is `PENDING AMENDMENT`, then a `404` (Not Found) is returned.

        If the provider is requesting some changes to the `Booking` this will also be part of the "original" `Booking` payload in the `requestedChanges` property. This property is **conditional** on the `bookingStatus='PENDING UPDATE'` (in case the `Booking` has not yet been confirmed) or `bookingStatus='PENDING AMENDMENT'` (in case it is a confirmed `Booking`).

        In case no subscription (`Notification`) has been set up - it is possible to use this endPoint to poll on in order to detect if `bookingStatus` and/or `amendedBookingStatus` has changed.
      parameters:
        - $ref: '#/components/parameters/bookingReferencePathParam'
        - $ref: '#/components/parameters/amendedContent'
        - $ref: '#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: Request successful
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/Booking'
              examples:
                dryNotConfirmedExample:
                  summary: |
                    Standard dry cargo Booking (not confirmed)
                  description: |
                    Gets a `Booking Request` with standard Dry cargo which has not yet been confirmed. The `Booking` is in state `PENDING UPDATE` and requires some changes (specified in the `requestedChanges` property)
                  value:
                    carrierBookingRequestReference: cbrr-123
                    bookingStatus: PENDING UPDATE
                    receiptTypeAtOrigin: CY
                    deliveryTypeAtDestination: CY
                    cargoMovementTypeAtOrigin: FCL
                    cargoMovementTypeAtDestination: FCL
                    serviceContractReference: HHL51800000
                    freightPaymentTermCode: PRE
                    originChargesPaymentTermCode: PRE
                    destinationChargesPaymentTermCode: COL
                    contractQuotationReference: HHL1401
                    vessel:
                      name: MAERSK IOWA
                      vesselIMONumber: '9298686'
                    carrierServiceCode: TA1
                    carrierExportVoyageNumber: 403W
                    isPartialLoadAllowed: false
                    isExportDeclarationRequired: false
                    isImportLicenseRequired: false
                    expectedDepartureDate: '2024-01-20'
                    incoTerms: EXW
                    communicationChannelCode: AO
                    isEquipmentSubstitutionAllowed: false
                    references:
                      - type: FF
                        value: KN-00103004
                    documentParties:
                      - party:
                          partyName: KN Bremerhaven
                          address:
                            name: Kuehne + Nagel (AG & Co.) KG
                            street: Amerikaring
                            streetNumber: '40'
                            postCode: '27568'
                            city: Bremerhaven
                            country: Germany
                        partyContactDetails:
                          - name: Export operations department
                            phone: +49 471 945410
                        partyFunction: DDR
                        isToBeNotified: false
                    partyContactDetails:
                      - name: Diane
                        phone: +49 471 945410
                    shipmentLocations:
                      - location:
                          locationName: Bremerhaven
                          locationType: UNLO
                          UNLocationCode: DEBRV
                        locationTypeCode: POL
                      - location:
                          locationName: Norfolk
                          locationType: UNLO
                          UNLocationCode: USORF
                        locationTypeCode: POD
                    requestedEquipments:
                      - isShipperOwned: false
                        ISOEquipmentCode: 42GP
                        units: 3
                        commodities:
                          - commodityType: 'Dry cargo, Freight all kinds'
                            cargoGrossWeight: 36000
                            cargoGrossWeightUnit: KGM
                    requestedChanges:
                      - field: $.requestedEquipment.units
                        message: Not enough available "42GP" equipment. Please change to "22G1" instead
                dryConfirmedExample:
                  summary: |
                    Gets a confirmed Standard dry cargo Booking
                  description: |
                    Gets a `Confirmed Booking` with standard Dry cargo. In this example the `Booking` has previously received an amendment which was confirmed (`amendedBookingStatus='AMENDMENT CONFIRMED'`)

                    As part of the confirmation the `Booking` is enriched with a `transportPlan`, `shipmentCutOffTimes`, `carrierClauses` and in this example also an `advanceManifestFiling` since the `Booking` is arriving in US.
                  value:
                    carrierBookingRequestReference: cbrr-123
                    carrierBookingReference: cbr-987
                    bookingStatus: CONFIRMED
                    amendedBookingStatus: AMENDMENT CONFIRMED
                    receiptTypeAtOrigin: CY
                    deliveryTypeAtDestination: CY
                    cargoMovementTypeAtOrigin: FCL
                    cargoMovementTypeAtDestination: FCL
                    serviceContractReference: HHL51800000
                    freightPaymentTermCode: PRE
                    originChargesPaymentTermCode: PRE
                    destinationChargesPaymentTermCode: COL
                    contractQuotationReference: HHL1401
                    vessel:
                      name: MAERSK IOWA
                      vesselIMONumber: '9298686'
                    carrierServiceCode: TA1
                    carrierExportVoyageNumber: 403W
                    isPartialLoadAllowed: false
                    isExportDeclarationRequired: false
                    isImportLicenseRequired: false
                    expectedDepartureDate: '2024-01-20'
                    incoTerms: EXW
                    communicationChannelCode: AO
                    isEquipmentSubstitutionAllowed: false
                    references:
                      - type: FF
                        value: KN-00103004
                    documentParties:
                      - party:
                          partyName: KN Bremerhaven
                          address:
                            name: Kuehne + Nagel (AG & Co.) KG
                            street: Amerikaring
                            streetNumber: '40'
                            postCode: '27568'
                            city: Bremerhaven
                            country: Germany
                        partyContactDetails:
                          - name: Export operations department
                            phone: +49 471 945410
                        partyFunction: DDR
                        isToBeNotified: false
                    partyContactDetails:
                      - name: Diane
                        phone: +49 471 945410
                    shipmentLocations:
                      - location:
                          locationName: Bremerhaven
                          locationType: UNLO
                          UNLocationCode: DEBRV
                        locationTypeCode: POL
                      - location:
                          locationName: Norfolk
                          locationType: UNLO
                          UNLocationCode: USORF
                        locationTypeCode: POD
                    requestedEquipments:
                      - isShipperOwned: false
                        ISOEquipmentCode: 42GP
                        units: 3
                        commodities:
                          - commodityType: 'Dry cargo, Freight all kinds'
                            cargoGrossWeight: 36000
                            cargoGrossWeightUnit: KGM
                    confirmedEquipments:
                      - ISOEquipmentCode: 42GP
                        units: 3
                    transportPlan:
                      - transportPlanStage: MNC
                        transportPlanStageSequenceNumber: 1
                        loadLocation:
                          locationName: Bremerhaven
                          locationType: UNLO
                          UNLocationCode: DEBRV
                        dischargeLocation:
                          locationName: Norfolk
                          locationType: UNLO
                          UNLocationCode: USORF
                        plannedDepartureDate: '2024-01-20'
                        plannedArrivalDate: '2024-01-31'
                        modeOfTransport: VESSEL
                        vesselName: MAERSK IOWA
                        vesselIMONumber: '9298686'
                        carrierSerivceCode: TA1
                        carrierExportVoyageNumber: 403W
                    shipmentCutOffTimes:
                      - cutOffDateTimeCode: DCO
                        cutOffDateTime: '2024-01-17T22:30:00.000'
                      - cutOffDateTimeCode: VCO
                        cutOffDateTime: '2024-01-18T22:30:00.000'
                      - cutOffDateTimeCode: FCO
                        cutOffDateTime: '2024-01-19T13:30:00.000'
                    advanceManifestFilings:
                      - manifestTypeCode: ACE
                        countryCode: US
                    carrierClauses:
                      - 'The date of shipment, the carrying vessel and the schedule are not guaranteed and are always subject to changes.'
                      - ' Operations such as lifting, stowage, drayage and customs declaration of containers are based on the description of the nature, quantity, measurement and weight declared by the Shipper. The Shipper shall be liable for any damage, loss, expense and fines incurred by Carrier XYZ or its agents due to incorrectness or incompleteness of such declaration.'
                      - ' Warranted shipper must fulfill the requirements of SOLAS regulations and the IMO guidelines regarding the Verified Gross Mass (VGM) of container carrying cargo (msc.1/circ.1474, 9 June 2014).'
                      - ' In accordance with SOLAS regulations and IMO guidelines regarding the VGM (verified gross mass), any expenses incurred because the VGM was submitted late or was not submitted at all will be charged back to the customer with an additional administration fee.'
        '404':
          description: |
            In case the consumer is requesting the `Amended Booking` by calling:

                GET /v2/bookings/{bookingReference}?amendedContent=true
                
            but:
            - the `Booking` has not yet been confirmed
            - the `Booking` has been confirmed but no amendment has yet been provided by the consumer
            - the provider has requested for a new amendment (**UseCase 6: Request to amend confirmed Booking**) in which case the "old update" is no longer accessable.

            a `404` (Not Found) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                notFoundExample:
                  summary: |
                    Missing amended Booking
                  description: |
                    The `Amended Booking` response is requested - but no `Amended Booking` exists.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/bookings/cbrr-123?amendedContent=true
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: No amended booking exists
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: No amended booking
                        errorCodeMessage: No amended booking available
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Booking request
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Booking request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                getError:
                  summary: |
                    GET non-existing Booking Request
                  description: |
                    Calling

                        GET /v2/bookings/cbrr-123
                        
                    results in an error as booking `cbrr-123` does not exist.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: The requested carrierBookingRequestReference does not exist
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Non existent carrierBookingRequestReference
                        errorCodeMessage: carrierBookingRequestReference `cbrr-123` does not exist
    patch:
      tags:
        - Booking
      summary: |
        Cancels the Booking or cancels a Booking Amendment
      operationId: cancel-booking
      description: |
        A shipper initiated cancellation of the `Booking` or `Booking Amendment`. This endPoint corresponds with **UseCase 11 - Cancel Booking by shipper** or **UseCase 9 - Cancel amendment to confirmed Booking**.

        ## Precondition
        In order to cancel a `Booking`, the `bookingStatus` must be either
        - `RECEIVED`
        - `PENDING UPDATE`
        - `UPDATE RECEIVED`
        - `CONFIRMED`
        - `PENDING AMENDMENT`

        In order to cancel a `Booking Amendment`, the status of the `Booking Amendment` must be
        - `AMENDMENT RECEIVED`

        ## Postcondition
        The provider has received a cancellation from the consumer for a `Booking` or for a `Booking Amendment`.

        The consumer will receive a `200` (OK) if the payload schema-validates or a `400` (Bad Request) if it does not.

        ## Flow
        The following occurs when a provider receives a cancellation request:
        1. The payload is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.

           **The process stops here!**
        2. The payload is schema-valid which means:

           - all required properties are provided.
           - all values provided have correct data type.
        3. Depending on the paylod of the request - either:

           - the entire `Booking` is cancelled (including any ongoing amendment). This is the case when the payload contains `bookingStatus='CANCELLED'`.
           
             When cancelling a `Booking` the `amendedBookingStatus` is set to `AMENDMENT CANCELLED`
           - only the amendment to the `Booking` is cancelled (in this case the `Booking` continues and `bookingStatus` stays unchanged). This is the case when the payload contains `amendedBookingStatus='AMENDMENT CANCELLED'`.
             
             **If** no amendment is being requested prior to this call (`amendedBookingStatus` is **not** `AMENDMENT RECIEVED`) then a 404 (Not Found) is returned
        4. All '*relevant*' subscribers will be notified via a [Booking Notification](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_BKG_NTF/2.0.0-Beta-1#/Notifications/booking-notifications).
      parameters:
        - $ref: '#/components/parameters/bookingReferencePathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              oneOf:
                - type: object
                  title: Cancel entire Booking
                  properties:
                    bookingStatus:
                      type: string
                      maxLength: 50
                      description: |
                        Setting the `bookingStatus` to `CANCELLED` cancels the entire `Booking` (also any ongoing amendment requests). The `Booking` will discontinue if the request is accepted by the provider.

                        Only possible value to set is `CANCELLED`.
                      example: CANCELLED
                  required:
                    - bookingStatus
                - type: object
                  title: Only cancel the amendment to a Booking
                  properties:
                    amendedBookingStatus:
                      type: string
                      maxLength: 50
                      description: |
                        Setting the `amendedBookingStatus` to `AMENDMENT CANCELLED` **only** cancels the amendment to the `Booking`. 

                        It is a precondition that the `amendedBookingStatus` **is** `AMENDMENT RECEIVED` in order to cancel it. If this is not the case a `404` (Not Found) error response should be returned.

                        Only possible value to set is `AMENDMENT CANCELLED`.
                      example: AMENDMENT CANCELLED
                  required:
                    - amendedBookingStatus
              properties:
                reason:
                  type: string
                  maxLength: 5000
                  description: |
                    An optional property where a reason for cancelling the booking or the amendment can be given.
                  example: Booking cancelled due to internal problems
            examples:
              bookingCancelledExample:
                summary: |
                  Entire Booking cancelled
                description: |
                  The consumer wants to cancel the entire `Booking`. This is done by setting the `bookingStatus` to `CANCELLED` and provide an optional `reason`.
                value:
                  bookingStatus: CANCELLED
                  reason: Customer cancelled order
              amendmentCancelledExample:
                summary: |
                  Amendment cancelled
                description: |
                  The consumer wants to **only** cancel the amendment (and keep the `Booking`). This is done by setting the `amendedBookingStatus` to `AMENDMENT CANCELLED`.
                value:
                  amendedBookingStatus: AMENDMENT CANCELLED
      responses:
        '200':
          description: |
            Booking has been cancelled
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/3.0.0#/components/schemas/BookingRefCancelledStatus'
              examples:
                bookingCancelledExample:
                  summary: |
                    Entire Booking cancelled
                  description: |
                    The consumer has requested that the entire `Booking` should be cancelled. `bookingStatus` is set to `CANCELLED` and `amendedBookingStatus` is set to `AMENDMENT CANCELLED`.
                  value:
                    carrierBookingRequestReference: cbrr-123
                    carrierBookingReference: cbr-987
                    bookingStatus: CANCELLED
                    amendedBookingStatus: AMENDMENT CANCELLED
                amendmentCancelled1Example:
                  summary: |
                    Amendment cancelled on a confirmed Booking
                  description: |
                    The consumer has requested that the amendment to a confirmed `Booking` is to be cancelled. The status of the `Booking` stays as `CONFIRMED`. The `amendedBookingStatus` is set to `AMENDMENT CANCELLED`.
                  value:
                    carrierBookingRequestReference: cbrr-123
                    carrierBookingReference: cbr-987
                    bookingStatus: CONFIRMED
                    amendedBookingStatus: AMENDMENT CANCELLED
                amendmentCancelled2Example:
                  summary: |
                    Amendment requested by provider cancelled by consumer
                  description: |
                    The consumer has requested that the amendment to a confirmed `Booking` is to be cancelled. The status of the `Booking` stays as `PENDING AMENDMENT`. The `amendedBookingStatus` is set to `AMENDMENT CANCELLED`.
                  value:
                    carrierBookingRequestReference: cbrr-123
                    carrierBookingReference: cbr-987
                    bookingStatus: PENDING AMENDMENT
                    amendedBookingStatus: AMENDMENT CANCELLED
        '409':
          description: |
            In case the provider is processing an already updated Booking request - it is possible for the provider to reject the cancellation by returning a `409` (Conflict)
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                conflictExample:
                  summary: |
                    Conflicting request
                  description: |
                    The provider is already processing a request and needs to finish this process.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PATCH
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 409
                    statusCodeText: Conflict
                    statusCodeMessage: Previous request is being processed. Please try again later
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Conflicting request is being processed
                        errorCodeMessage: Conflicting request is being processed
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
components:
  headers:
    API-Version:
      schema:
        type: string
        example: 2.0.0-Beta-1
      description: |
        SemVer used to indicate the version of the contract (API version) returned.
  parameters:
    Api-Version-Major:
      in: header
      name: API-Version
      required: false
      schema:
        type: string
        example: '2'
      description: |
        An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
    amendedContent:
      in: query
      name: amendedContent
      description: |
        Controls wether the content of this payload is the amendmended Booking (`amendedContent=true`) or the confirmed Booking (`amendedContent=false`).

        If `amendedContent=true` and no amendment has been requested or if the provider is not able to send the amendment - the response will be a `404` Not Found
      schema:
        type: boolean
        default: false
        example: false
    bookingReferencePathParam:
      in: path
      name: bookingReference
      description: |
        This can be one of:
        - `carrierBookingRequestReference` (in case no carrierBookingReference has yet been appointed to the booking)
        - `carrierBookingReference`
      schema:
        type: string
        pattern: ^\S+(\s+\S+)*$
        maxLength: 100
        example: CBR001
      required: true
  schemas:
    CreateBooking:
      x-stoplight:
        id: 2im5qoznlh1pl
      type: object
      title: Booking
      required:
        - receiptTypeAtOrigin
        - deliveryTypeAtDestination
        - cargoMovementTypeAtOrigin
        - cargoMovementTypeAtDestination
        - isPartialLoadAllowed
        - isExportDeclarationRequired
        - isImportLicenseRequired
        - communicationChannelCode
        - isEquipmentSubstitutionAllowed
        - shipmentLocations
        - requestedEquipments
      properties:
        receiptTypeAtOrigin:
          type: string
          maxLength: 3
          description: |
            Indicates the type of service offered at `Origin`. The options are:
            - `CY` (Container yard (incl. rail ramp))
            - `SD` (Store Door)
            - `CFS` (Container Freight Station)
          enum:
            - CY
            - SD
            - CFS
          example: CY
        deliveryTypeAtDestination:
          type: string
          maxLength: 3
          description: |
            Indicates the type of service offered at `Destination`. The options are:
            - `CY` (Container yard (incl. rail ramp))
            - `SD` (Store Door)
            - `CFS` (Container Freight Station)
          enum:
            - CY
            - SD
            - CFS
          example: CY
        cargoMovementTypeAtOrigin:
          type: string
          maxLength: 3
          description: |
            Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:
            - `FCL` (Full Container Load)
            - `LCL` (Less than Container Load)
          example: FCL
        cargoMovementTypeAtDestination:
          type: string
          maxLength: 3
          description: |
            Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:
            - `FCL` (Full Container Load)
            - `LCL` (Less than Container Load)
          example: FCL
        serviceContractReference:
          type: string
          maxLength: 30
          description: |
            Reference number for agreement between shipper and carrier through which optionally includes a certain minimum quantity of cargo that the shipper commits to over a fixed period, and the carrier commits to a certain rate or rate schedule.
          example: HHL51800000
        freightPaymentTermCode:
          type: string
          description: |
            An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        originChargesPaymentTermCode:
          type: string
          description: |
            An indicator of whether origin charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided). Examples of origin charges are customs clearance fees, documentation fees, container packing and loading charges levied at the port of origin to cover the costs of preparing the cargo for shipment. They include the cost of inland transportation to the port, when applicable.
            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        destinationChargesPaymentTermCode:
          type: string
          description: |
            An indicator of whether destination charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided). Examples of destination charges are customs clearance fees, documentation fees, terminal handling fees at the destination port and the costs of inland transportation from the port to the final delivery location, when applicable.
            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        contractQuotationReference:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 35
          description: |
            Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference. Mandatory if service contract (owner) is not provided.
          example: HHL1401
        vessel:
          type: object
          title: Vessel
          required:
            - name
          properties:
            name:
              type: string
              pattern: ^\S+(\s+\S+)*$
              maxLength: 35
              description: |
                The name of the Vessel given by the Vessel Operator and registered with IMO.
              example: King of the Seas
            vesselIMONumber:
              type: string
              pattern: '^\d{7}$'
              maxLength: 7
              description: |
                The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel
              example: '9321483'
        carrierServiceName:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 50
          description: |
            The name of a service as specified by the carrier
          example: Great Lion Service
        carrierServiceCode:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 11
          description: |
            The carrier-specific code of the service for which the schedule details are published.
          example: FE1
        universalServiceReference:
          type: string
          pattern: '^SR\d{5}[A-Z]$'
          maxLength: 8
          description: |
            A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.
          example: SR12345A
        carrierExportVoyageNumber:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 50
          example: 2103S
          description: |
            The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
        universalExportVoyageReference:
          type: string
          pattern: '^\d{2}[0-9A-Z]{2}[NEWSR]$'
          description: |
            A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
          example: 2103N
        declaredValue:
          type: number
          format: float
          minimum: 0
          description: |
            The value of the cargo that the shipper declares to avoid the carrier's limitation of liability and "Ad Valorem" freight, i.e. freight which is calculated based on the value of the goods declared by the shipper.
          example: 1231.1
        declaredValueCurrency:
          type: string
          pattern: '^[A-Z]{3}$'
          maxLength: 3
          description: |
            The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
          example: DKK
        isPartialLoadAllowed:
          type: boolean
          description: |
            Indication whether the shipper agrees to load part of the shipment in case where not all of the cargo is delivered within cut-off.
          example: true
        isExportDeclarationRequired:
          type: boolean
          description: |
            Information provided by the shipper whether an export declaration is required for this particular shipment/commodity/destination.
          example: true
        exportDeclarationReference:
          $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/schemas/exportDeclarationReference'
        isImportLicenseRequired:
          $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/3.1.0#/components/schemas/isImportLicenseRequired'
        importLicenseReference:
          type: boolean
          description: |
            Information provided by the shipper whether an import permit or license is required for this particular shipment/commodity/destination.
          example: true
        expectedDepartureDate:
          type: string
          format: date
          description: |
            The date when the shipment is expected to be loaded on board a vessel as provided by the shipper or its agent. If vessel/voyage or expected date of arrival is not provided, this is mandatory
          example: '2021-05-17'
        expectedArrivalAtPlaceOfDeliveryStartDate:
          type: string
          format: date
          description: |
            The start date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryEndDate`) for when the shipment is expected to arrive at final destination. If vessel/voyage or `expectedDepartureDate` is not provided, this is mandatory together with `expectedArrivalAtPlaceOfDeliveryEndDate`
          example: '2021-05-17'
        expectedArrivalAtPlaceOfDeliveryEndDate:
          type: string
          format: date
          description: |
            The end date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryStartDate`) for when the shipment is expected to arrive at final destination. If vessel/voyage or `expectedDepartureDate` is not provided, this is mandatory together with `expectedArrivalAtPlaceOfDeliveryStartDate`
          example: '2021-05-19'
        transportDocumentTypeCode:
          type: string
          description: |
            Specifies the type of the `Transport Document`. Possible values are:
            - `BOL` (Bill of Lading)
            - `SWB` (Sea Waybill)
          enum:
            - BOL
            - SWB
          example: SWB
        transportDocumentReference:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 20
          description: |
            A unique reference allocated by the shipping line to the `Transport Document` that the booking concerns.
          example: reserved-HHL123
        bookingChannelReference:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 20
          description: |
            Identification number provided by the platform/channel used for booking request/confirmation, ex: Inttra booking reference, or GTNexus, other. Conditional on booking channel being used
          example: Inttra reference
        incoTerms:
          type: string
          maxLength: 3
          description: |
            Transport obligations, costs and risks as agreed between buyer and seller as defined by [ICC](https://iccwbo.org/business-solutions/incoterms-rules/). A list of possible values:
            - `EXW` (Ex-Works)
            - `FCA` (Free Carrier)
            - `FAS` (Free Alongside Ship)
            - `FOB` (Free On Board)
            - `CFR` (Cost and Freight)
            - `CIF` (Cost, Insurance and Freight)
            - `CPT` (Carriage Paid To)
            - `CIP` (Carriage And Insurance Paid To)
            - `DAP` (Delivered At Place)
            - `DPU` (Delivered At Place Unloaded)
            - `DDP` (Delivered Duty Paid)
          example: FCA
        communicationChannelCode:
          type: string
          maxLength: 2
          description: |
            Specifying which communication channel is to be used for this booking e.g. Possible values are:
            - `EI` (EDI transmission)
            - `EM` (Email)
            - `AO` (API)
          example: AO
        isEquipmentSubstitutionAllowed:
          type: boolean
          description: |
            Indicates if an alternate equipment type can be provided by the carrier.
          example: true
        invoicePayableAt:
          type: object
          title: Invoice Payable At
          description: |
            General purpose object to capture `Invoice Payable At` location.

            The location can be specified in **one** of the following ways: `UN Location Code` or an `Address`.
          example:
            locationName: Eiffel Tower
            locationType: UNLO
            UNLocationCode: FRPAR
          oneOf:
            - $ref: ../../models/UnLocationLocation.yaml
            - $ref: ../../models/AddressLocation.yaml
          discriminator:
            propertyName: locationType
            mapping:
              ADDR: ../../models/AddressLocation.yaml
              UNLO: ../../models/UnLocationLocation.yaml
        placeOfBLIssue:
          type: object
          title: Place of B/L Issue
          description: |
            General purpose object to capture `Place of B/L Issue` location.

            The location can be specified in **one** of the following ways: `UN Location Code` or an `Address`.
          example:
            locationName: DCSA Headquarters
            locationType: UNLO
            UNLocationCode: NLAMS
          oneOf:
            - $ref: ../../models/UnLocationLocation.yaml
            - $ref: ../../models/AddressLocation.yaml
          discriminator:
            propertyName: locationType
            mapping:
              ADDR: ../../models/AddressLocation.yaml
              UNLO: ../../models/UnLocationLocation.yaml
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
        documentParties:
          type: array
          description: |
            A list of `Document Parties`
          items:
            $ref: '#/components/schemas/DocumentParty'
        partyContactDetails:
          type: array
          description: |
            The contact details of the person(s) to contact in relation to the **Booking** (changes, notifications etc.) 
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        shipmentLocations:
          type: array
          items:
            $ref: '#/components/schemas/ShipmentLocation'
        requestedEquipments:
          type: array
          minLength: 1
          description: |
            List of `Requested Equipments`. Multiple containers can be requested within the same booking. For each Requested Equipment object with 2 or more units, it is a condition that the commodity (or list of commodities) defined within the same Requested Equipment object is the same for each requested unit.

            **Example:** 2 x 20' containing 50% shoes and 50% t-shirts can be requested within the same Requested Equipment object only if each 20' will contain 50% shoes and 50% t-shirts. If 1 x 20' will contain 100% shoes and the other 20' will be 100% t-shirts, 2 separate Requested Equipment objects must be defined.
          items:
            $ref: '#/components/schemas/RequestedEquipment_SHI'

    ActiveReeferSettings:
      type: object
      title: 'Active Reefer Settings'
      description: |
        The specifications for a Reefer equipment.
        
        **Condition:** Only applicable when`isNonOperatingReefer` is set to `false`
      properties:
        temperatureSetpoint:
          type: number
          format: float
          description: |
            Target value of the temperature for the Reefer based on the cargo requirement.
          example: -15
        temperatureUnit:
          type: string
          description: |
            The unit for temperature in Celsius or Fahrenheit
            - `CEL` (Celsius)
            - `FAH` (Fahrenheit)
            
            **Condition:** Mandatory to provide if `temperatureSetpoint` is provided
          enum:
            - CEL
            - FAH
          example: 'CEL'
        o2Setpoint:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: |
            The percentage of the controlled atmosphere CO<sub>2</sub> target value
          example: 25
        co2Setpoint:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: |
            The percentage of the controlled atmosphere CO<sub>2</sub> target value
          example: 25
        humiditySetpoint:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: |
            The percentage of the controlled atmosphere humidity target value
          example: 95.6
        airExchangeSetpoint:
          type: number
          format: float
          minimum: 0
          description: |
            Target value for the air exchange rate which is the rate at which outdoor air replaces indoor air within a Reefer container
          example: 15.4
        airExchangeUnit:
          type: string
          description: |
            The unit for `airExchange` in metrics- or imperial- units per hour
            - `MQH` (Cubic metre per hour)
            - `FQH` (Cubic foot per hour)
            
            **Condition:** Mandatory to provide if `airExchange` is provided
          enum:
            - MQH
            - FQH
          example: MQH
        isVentilationOpen:
          type: boolean
          description: |
            If `true` the ventilation orifice is `Open` - if `false` the ventilation orifice is `closed`
          example: true
        isDrainholesOpen:
          type: boolean
          description: |
            Is drainholes open on the container
          example: true
        isBulbMode:
          type: boolean
          description: |
            Is special container setting for handling flower bulbs active
          example: true
        isColdTreatmentRequired:
          type: boolean
          description: |
            Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD
          example: true
        isControlledAtmosphereRequired:
          type: boolean
          description: |
            Indicator of whether cargo requires Controlled Atmosphere.
          example: true

    ActiveReeferSettings_BKG:
      type: object
      title: 'Active Reefer Settings'
      properties:
        isPreCoolingRequired:
          type: boolean
          description: |
            Indicator whether reefer container should be pre-cooled to the temperature setting required at time of release from depot
          example: true
        isGeneratorSetRequired:
          type: boolean
          description: |
            Indicator whether reefer container should have a generator set attached at time of release from depot
          example: true
      allOf:
        - $ref: '#/components/schemas/ActiveReeferSettings'

    Address:
      x-stoplight:
        id: d7080237de39b
      type: object
      title: Address
      description: |
        An object for storing address related information
      properties:
        name:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 100
          description: |
            Name of the address
          example: Henrik
        street:
          type: string
          maxLength: 100
          description: The name of the street of the partyâs address.
          example: Ruijggoordweg
        streetNumber:
          type: string
          maxLength: 50
          description: The number of the street of the partyâs address.
          example: '100'
        floor:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 50
          description: |
            The floor of the partyâs street number.
          example: N/A
        postCode:
          type: string
          maxLength: 50
          description: The post code of the partyâs address.
          example: 1047 HM
        city:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 65
          description: |
            The city name of the partyâs address.
          example: Amsterdam
        stateRegion:
          type: string
          maxLength: 65
          description: The state/region of the partyâs address.
          nullable: true
          example: North Holland
        country:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 75
          description: |
            The country of the partyâs address.
          example: The Netherlands
      required:
        - name
        - country
    Commodity:
      type: object
      title: Commodity
      description: |
        Type of goods, defined by its commodity type
      properties:
        commodityType:
          type: string
          pattern: '^\S+(\s+\S+)*$'
          maxLength: 550
          description: |
            High-level description of goods to be shipped which allow the carrier to confirm acceptance and commercial terms. To be replaced by "description of goods" upon submission of `Shipping Instructions`
          example: 'Mobile phones'
        HSCodes:
          type: array
          description: |
            A list of `HS Codes` that apply to this `commodity`
          items:
            type: string
            pattern: '^\d{6,10}$'
            minLength: 6
            maxLength: 10
            description: |
              Used by customs to classify the product being shipped. The type of HS code depends on country and customs requirements. The code must be at least 6 and at most 10 digits.
              
              More information can be found here: [HS Nomenclature 2022 edition](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools/hs-nomenclature-2022-edition/hs-nomenclature-2022-edition.aspx ).
              
              This standard is based on the 2022 revision.
            example: '851713'
        cargoGrossWeight:
          type: number
          format: float
          example: 36000.0
          minimum: 0
          exclusiveMinimum: true
          description: |
            The estimated grand total gross weight of the cargo, including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.
        cargoGrossWeightUnit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: 'KGM'
        cargoGrossVolume:
          type: number
          format: float
          example: 360.0
          minimum: 0
          exclusiveMinimum: true
          description: |
            The grand total volume of the commodity
        cargoGrossVolumeUnit:
          type: string 
          description: |
            The unit of measure which can be expressed in either imperial or metric terms
            - `FTQ` (Cubic foot)
            - `MTQ` (Cubic meter)
          enum:
            - MTQ
            - FTQ
          example: 'MTQ'
        exportLicenseIssueDate:
          type: string
          format: date
          description: |
            Issue date of the export license applicable to the booking. Mandatory to provide in booking request for specific commodities
          example: '2021-05-14'
        exportLicenseExpiryDate:
          type: string
          format: date
          description: |
            Expiry date of the export license applicable to the booking.
            
            Mandatory to provide in booking request for specific commodities.
          example: '2021-05-21'
        outerPackaging:
          $ref: '#/components/schemas/OuterPackaging'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
      required:
        - commodityType
        - cargoGrossWeight
        - cargoGrossWeightUnit

    Commodity_CONF:
      type: object
      title: 'Commodity'
      description: |
        Type of goods, defined by its commodity type
      properties:
        commoditySubreference:
          type: string
          maxLength: 100
          pattern: '^\S+(\s+\S+)*$'
          description: |
            A unique reference for this commodity object assigned by the carrier in the booking confirmation. The reference must be provided by the shipper as part of the `Shipping Instructions` for the carrier to link the consignment item to this commodity. A commodity reference is only unique in the context of a booking.
            
            **Conditional:** Mandatory to provide for `CONFIRMED` bookings
          example: 'COM-001'
      allOf:
        - $ref: '#/components/schemas/Commodity'
    DocumentParty:
      type: object
      title: Document Party
      description: |
        Associates a `Party` with a role.
      properties:
        party:
          $ref: '#/components/schemas/Party'
        partyFunction:
          type: string
          maxLength: 3
          description: |
            Specifies the role of the party in a given context. Possible values are:
            - `OS` (Original shipper)
            - `CN` (Consignee)
            - `COW` (Invoice payer on behalf of the consignor (shipper))
            - `COX` (Invoice payer on behalf of the consignee)
            - `MS` (Document/message issuer/sender)
            - `N1` (First Notify Party)
            - `N2` (Second Notify Party)
            - `NI` (Other Notify Party)
            - `DDR` (Consignor's freight forwarder)
            - `DDS` (Consignee's freight forwarder)
            - `HE` (Carrier booking office (transportation office))
            - `SCO` (Service contract owner - Defined by DCSA)
            - `BA` (Booking Agency)
            - `END` (Endorsee Party)
          example: DDS
        displayedAddress:
          description: |
            The address to be displayed in the `Transport Document`. The displayed address may be used to match the address provided in the letter of credit. It is mandatory to provide a displayed address if the B/L needs to be switched to paper later in the process
          type: array
          minItems: 1
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A single address line to be used when a B/L needs to be printed.
            example: Strawinskylaan 4117
        isToBeNotified:
          type: boolean
          description: |
            Used to decide whether the party will be notified of the arrival of the cargo.
          example: true
      required:
        - party
        - partyFunction
        - isToBeNotified
    IdentifyingCode:
      type: object
      title: Identifying Code
      properties:
        codeListProvider:
          type: string
          maxLength: 5
          description: |
            A DCSA provided code for [UN/CEFACT](https://unece.org/fileadmin/DAM/trade/untdid/d16b/tred/tred3055.htm) code list providers:
            - `ISO` (International Standards Organization)
            - `UNECE` (United Nations Economic Commission for Europe)
            - `LLOYD` (Lloyd's register of shipping)
            - `BIC` (Bureau International des Containeurs)
            - `IMO` (International Maritime Organization)
            - `SCAC` (Standard Carrier Alpha Code)
            - `ITIGG` (International Transport Implementation Guidelines Group)
            - `ITU` (International Telecommunication Union)
            - `SMDG` (Shipplanning Message Development Group)
            - `NCBH` (NCB Hazcheck)
            - `FMC` (Federal Maritime Commission)
            - `CBSA` (Canada Border Services Agency)
            - `DCSA` (Digitial Container Shipping Association)
            - `W3C` (World Wide Web Consortium)
            - `GLEIF` (Global Legal Entity Identifier Foundation)
            - `EPI` (EBL Platform Identifier)
            - `ZZZ` (Mutually defined)
          example: SMDG
        partyCode:
          type: string
          description: |
            Code to identify the party as provided by the code list provider
          maxLength: 100
          example: MSK
        codeListName:
          type: string
          description: |
            The name of the list, provided by the code list provider
          maxLength: 100
          example: LCL
      required:
        - codeListProvider
        - partyCode
    OuterPackaging:
      type: object
      title: 'Outer Packaging'
      description: |
        Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport. It is an array of the attributes below.
        
        **Conditional:** Mandatory for DG (Dangerous Goods) cargo.
      properties:
        packageCode:
          type: string
          pattern: '^[A-Z0-9]{2}$'
          description: |
            A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation NÂ°21 - Revision 12  Annexes V and VI](https://unece.org/sites/default/files/2021-06/rec21_Rev12e_Annex-V-VI_2021.xls)
            
            **Condition:** only applicable to dangerous goods if the `IMO packaging code` is not available.
          example: 5H
        imoPackagingCode:
          type: string
          pattern: '^[A-Z0-9]{1,5}$'
          description: |
            The code of the packaging as per IMO.
            
            **Condition:** only applicable to dangerous goods if specified in the IMO IMDG code amendment version 41-22. If not available, the `packageCode` as per UN recommendation 21 should be used.
          example: 1A2
        numberOfPackages:
          type: integer
          format: int32
          minimum: 1
          description: |
            Specifies the number of outer packagings/overpacks associated with this `Commodity`.
            
            **Conditional:** In case this `OuterPackaging` includes `Dangerous Goods` the `numberOfPackages` is mandatory to provide
          example: 18
        # unRecomemendation21PackingCode:
        #   type: string
        #   pattern: '^[A-Z0-9]{2}$'
        #   description: |
        #     The code of the packaging as per UN recommendation 21.
            
        #     **Condition:** only applicable to dangerous goods if the IMO packaging code is not available.
        #   example: 1A
        description:
          type: string
          maxLength: 100
          description: |
            Description of the outer packaging/overpack.
          example: Drum, steel
        dangerousGoods:
          type: array
          minLength: 1
          description: |
            A list of `Dangerous Goods` related to the `Commodity`
          items:
            $ref: '#/components/schemas/DangerousGoods_BKG'
    Party:
      type: object
      title: Party
      description: |
        Refers to a company or a legal entity.
      properties:
        partyName:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 100
          description: |
            Name of the party.
          example: Asseco Denmark
        address:
          $ref: '#/components/schemas/Address'
        partyContactDetails:
          type: array
          minItems: 1
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
      required:
        - partyName

    PartyContactDetail:
      type: object
      title: Party Contact Detail
      description: |
        The contact details of the person to contact. It is mandatory to provide either `phone` and/or `email` along with the `name`.
      example:
        name: Henrik
        phone: +45 51801234
      properties:
        name:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 100
          description: |
            Name of the contact
          example: Henrik
      anyOf:
        - type: object
          title: Phone required
          description: |
            `Phone` is mandatory to provide
          properties:
            phone:
              type: string
              pattern: ^\S+(\s+\S+)*$
              maxLength: 30
              description: |
                Phone number for the contact
              example: +45 70262970
          required:
            - phone
        - type: object
          title: Email required
          description: |
            `Email` is mandatory to provide
          properties:
            email:
              type: string
              pattern: ^.+@\S+$
              maxLength: 100
              description: |
                `E-mail` address to be used
              example: info@dcsa.org
          required:
            - email
      required:
        - name
    Reference:
      type: object
      title: Reference
      description: |
        References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
      properties:
        type:
          type: string
          maxLength: 3
          description: |
            The reference type codes defined by DCSA. Possible values are:
            - `FF` (Freight Forwarderâs Reference)
            - `SI` (Shipperâs Reference)
            - `SPO` (Shippers Purchase Order Reference)
            - `CPO` (Consignees Purchase Order Reference)
            - `CR` (Customerâs Reference)
            - `AAO` (Consigneeâs Reference)
            - `ECR` (Empty container release reference)
            - `CSI` (Customer shipment ID)
            - `BPR` (Booking party reference number)
            - `BID` (Booking Request ID)
            - `SAC` (Shipping Agency Code)
          example: FF
        value:
          type: string
          maxLength: 100
          description: |
            The value of the reference. 
          example: HHL00103004
      required:
        - type
        - value
    ShipmentLocation:
      type: object
      title: Shipment Location
      description: |
        Maps the relationship between `Shipment` and `Location`, e.g., the `Place of Receipt` and the `Place of Delivery` for a specific shipment. This is a reusable object between `Booking` and `Transport Document`
      properties:
        location:
          type: object
          title: Location
          description: |
            General purpose object to capture the location in the `ShipmentLocation`.

            The location can be specified in **one** of the following ways: `UN Location Code`, `Facility` or an `Address`.
          example:
            locationName: CMP Container Terminal Copenhagen
            locationType: FACI
            UNLocationCode: DKCPH
            facilityCode: CMPDK
            facilityCodeListProvider: SMDG
          oneOf:
            - $ref: ../../models/AddressLocation.yaml
            - $ref: ../../models/FacilityLocation.yaml
            - $ref: ../../models/UnLocationLocation.yaml
          discriminator:
            propertyName: locationType
            mapping:
              ADDR: ../../models/AddressLocation.yaml
              FACI: ../../models/FacilityLocation.yaml
              UNLO: ../../models/UnLocationLocation.yaml
        locationTypeCode:
          type: string
          maxLength: 3
          description: |
            Links to the Location Type Code defined by DCSA. Possible values are:
            - `PRE` (Place of Receipt)
            - `POL` (Port of Loading)
            - `POD` (Port of Discharge)
            - `PDE` (Place of Delivery)
            - `PCF` (Pre-carriage From)
            - `OIR` (Onward In-land Routing)
            - `DRL` (Depot release location)
            - `ORI` (Origin of goods)
            - `IEL` (Container intermediate export stop off location)
            - `PTP` (Prohibited transshipment port)
            - `RTP` (Requested transshipment port)
            - `FCD` (Full container drop-off location)
          example: PRE
        eventDateTime:
          type: string
          format: date-time
          description: |
            A date when the event is taking place at the location
          example: '2021-11-03T10:23:00-01:00'
      required:
        - location
        - locationTypeCode
    TaxLegalReference:
      type: object
      title: Tax & Legal Reference
      description: |
        Reference that uniquely identifies a party for tax and/or legal purposes in accordance with the relevant jurisdiction.

        A list of examples:

        | Type  | Country | Description |
        |-------|:-------:|-------------|
        |PAN|IN|Goods and Services Tax Identification Number in India|
        |GSTIN|IN|Goods and Services Tax Identification Number in India|
        |IEC|IN|Importer-Exported Code in India|
        |RUC|EC|Registro Ãnico del Contribuyente in Ecuador|
        |RUC|PE|Registro Ãnico del Contribuyente in Peru|
        |NIF|MG|NumÃ©ro dâIdentification Fiscal in Madagascar|
        |NIF|DZ|NumÃ©ro dâIdentification Fiscal in Algeria|

        Allowed combinations of `type` and `country` are maintained in [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/documentation/reference-data/taxandlegalreferences-v300.csv).
      properties:
        type:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 50
          description: |
            The reference type code as defined by the relevant tax and/or legal authority.
          example: PAN
        countryCode:
          type: string
          pattern: '^[A-Z]{2}$'
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: DK
        value:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 100
          description: |
            The value of the `taxLegalReference`
          example: AAAAA0000A
      required:
        - type
        - countryCode
        - value
    SocEquipment:
      type: object
      title: Shipper owned Equipment
      properties:
        tareWeight:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The weight of an empty container (gross container weight).
          example: 4800
        tareWeightUnit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: KGM
        isShipperOwned:
          type: boolean
          description: |
            Indicates whether the container is shipper owned (`SOC`).
          example: true
      required:
        - tareWeight
        - tareWeightUnit
        - isShipperOwned

    CocEquipment:
      type: object
      x-stoplight:
        id: f16bac5e97b11
      title: Carrier owned Equipment
      properties:
        isShipperOwned:
          type: boolean
          description: |
            Indicates whether the container is shipper owned (`SOC`).
          example: false
      required:
        - isShipperOwned

    RequestedEquipment:
      type: object
      title: Requested Equipment
      description: |
        If needed - it is **only** possible to specify a single Reefer setting. If multiple settings are required for the same `equipmentSizeType` then multiple `requestedEquipment` should be specified (one for each Reefer setting).
      properties:
        ISOEquipmentCode:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 4
          description: |
            Unique code for the different equipment size and type used to transport commodities. The code can refer to either the ISO size type (e.g. 22G1) or the ISO type group (e.g. 22GP) following the [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346) standard.
          example: 22RT
        units:
          type: integer
          format: int32
          minimum: 1
          description: |
            Number of requested equipment units.
          example: 3
        equipmentReferences:
          description: |
            A list of equipments to be used by the shipper if known at the time of booking
          type: array
          items:
            type: string
            pattern: '^\S+(\s+\S+)*$'
            maxLength: 11
            description: |
              The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
              According to [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).
              
              If a container does not comply with [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
            example: 'APZU4812090'
        isNonOperatingReefer:
          type: boolean
          description: |
            If the equipment is a Reefer Container then setting this attribute will indicate that the container should be treated as a `DRY` container.
            
            **Condition:** Only applicable if `ISOEquipmentCode` shows a Reefer type.
          example: false
        activeReeferSettings:
          description: |
            The specifications for a Reefer equipment.

            **Condition:** Only applicable when `isNonOperatingReefer` is set to `false`
          allOf:
            - $ref: '#/components/schemas/ActiveReeferSettings_BKG'
          required:
            - temperatureSetpoint
            - temperatureUnit
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
      oneOf:
        - $ref: '#/components/schemas/SocEquipment'
        - $ref: '#/components/schemas/CocEquipment'
      discriminator:
        propertyName: isShipperOwned
        mapping:
          'true': '#/components/schemas/SocEquipment'
          'false': '#/components/schemas/CocEquipment'
      required:
        - ISOEquipmentCode
        - units

    RequestedEquipment_CAR:
      type: object
      title: Requested Equipment
      description: |
        If needed - it is **only** possible to specify a single Reefer setting. If multiple settings are required for the same `equipmentSizeType` then multiple `requestedEquipment` should be specified (one for each Reefer setting).
      properties:
        commodities:
          type: array
          description: |
            A list of `Commodities`
          items:
            $ref: '#/components/schemas/Commodity_CONF'
      allOf:
        - $ref: '#/components/schemas/RequestedEquipment'

    RequestedEquipment_SHI:
      type: object
      title: Requested Equipment
      description: |
        If needed - it is **only** possible to specify a single Reefer setting. If multiple settings are required for the same `equipmentSizeType` then multiple `requestedEquipment` should be specified (one for each Reefer setting).
      properties:
        commodities:
          type: array
          description: |
            A list of `Commodities`
          items:
            $ref: '#/components/schemas/Commodity'
      allOf:
        - $ref: '#/components/schemas/RequestedEquipment'
