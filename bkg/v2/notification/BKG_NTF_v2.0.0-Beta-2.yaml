openapi: 3.0.3
info:
  version: 2.0.0-Beta-2
  title: DCSA OpenAPI specification for Booking Notifications
  description: |
    API specification issued by DCSA.org.

    Booking Notifications for [DCSA OpenAPI specification for Booking](https://app.swaggerhub.com/apis/dcsaorg/DCSA_BKG/2.0.0-Beta-2) is a lightweight notification based on [CloudEvents](https://cloudevents.io/). The `POST` endPoint of the consumer is called whenever a `Booking` that is being subscribed to changes state or is updated.

    Subscribing to notification is done outside scope of this API.

    ### Stats API

    The Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to the Booking Notification API. Further details can be found [here](https://labs.dcsa.org/#/http/guides/api-guides/stats-api/introduction)

    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/bkg/notification/v2#v200B2).
    Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: 'https://dcsa.org'
    email: info@dcsa.org
tags:
  - name: Notifications
    description: Notification operations
servers:
  - url: 'http://localhost:3000'
paths:
  /v2/booking-notifications:
    post:
      tags:
        - Notifications
      summary: Send a new Booking Notification
      operationId: booking-notifications
      description: >
        Creates a new [`Booking Notification`](#/BookingNotification). This
        endPoint is called whenever a `Booking` that a cosumer has subscribed to
        changes state or is updated.
      parameters:
        - name: API-Version
          in: header
          description: >
            An API-Version header **MUST** be provided to the request
            (mandatory). The header **MUST** be a [SemVer](https://semver.org/)
            specifying the provider (the calling party) API version.
          required: true
          schema:
            type: string
            example: 2.0.0-Beta-2
      requestBody:
        description: >
          The payload used to create a [`Booking
          Notification`](#/BookingNotification)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingNotification'
            examples:
              receivedExample:
                summary: |
                  Booking request received
                description: >
                  A notification explaining that a `Booking Request` has been
                  received and stored in provider system
                  (`bookingStatus='RECEIVED'`).
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.booking-notification.v2
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  subscriptionReference: BKG001
                  data:
                    bookingStatus: RECEIVED
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
              declinedExample:
                summary: |
                  Booking amendment declined
                description: >
                  A notification explaining that an amendment to a `Booking` has
                  been declined (`amendedBookingStatus='AMENDMENT DECLINED'`)
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.booking-notification.v2
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  subscriptionReference: BKG001
                  data:
                    bookingStatus: CONFIRMED
                    amendedBookingStatus: AMENDMENT DECLINED
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                    carrierBookingReference: ABC709951
                    reason: Declined because of no equipment availability
      responses:
        '204':
          description: |
            No Content
          headers:
            API-Version:
              description: >
                [SemVer](https://semver.org/) used to indicate the version of
                the consumer (the responding party). This is optional to
                provide.
              schema:
                type: string
                example: 2.0.0-Beta-2
      servers:
        - url: 'http://localhost:3000'
components:
  schemas:
    BookingNotification:
      type: object
      title: Booking Notification
      description: |
        `CloudEvent` specific properties for the `Notification`.
      properties:
        specversion:
          type: string
          description: >
            The version of the CloudEvents specification which the event uses.
            This enables the interpretation of the context. Compliant event
            producers MUST use a value of `1.0` when referring to this version
            of the specification.


            Currently, this attribute will only have the 'major' and 'minor'
            version numbers included in it. This allows for 'patch' changes to
            the specification to be made without changing this property's value
            in the serialization. Note: for 'release candidate' releases a
            suffix might be used for testing purposes.
          enum:
            - '1.0'
          example: '1.0'
        id:
          type: string
          maxLength: 100
          description: >
            Identifies the event. Producers MUST ensure that `source` + `id` is
            unique for each distinct event. If a duplicate event is re-sent
            (e.g. due to a network error) it MAY have the same `id`. Consumers
            MAY assume that Events with identical `source` and `id` are
            duplicates.
          example: 3cecb101-7a1a-43a4-9d62-e88a131651e2
        source:
          type: string
          maxLength: 4096
          description: >
            Identifies the context in which an event happened. Often this will
            include information such as the type of the event source, the
            organization publishing the event or the process that produced the
            event. The exact syntax and semantics behind the data encoded in the
            URI is defined by the event producer.


            Producers MUST ensure that `source` + `id` is unique for each
            distinct event.


            An application MAY assign a unique `source` to each distinct
            producer, which makes it easy to produce unique IDs since no other
            producer will have the same source. The application MAY use UUIDs,
            URNs, DNS authorities or an application-specific scheme to create
            unique `source` identifiers.


            A source MAY include more than one producer. In that case the
            producers MUST collaborate to ensure that `source` + `id` is unique
            for each distinct event.
          example: 'https://member.com/'
        type:
          type: string
          description: >
            This attribute contains a value describing the type of event related
            to the originating occurrence. Often this attribute is used for
            routing, observability, policy enforcement, etc. The format of this
            is producer defined and might include information such as the
            version of the type - see [Versioning of CloudEvents in the
            Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents)
            for more information.
          enum:
            - org.dcsa.booking-notification.v2
          example: org.dcsa.booking-notification.v2
        time:
          type: string
          format: date-time
          description: >
            Timestamp of when the occurrence happened. If the time of the
            occurrence cannot be determined then this attribute MAY be set to
            some other time (such as the current time) by the CloudEvents
            producer, however all producers for the same `source` MUST be
            consistent in this respect. In other words, either they all use the
            actual time of the occurrence or they all use the same algorithm to
            determine the value used.
          example: '2018-04-05T17:31:00Z'
        datacontenttype:
          type: string
          description: >
            Content type of `data` value. This attribute enables `data` to carry
            any type of content, whereby format and encoding might differ from
            that of the chosen event format. For example, an event rendered
            using the [JSON envelope](formats/json-format.md#3-envelope) format
            might carry an XML payload in `data`, and the consumer is informed
            by this attribute being set to "application/xml". The rules for how
            `data` content is rendered for different `datacontenttype` values
            are defined in the event format specifications; for example, the
            JSON event format defines the relationship in [section
            3.1](formats/json-format.md#31-handling-of-data).


            For some binary mode protocol bindings, this field is directly
            mapped to the respective protocol's content-type metadata property.
            Normative rules for the binary mode and the content-type metadata
            mapping can be found in the respective protocol.


            In some event formats the `datacontenttype` attribute MAY be
            omitted. For example, if a JSON format event has no
            `datacontenttype` attribute, then it is implied that the `data` is a
            JSON value conforming to the "application/json" media type. In other
            words: a JSON-format event with no `datacontenttype` is exactly
            equivalent to one with `datacontenttype="application/json"`.


            When translating an event message with no `datacontenttype`
            attribute to a different format or protocol binding, the target
            `datacontenttype` SHOULD be set explicitly to the implied
            `datacontenttype` of the source.
          enum:
            - application/json
          example: application/json
        subscriptionReference:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 100
          description: >
            The reference of the subscription that has triggered this event
          example: '30675492-50ff-4e17-a7df-7a487a8ad343'
        data:
          type: object
          description: |
            `Booking` specific properties for the `Notification`
          properties:
            bookingStatus:
              type: string
              maxLength: 50
              description: >
                The status of the `Booking`. Possible values are:

                - `RECEIVED` (Booking request has been received)

                - `PENDING UPDATE` (An update is required to the Booking)

                - `UPDATE RECEIVED` (An update has been received and is awaiting
                to be processed)

                - `CONFIRMED` (Booking has been Confirmed)

                - `PENDING AMENDMENT` (An amendment is required to the Booking)

                - `REJECTED` (Booking discontinued by carrier before it has been
                Confirmed)

                - `DECLINED` (Booking discontinued by carrier after it has been
                Confirmed)

                - `CANCELLED` (Booking discontinued by consumer)

                - `COMPLETED` (The Transport Document this Booking is connected
                to has been Surrendered for Delivery)


                More details can be found on
                [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/bookingstatuses.csv).
              example: RECEIVED
            amendedBookingStatus:
              type: string
              maxLength: 50
              description: >
                The status of latest amendment added to the `Booking`. If no
                amendment has been requested - then this property is empty.
                Possible values are:

                - `AMENDMENT RECEIVED` (An amendment has been received and is
                awaiting to be processed)

                - `AMENDMENT CONFIRMED` (Amendment is confirmed)

                - `AMENDMENT DECLINED` (Amendment discontinued by provider)

                - `AMENDMENT CANCELLED` (Amendment discontinued by consumer)


                More details can be found on
                [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/bookingstatuses.csv).
              example: AMENDMENT RECEIVED
            carrierBookingRequestReference:
              type: string
              pattern: ^\S+(\s+\S+)*$
              maxLength: 100
              description: >
                A reference to the booking during the booking request phase.


                **Conditional:** `carrierBookingRequestReference` and/or
                `carrierBookingReference` is required to provide
              example: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
            carrierBookingReference:
              type: string
              pattern: ^\S+(\s+\S+)*$
              maxLength: 35
              description: >
                The `carrierBookingReference` if know. Often this will not be
                known until the booking has been confirmed. Is available during
                a booking amendment.


                **Conditional:** `carrierBookingRequestReference` and/or
                `carrierBookingReference` is required to provide
              example: ABC709951
            reason:
              type: string
              maxLength: 5000
              description: |
                This property can be used to explain `bookingStatus`.
              example: Rejected because of strike...
          required:
            - bookingStatus
      required:
        - specversion
        - id
        - source
        - type
        - time
        - datacontenttype
        - data
