openapi: 3.0.3
info:
  version: 1.0.0-Beta-1
  title: DCSA OpenAPI specification for Arrival Notice Notifications
  description: |
    API specification issued by DCSA.org.

    Arrival Notice Notifications for [DCSA OpenAPI specification for Arrival Notice](https://app.swaggerhub.com/apis/dcsaorg/DCSA_AN/1.0.0-Beta-1) is a lightweight notification based on [CloudEvents](https://cloudevents.io/). The `POST` endPoint of the consumer is called whenever an `Arrival Notice` that is being subscribed to is created.

    Subscribing to notification is done outside scope of this API.

    ### Stats API
    The Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to this API. Further details can be found [here](https://labs.dcsa.org/#/http/guides/api-guides/stats-api/introduction)

    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/an/v1/notification#v100B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: 'https://dcsa.org'
    email: info@dcsa.org
tags:
  - name: Notifications
    description: Notification operations
servers:
  - url: 'http://localhost:9000'
paths:
  /v1/arrival-notice-notifications:
    post:
      tags:
        - Notifications
      summary: Send a new Arrival Notice Notification
      operationId: arrival-notice-notifications
      description: |
        Creates a new [`Arrival Notice Notification`](#/ArrivalNoticeNotification). This endPoint is called whenever an `Arrival Notice` that a cosumer has subscribed to is created.
      parameters:
        - name: API-Version
          in: header
          description: |
            An API-Version header **MUST** be provided to the request (mandatory). The header **MUST** be a [SemVer](https://semver.org/) specifying the provider (the calling party) API version.
          required: true
          schema:
            type: string
            example: 1.0.0-Beta-1
      requestBody:
        description: |
          The payload used to create an [`Arrival Notice Notification`](#/ArrivalNoticeNotification)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArrivalNoticeNotification'
            examples:
              notifyExample:
                summary: |
                  Arrival Notice received
                description: |
                  A notification explaining that an `Arrival Notice` has been created in provider system.
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.arrival-notice-notification.v1
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  subscriptionReference: AN001
                  data:
                    transportDocumentReference: HHL123
                    portOfDischarge:
                      locationType: UNLO
                      UNLocationCode: DEHAM
                    etaAtPortOfDischargeDate: '2024-07-01'
              notifyExample2:
                summary: |
                  Arrival Notice received going to Hannover as Place of Delivery
                description: |
                  A notification explaining that an `Arrival Notice` has been created in provider system. This `Arrival Notice` also has `Place of Delivery` information.
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.arrival-notice-notification.v1
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  subscriptionReference: AN001
                  data:
                    transportDocumentReference: HHL123
                    portOfDischarge:
                      locationType: UNLO
                      UNLocationCode: DEHAM
                    etaAtPortOfDischargeDate: '2024-07-01'
                    placeOfDelivery:
                      locationType: UNLO
                      UNLocationCode: DEHAJ
                    etaAtPlaceOfDeliveryDate: '2024-07-01'
      responses:
        '204':
          description: |
            No Content
          headers:
            API-Version:
              description: |
                [SemVer](https://semver.org/) used to indicate the version of the consumer (the responding party). This is optional to provide.
              schema:
                type: string
                example: 1.0.0-Beta-1
      servers:
        - url: 'http://localhost:3000'
components:
  schemas:
    ArrivalNoticeNotification:
      type: object
      title: Arrival Notice Notification
      description: |
        `CloudEvent` specific properties for the `Notification`.
      properties:
        specversion:
          type: string
          description: |
            The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.

            Currently, this attribute will only have the 'major' and 'minor' version numbers included in it. This allows for 'patch' changes to the specification to be made without changing this property's value in the serialization. Note: for 'release candidate' releases a suffix might be used for testing purposes.
          enum:
            - '1.0'
          example: '1.0'
        id:
          type: string
          maxLength: 100
          description: |
            Identifies the event. Producers MUST ensure that `source` + `id` is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same `id`. Consumers MAY assume that Events with identical `source` and `id` are duplicates.
          example: 3cecb101-7a1a-43a4-9d62-e88a131651e2
        source:
          type: string
          maxLength: 4096
          description: |
            Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.

            Producers MUST ensure that `source` + `id` is unique for each distinct event.

            An application MAY assign a unique `source` to each distinct producer, which makes it easy to produce unique IDs since no other producer will have the same source. The application MAY use UUIDs, URNs, DNS authorities or an application-specific scheme to create unique `source` identifiers.

            A source MAY include more than one producer. In that case the producers MUST collaborate to ensure that `source` + `id` is unique for each distinct event.
          example: 'https://member.com/'
        type:
          type: string
          description: |
            This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type - see [Versioning of CloudEvents in the Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents) for more information.
          enum:
            - org.dcsa.arrival-notice-notification.v1
          example: org.dcsa.arrival-notice-notification.v1
        time:
          type: string
          format: date-time
          description: |
            Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same `source` MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.
          example: '2018-04-05T17:31:00Z'
        datacontenttype:
          type: string
          description: |
            Content type of `data` value. This attribute enables `data` to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, an event rendered using the [JSON envelope](formats/json-format.md#3-envelope) format might carry an XML payload in `data`, and the consumer is informed by this attribute being set to "application/xml". The rules for how `data` content is rendered for different `datacontenttype` values are defined in the event format specifications; for example, the JSON event format defines the relationship in [section 3.1](formats/json-format.md#31-handling-of-data).

            For some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol.

            In some event formats the `datacontenttype` attribute MAY be omitted. For example, if a JSON format event has no `datacontenttype` attribute, then it is implied that the `data` is a JSON value conforming to the "application/json" media type. In other words: a JSON-format event with no `datacontenttype` is exactly equivalent to one with `datacontenttype="application/json"`.

            When translating an event message with no `datacontenttype` attribute to a different format or protocol binding, the target `datacontenttype` SHOULD be set explicitly to the implied `datacontenttype` of the source.
          enum:
            - application/json
          example: application/json
        subscriptionReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: >
            The reference of the subscription that has triggered this event
          example: '30675492-50ff-4e17-a7df-7a487a8ad343'
        data:
          type: object
          description: |
            `Arrival Notice` specific properties for the `Notification`
          properties:
            transportDocumentReference:
              type: string
              pattern: ^\S(?:.*\S)?$
              maxLength: 20
              description: |
                A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
              example: HHL71800000
            portOfDischarge:
              $ref: '#/components/schemas/PortOfDischarge'
            etaAtPortOfDischargeDate:
              type: string
              format: date
              description: |
                The expected date of arrival of the vessel at the `Port of Discharge`.
              example: '2024-04-22'
            placeOfDelivery:
              $ref: '#/components/schemas/PlaceOfDelivery'
            etaAtPlaceOfDeliveryDate:
              type: string
              format: date
              description: |
                The expected date of arrival of the shipment at `Place of Delivery`.

                **Condition:** Mandatory if provided as part of the `TransportDocument`
              example: '2024-04-22'
          required:
            - transportDocumentReference
            - portOfDischarge
            - etaAtPortOfDischargeDate
      required:
        - specversion
        - id
        - source
        - type
        - time
        - datacontenttype
        - subscriptionReference
        - data

    PortOfDischarge:
      title: Port of Discharge
      description: |
        General purpose object to capture `Port of Discharge` location specified as: the location where the cargo is discharged from the last sea-going vessel.

        The location can be specified in **one** of the following ways: `UN Location Code` or `City and Country`.
      example:
        locationName: Hamburg
        locationType: UNLO
        UNLocationCode: DEHAM
      oneOf:
        - $ref: '#/components/schemas/CityLocation'
        - $ref: '#/components/schemas/UNLocationLocation'
      discriminator:
        propertyName: locationType
        mapping:
          CITY: '#/components/schemas/CityLocation'
          UNLO: '#/components/schemas/UNLocationLocation'
    PlaceOfDelivery:
      title: Place of Delivery
      description: |
        General purpose object to capture `Place of Delivery` location specified as: the location where the cargo is handed over to the consignee, or his agent, by the shipping line and where responsibility of the shipping line ceases.

        **Condition:** Mandatory if provided as part of the `TransportDocument`

        The location can be specified in **one** of the following ways: `UN Location Code`, `Facility` or an `Address`.
      example:
        locationName: Hamburg
        locationType: UNLO
        UNLocationCode: DEHAM
      oneOf:
        - $ref: '#/components/schemas/AddressLocation'
        - $ref: '#/components/schemas/FacilityLocation'
        - $ref: '#/components/schemas/UNLocationLocation'
      discriminator:
        propertyName: locationType
        mapping:
          ADDR: '#/components/schemas/AddressLocation'
          FACI: '#/components/schemas/FacilityLocation'
          UNLO: '#/components/schemas/UNLocationLocation'

    ############################
    # Address Location Interface
    ############################
    AddressLocation:
      title: Address Location
      type: object
      description: An interface used to express a location using an `Address` object.
      properties:
        locationName:
          type: string
          description: The name of the location.
          example: Port of Amsterdam
          maxLength: 100
        locationType:
          type: string
          maxLength: 4
          description: Discriminator used to identify this as an `Address` location interface.
          example: ADDR
        address:
          $ref: '#/components/schemas/Address'
      required:
        - locationType
        - address
    Address:
      type: object
      title: Address
      description: |
        An object for storing address related information
      properties:
        street:
          type: string
          maxLength: 100
          description: The name of the street of the party’s address.
          example: Ruijggoordweg
        streetNumber:
          type: string
          maxLength: 50
          description: The number of the street of the party’s address.
          example: '100'
        floor:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The floor of the party’s street number.
          example: N/A
        postCode:
          type: string
          maxLength: 10
          description: The post code of the party’s address.
          example: 1047 HM
        city:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 65
          description: |
            The city name of the party’s address.
          example: Amsterdam
        stateRegion:
          type: string
          maxLength: 65
          description: The state/region of the party’s address.
          nullable: true
          example: North Holland
        countryCode:
          type: string
          pattern: ^[A-Z]{2}$
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: NL

    #########################
    # City Location Interface
    #########################
    CityLocation:
      type: object
      title: City Location
      description: |
        An interface used to express a location using a `City`, `state/region` and `country`
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        locationType:
          type: string
          description: |
            Discriminator used to identify this as a `City Location` interface
          example: CITY
        city:
          type: object
          description: |
            An object for storing city, state/region and coutry related information
          properties:
            city:
              type: string
              pattern: ^\S(?:.*\S)?$
              maxLength: 65
              description: |
                The city name of the party’s address.
              example: Amsterdam
            stateRegion:
              type: string
              maxLength: 65
              description: |
                The state/region of the party’s address.
              nullable: true
              example: North Holland
            countryCode:
              type: string
              pattern: ^[A-Z]{2}$
              minLength: 2
              maxLength: 2
              description: |
                The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
              example: NL
          required:
            - city
            - country
      required:
        - locationType
        - city

    #############################
    # Facility Location Interface
    #############################
    FacilityLocation:
      type: object
      title: Facility Location
      description: |
        An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        locationType:
          type: string
          maxLength: 4
          description: |
            Discriminator used to identify this as a `Facility Location` interface
          example: FACI
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          example: NLAMS
          description: |-
            The UN Location code specifying where the place is located. The pattern used must be
            
            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
            
            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
            
            This field is **conditionally mandatory** depending on the value of the `facilityCodeListProvider` field.
        facilityCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 6
          description: |-
            The code used for identifying the specific facility. This code does not include the UN Location Code.
            The definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:
            - for `SMDG` - the codeList used is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)  - for `BIC` - the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/)
          nullable: false
          example: ADT
        facilityCodeListProvider:
          type: string
          description: |
            The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`
            - `BIC` (Requires a UN Location Code) - `SMDG` (Requires a UN Location Code)
          enum:
            - BIC
            - SMDG
          example: SMDG
      required:
        - locationType
        - facilityCode
        - facilityCodeListProvider

    ###############################
    # UNLocation Location Interface
    ###############################
    UNLocationLocation:
      title: UNLocation Location
      type: object
      description: An interface used to express a location using a `Un Location Code`.
      additionalProperties: false
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        locationType:
          type: string
          maxLength: 4
          description: Discriminator used to identify this as a `UNLocation` location interface.
          example: UNLO
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          example: NLAMS
          description: |-
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
      required:
        - locationType
        - UNLocationCode
