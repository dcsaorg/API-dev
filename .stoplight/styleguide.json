{
  "name": "DCSA-OpenAPI",
  "description": "",
  "spectralExtends": [],
  "extends": [],
  "formats": [
    "oas2",
    "oas3",
    "oas3.0",
    "oas3.1"
  ],
  "aliases": {
    "DCSA_CarrierBookingReference": {
      "id": "zRA26KnnN84i1UTFmgPUH",
      "description": "Matching all `carrierBookingReference`",
      "name": "DCSA_CarrierBookingReference",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas..carrierBookingReference"
        }
      ]
    },
    "DCSA_EquipmentReference": {
      "id": "yQMpuqzgEBvr-SRsXhmoz",
      "description": "Matching all `equipmentReference`",
      "name": "DCSA_EquipmentReference",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas..equipmentReference"
        }
      ]
    },
    "DCSA_Weight": {
      "id": "0env3umt4HdP-z6VKh3mM",
      "description": "Matching all `weight`",
      "name": "DCSA_Weight",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas..weight"
        }
      ]
    },
    "DCSA_WeightUnit": {
      "id": "7quFNH8eevkKEThM73X4g",
      "description": "Matching all `weightUnit`",
      "name": "DCSA_WeightUnit",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas..weightUnit"
        }
      ]
    },
    "All_Objects": {
      "id": "8DUgKT8NVg1hRxNY398JB",
      "description": "Matching everything that has a `type` which **IS** an `object`",
      "name": "All_Objects",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas..[?(@.type && @.type === 'object')]"
        }
      ]
    },
    "All_ObjectsWithTitle": {
      "id": "M0oUVeJuFxn00D0mnwCDE",
      "description": "Matching all `objects` defined with a `title` property",
      "name": "All_ObjectsWithTitle",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas..[?(@.type === 'object' && @.title)]"
        }
      ]
    },
    "All_NonObjects": {
      "id": "uUC23CwhIBHSIGtRaY5x6",
      "description": "Matching everything that has a `type` which is **NOT** an `object`",
      "name": "All_NonObjects",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas..properties.*"
        }
      ]
    },
    "DCSA_Volume": {
      "id": "DBhiX8xP6YSmzP2ZP2GL6",
      "description": "Matching all `volume`",
      "name": "DCSA_Volume",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas..volume"
        }
      ]
    },
    "All_StringTypes": {
      "id": "pYB-_9pV_buTE57-8RmXQ",
      "description": "Matching all `string` types",
      "name": "All_StringTypes",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas..[?(@.type === 'string')]"
        }
      ]
    },
    "DCSA_VolumeUnit": {
      "id": "bCfPzSHwgFPjHpaM9bY0l",
      "description": "Matching all `volumeUnit`",
      "name": "DCSA_VolumeUnit",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas..volumeUnit"
        }
      ]
    }
  },
  "rules": {
    "simpleType-validation-EquipmentReference": {
      "id": "C-kCTrX8UL3xsP3NSxQZN",
      "given": [
        "#DCSA_EquipmentReference"
      ],
      "severity": "error",
      "then": [
        {
          "function": "equals",
          "functionOptions": {
            "value": 11
          },
          "field": "maxLength"
        },
        {
          "function": "equals",
          "functionOptions": {
            "value": "string"
          },
          "field": "type"
        },
        {
          "function": "noRefInSimpleType"
        }
      ],
      "name": "simpleType-validation-EquipmentReference",
      "description": "The `equipmentReference` **MUST** be:\r\n* type: `string`\r\n* maxLength: `11`\r\n* cannot be defined using a $ref",
      "message": "{{error}}"
    },
    "simpleType-validation-Weight": {
      "id": "ndnY3xO3aXLqzs7ZIK9yG",
      "given": [
        "#DCSA_Weight"
      ],
      "severity": "error",
      "then": [
        {
          "function": "truthy",
          "field": "exclusiveMinimum"
        },
        {
          "function": "equals",
          "functionOptions": {
            "value": "float"
          },
          "field": "format"
        },
        {
          "function": "equals",
          "functionOptions": {
            "value": "number"
          },
          "field": "type"
        },
        {
          "function": "equals",
          "functionOptions": {
            "value": 0
          },
          "field": "minimum"
        },
        {
          "function": "noRefInSimpleType"
        }
      ],
      "name": "simpleType-validation-Weight",
      "description": "The `weight` **MUST** have:\r\n* type: `number`\r\n* format: `float`\r\n* minimum: `0`\r\n* exclusiveMinimum: `true`\r\n* cannot be defined using a $ref",
      "message": "{{error}}"
    },
    "objectType-validation-objects-should-have-title-property": {
      "id": "n-b4uMqW1zZVHvmCCcYgT",
      "given": [
        "#All_Objects"
      ],
      "severity": "warn",
      "then": {
        "function": "defined",
        "field": "title"
      },
      "name": "objectType-validation-objects-should-have-title-property",
      "message": "{{property}} is missing"
    },
    "objectType-validation-title-property-must-use-TitleCaseText": {
      "id": "L5Y9rK-hOY69V_5P_YeVb",
      "given": [
        "#All_ObjectsWithTitle"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^[A-Z][a-z]+( +[A-Z][a-z]+)*$"
        },
        "field": "title"
      },
      "name": "objectType-validation-title-property-must-use-TitleCaseText",
      "message": "Title must match \"Title Case Text\""
    },
    "simpleType-validation-Volume": {
      "id": "y4UY016ap-ciXDIxbv15L",
      "given": [
        "#DCSA_Volume"
      ],
      "severity": "error",
      "then": [
        {
          "function": "equals",
          "functionOptions": {
            "value": "number"
          },
          "field": "type"
        },
        {
          "function": "equals",
          "functionOptions": {
            "value": "float"
          },
          "field": "format"
        },
        {
          "function": "truthy",
          "field": "exclusiveMinimum"
        },
        {
          "function": "equals",
          "functionOptions": {
            "value": 0
          },
          "field": "minimum"
        },
        {
          "function": "noRefInSimpleType"
        }
      ],
      "name": "simpleType-validation-Volume",
      "description": "The `volume` **MUST** be:\r\n* type: `number`\r\n* format: `float`\r\n* minimum: `0`\r\n* exclusiveMinimum: `true`\r\n* cannot be defined using a $ref",
      "message": "{{error}}",
      "resolved": true
    },
    "simpleType-validation-WeightUnit": {
      "id": "pCutQqFgMBRTAv8d2O1h3",
      "given": [
        "#DCSA_WeightUnit"
      ],
      "severity": "error",
      "then": [
        {
          "function": "equals",
          "functionOptions": {
            "value": "string"
          },
          "field": "type"
        },
        {
          "function": "noRefInSimpleType"
        }
      ],
      "name": "simpleType-validation-WeightUnit",
      "description": "The `weightUnit` **MUST** have:\r\n* type: `string`\r\n* cannot be defined using a $ref",
      "message": "{{error}}"
    },
    "simpleType-validation-string-type-must-have-example": {
      "id": "_1tBPMDm-HNc5pPv8WSDJ",
      "given": [
        "#All_StringTypes"
      ],
      "severity": "error",
      "then": {
        "function": "defined",
        "field": "example"
      },
      "name": "simpleType-validation-string-type-must-have-example",
      "description": "SimpleTypes of type: `string` **MUST** have an `example`",
      "message": "SimpleTypes of type: `string` must have an example"
    },
    "simpleType-validation-VolumeUnit": {
      "id": "LHmNw_GI_08gePpiZ9oyr",
      "given": [
        "#DCSA_VolumeUnit"
      ],
      "severity": "error",
      "then": [
        {
          "function": "equals",
          "functionOptions": {
            "value": "string"
          },
          "field": "type"
        },
        {
          "function": "noRefInSimpleType"
        }
      ],
      "name": "simpleType-validation-VolumeUnit",
      "description": "The `volumeUnit` **MUST** have:\r\n* type: `string`\r\n* cannot be defined using a $ref",
      "message": "{{error}}"
    },
    "simpleType-validation-CarrierBookingReference": {
      "id": "htCZy4KSORquX_Y5aGdGa",
      "given": [
        "#DCSA_CarrierBookingReference"
      ],
      "severity": "error",
      "then": [
        {
          "function": "equals",
          "functionOptions": {
            "value": "string"
          },
          "field": "type"
        },
        {
          "function": "equals",
          "functionOptions": {
            "value": 35
          },
          "field": "maxLength"
        },
        {
          "function": "equals",
          "functionOptions": {
            "value": "^\\S+(\\s+\\S+)*$"
          },
          "field": "pattern"
        },
        {
          "function": "noRefInSimpleType"
        }
      ],
      "name": "simpleType-validation-CarrierBookingReference",
      "description": "The `carrierBookingReference` **MUST** be:\r\n* type: `string`\r\n* pattern: `^\\S+(\\s+\\S+)*$`\r\n* maxLength: `35`\r\n* cannot be defined using a $ref",
      "message": "{{error}}"
    },
    "simpleType-validation-check-property-name": {
      "id": "oDkHDq2HP_ttAkoZqYtOH",
      "given": [
        "#All_NonObjects"
      ],
      "severity": "warn",
      "then": {
        "function": "supportedProperty"
      },
      "name": "simpleType-validation-check-property-name",
      "message": "{{error}}",
      "resolved": false
    }
  },
  "x-embeddedFunctions": [
    {
      "id": "Y9n6wjWj_-QxlX7wxuZff",
      "extendedFrom": "",
      "name": "noRefInSimpleType",
      "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\n\nexport default createRulesetFunction(\n  {\n    input: null,\n    options: null,\n  },\n  // https://github.com/stoplightio/spectral/blob/develop/docs/guides/5-custom-functions.md#writing-functions\n  function noRefInSimpleType(input, options, context) {\n    if (Object.keys(input).length === 1 && input['$ref']) {\n      const propertyName = context.path[[context.path.length - 1]];\n      return [\n        {\n          message: propertyName + `: MUST not be defined using a $ref.`,\n        },\n      ];\n    }\n  }\n);"
    },
    {
      "id": "SaCdkhp-SlvEX5829USLQ",
      "extendedFrom": "",
      "name": "equals",
      "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\n\nexport default createRulesetFunction(\n  {\n    input: null,\n    options: {\n      type: \"object\",\n      additionalProperties: false,\n      required: [\"value\"],\n\n      properties: {\n        value: {\n          type: [\"string\", \"integer\"]\n        }\n      }\n    },\n  },\n  // https://github.com/stoplightio/spectral/blob/develop/docs/guides/5-custom-functions.md#writing-functions\n  function equals(input, options, context) {\n    const { value } = options;\n\n    const propertyName = context.path[[context.path.length - 2]];\n    const propertyProperty = context.path[[context.path.length - 1]];\n    if (input !== undefined) {\n      if (input !== value) {\n      return [\n        {\n          message: propertyName + `.` + propertyProperty + `: value must equal \"${value}\", value provided: \"${input}\".`,\n        },\n      ];\n      }\n    } else {\n      return [\n        {\n          message: propertyName + `.` + propertyProperty + `: value must equal \"${value}\" no value provided!`,\n        },\n      ];\n    }\n  },\n);"
    },
    {
      "id": "J_p5CUWnEQ6qQMWZZuy4Z",
      "extendedFrom": "",
      "name": "supportedProperty",
      "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\n\n// List of accepted properties for all standards\nconst DCSA_PROPERTIES = {\n  bookingStatus: {propertyRequirements: {type: 'string', maxLength: 50} },\n  amendedBookingStatus: {propertyRequirements: {type: 'string', maxLength: 50} },\n  carrierBookingReference: {propertyRequirements: {type: 'string', maxLength: 35, pattern: \"^\\\\S+(\\\\s+\\\\S+)*$\"} },\n  carrierBookingRequestReference: {propertyRequirements: {type: 'string', maxLength: 100, pattern: \"^\\\\S+(\\\\s+\\\\S+)*$\"} },\n  reason: {propertyRequirements: {type: 'string', maxLength: 5000} },\n\n  // Notification - CloudEvent\n  specversion: {propertyRequirements: {type: 'string', enum: ['1.0']}, parents: {ShippingInstructionsNotification: {},TransportDocumentNotification: {}, BookingNotification: {} } },\n  id: {propertyRequirements: {type: 'string', maxLength: 100}, parents: {ShippingInstructionsNotification: {},TransportDocumentNotification: {}, BookingNotification: {} } },\n  source: {propertyRequirements: {type: 'string', maxLength: 4096}, parents: {ShippingInstructionsNotification: {},TransportDocumentNotification: {}, BookingNotification: {} } },\n  type: {propertyRequirements: {type: 'string'}, parents: {BookingNotification: {enum: ['org.dcsa.booking-notification.v2']},TransportDocumentNotification: {enum: ['org.dcsa.transport-document-notification.v3']}, ShippingInstructionsNotification: {enum: ['org.dcsa.shipping-instructions-notification.v3']} } },\n  time: {propertyRequirements: {type: 'string', format: 'date-time'}, parents: {ShippingInstructionsNotification: {},TransportDocumentNotification: {}, BookingNotification: {} } },\n  datacontenttype: {propertyRequirements: {type: 'string', enum: ['application/json']}, parents: {ShippingInstructionsNotification: {},TransportDocumentNotification: {}, BookingNotification: {} } },\n  data: {propertyRequirements: {type: 'object'}, parents: {ShippingInstructionsNotification: {},TransportDocumentNotification: {}, BookingNotification: {} } },\n\n  // Testing the name property of vessel...\n  name: {propertyRequirements: {type: 'string'}, parents: {vessel: {} }},\n};\n\n//Booking\nconst BKG_API_100 = '1.0.0' + '|' + 'DCSA OpenAPI specification for Booking';\n//EBL\nconst EBL_API_100 = '1.0.0' + '|' + 'DCSA OpenAPI specification for Electronic Bill of Lading';\nconst EBL_API_200 = '2.0.0' + '|' + 'DCSA OpenAPI specification for Electronic Bill of Lading';\n//JIT\nconst JIT_API_120B1 = '1.2.0-Beta-1' + '|' + 'DCSA OpenAPI specification for Just in Time Portcalls';\nconst JIT_API_120B2 = '1.2.0-Beta-2' + '|' + 'DCSA OpenAPI specification for Just in Time Portcalls';\n//TNT\nconst TNT_API_220 = '2.2.0' + '|' + 'DCSA OpenAPI specification for Track & Trace';\n\n// A list of properties that have changed over time or are different for different standards\nconst DCSA_ADVANCED_PROPERTIES = {\n  equipmentReference: {\n    JIT_API_120B1: {propertyRequirements: {type: 'string', maxLength: 15}, parents: {} },\n    JIT_API_120B2: {propertyRequirements: {type: 'string', maxLength: 15}, parents: {} },\n    DEFAULT: {propertyRequirements: {type: 'string', maxLength: 11}, parents: {} }\n  },\n};\n\nfunction arraysEqual(a, b) {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length !== b.length) return false;\n\n  for (var i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\nfunction checkPropertyRequirements(input, propertyName, propertyRequirements, results) {\n  // Run through all required properties\n  for (const propertyKey of Object.keys(propertyRequirements)) {\n    // Test if the property exists on the input element\n    if (input[propertyKey]) {\n      // Checking enum as it needs to be treated specially\n      if (propertyKey === 'enum') {\n        // Check that enum values match (= are specified the same way...)\n        const enumValuesRequired = propertyRequirements[propertyKey];\n        const enumValues = input[propertyKey];\n        if (!arraysEqual(enumValues, enumValuesRequired)) {\n          // The two enum lists do not match - file an error\n          results.push( { message: propertyName + `.` + propertyKey + ` value must equal: [` + enumValuesRequired + `], value provided: [` + enumValues + `]`, }, );\n        }\n      // Checking a specific property\n      } else if (propertyRequirements[propertyKey] !== input[propertyKey]) {\n        // The value does not match - file an error\n        results.push( { message: propertyName + `.` + propertyKey + ` value must equal: ` + propertyRequirements[propertyKey] + `, value provided: ` + input[propertyKey], }, );\n      }\n    } else {\n      // The property is missing - file an error\n      results.push( { message: propertyName + `.` + propertyKey + ` value must equal: ` + propertyRequirements[propertyKey] + ` but nothing was provided.`, }, );\n    }\n  }\n}\n\nexport default createRulesetFunction(\n  {\n    input: null,\n    options: null,\n  },\n  function supportedProperty(input, options, context) {\n    const propertyName = context.path[[context.path.length - 1]];\n    \n    let property = DCSA_PROPERTIES[propertyName];\n    if (property) {\n      // No DCSA properties can be defined using a $ref\n      if (Object.keys(input).length === 1 && input['$ref']) {\n        return [ { message: propertyName + ` MUST not be defined using a $ref`, }, ];\n      }\n      \n      // Gather all errors in results\n      const results = [];\n\n      // Test if there are any parent property requirements\n      let parents = property['parents'];\n      if (parents && Object.keys(parents).length > 0) {\n        const currentParent = context.path[[context.path.length - 3]];\n        const currentParentPropertyRequirements = parents[currentParent];\n        if (currentParentPropertyRequirements) {\n          // Check parent propertyRequirements\n          checkPropertyRequirements(input, propertyName, currentParentPropertyRequirements, results);\n        } else {\n          // The property MUST exist below one of the specified parents - if located elsewhere it is an error\n          return [ { message: propertyName + ` is only allowed under one of these parents: [` + Object.keys(parents) + `]`, }, ];\n        }\n      }\n\n      // Test for property requirements applicable to all locations\n      let propertyRequirements = property['propertyRequirements'];\n      checkPropertyRequirements(input, propertyName, propertyRequirements, results);\n\n      // Only return a list if it contains something - StopLight requirement\n      if (results.length > 0) {\n        return results;\n      }\n    } else {\n      // propertyName is not part of DCSA_PROPERTIES --> try it in the DCSA_ADVANCED_PROPERTIES\n      property = DCSA_ADVANCED_PROPERTIES[propertyName];\n      if (property) {\n        // TODO:...\n      } else {\n        // propertyName is not part of neither DCSA_PROPERTIES nor DCSA_ADVANCED_PROPERTIES\n        return [ { message: propertyName + ` is not in the list of DCSA approved property names`, }, ];\n      }\n    }\n  }\n);"
    }
  ],
  "extendedDefault": false
}