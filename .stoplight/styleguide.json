{
  "name": "DCSA-OpenAPI",
  "description": "",
  "spectralExtends": [],
  "extends": [],
  "formats": [
    "oas2",
    "oas3",
    "oas3.0",
    "oas3.1"
  ],
  "aliases": {
    "DCSA_NonObjects": {
      "id": "wf_LHod3Y0nLDIuQp-ZaV",
      "description": "Matching all `DCSA` recognized simpleTypes",
      "name": "DCSA_NonObjects",
      "targets": [
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas.*"
        },
        {
          "formats": [
            "oas3"
          ],
          "given": "$.components.schemas..properties.*"
        }
      ]
    }
  },
  "rules": {
    "simpleType-validation-check-DCSA-compatibility": {
      "id": "NcwDDKQv7GMS6sOLgRGBu",
      "given": [
        "#DCSA_NonObjects"
      ],
      "severity": "error",
      "then": {
        "function": "checkRequirements"
      },
      "name": "simpleType-validation-check-DCSA-compatibility",
      "description": "Check DCSA allowed properties",
      "message": "{{error}}",
      "resolved": false
    }
  },
  "x-embeddedFunctions": [
    {
      "id": "g2DJi6h7xrIe-ljcGXDj6",
      "extendedFrom": "",
      "name": "equals",
      "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\n\nexport default createRulesetFunction(\n  {\n    input: null,\n    options: {\n      type: \"object\",\n      additionalProperties: false,\n      required: [\"value\"],\n\n      properties: {\n        value: {\n          type: [\"string\", \"integer\"]\n        }\n      }\n    },\n  },\n  // https://github.com/stoplightio/spectral/blob/develop/docs/guides/5-custom-functions.md#writing-functions\n  function equals(input, options, context) {\n    const { value } = options;\n\n    const propertyName = context.path[[context.path.length - 2]];\n    const propertyProperty = context.path[[context.path.length - 1]];\n    if (input !== undefined) {\n      if (input !== value) {\n      return [\n        {\n          message: propertyName + `.` + propertyProperty + `: value must equal \"${value}\", value provided: \"${input}\".`,\n        },\n      ];\n      }\n    } else {\n      return [\n        {\n          message: propertyName + `.` + propertyProperty + `: value must equal \"${value}\" no value provided!`,\n        },\n      ];\n    }\n  },\n);"
    },
    {
      "id": "UPXI6GiG0IVwCQgFhjc4t",
      "extendedFrom": "",
      "name": "noRefInSimpleType",
      "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\n\nexport default createRulesetFunction(\n  {\n    input: null,\n    options: null,\n  },\n  // https://github.com/stoplightio/spectral/blob/develop/docs/guides/5-custom-functions.md#writing-functions\n  function noRefInSimpleType(input, options, context) {\n    if (Object.keys(input).length === 1 && input['$ref']) {\n      const propertyName = context.path[[context.path.length - 1]];\n      return [\n        {\n          message: propertyName + `: MUST not be defined using a $ref.`,\n        },\n      ];\n    }\n  }\n);"
    },
    {
      "id": "nfiSNHQHEHtWGvD7vgNLq",
      "extendedFrom": "",
      "name": "checkRequirements",
      "content": "import { createRulesetFunction } from '@stoplight/spectral-core';\n\n// List of attributes to be checked\n// For all attributes in ATTRIBUTES_TO_CHECK, this Spectral rule will make sure:\n// * if attribute is in the Spec - the attribute MUST also be in the requirements\n// * if attribute is in the requirements - then it also need to be in the Spec\nconst ATTRIBUTES_TO_CHECK= ['type', 'maxLength', 'pattern', 'enum', 'format', 'deprecated', 'discriminator', 'exclusiveMaximum', 'exclusiveMinimum', 'maximum', 'minimum', 'minItems', 'required', 'nullable', 'items'];\n\n// List of Objects that must follow the CloudEvent Notification pattern\nconst DCSA_CLOUDEVENT_GROUP = { ShippingInstructionsNotification: {},TransportDocumentNotification: {}, BookingNotification: {}, ArrivalNoticeNotification: {} };\n\n// List of accepted properties for all standards\n// If 'parent' is specified - then the spec only allows the property under the list of parents\n// If no 'parent' is specified - the spec applies to all locations in the document\nconst DCSA_PROPERTIES = {\n  amendedBookingStatus: {attributeRequirements: {type: 'string', maxLength: 50} }, //BKG NTF 2.0.0 Beta 1\n  bookingStatus: {attributeRequirements: {type: 'string', maxLength: 50} }, //BKG NTF 2.0.0 Beta 1\n  callSign: {attributeRequirements: {type: 'string', maxLength: 10} }, //JIT 1.2.0 Beta 1\n  carrierImportVoyageNumber: {attributeRequirements: {type: 'string', maxLength: 50}}, //JIT 1.1.0\n  codeListName: {attributeRequirements: {type: 'string', maxLength: 100}, parents: {identifyingCode: {} }}, //JIT 1.1.0\n  country: {attributeRequirements: {type: 'string', maxLength: 75}, parents: {address: {} }}, //JIT 1.1.0\n  delayReasonCode: {attributeRequirements: {type: 'string', maxLength: 3}}, //JIT 1.1.0\n  dimensionUnit: {attributeRequirements: {type: 'string', enum: ['MTR', 'FOT']}, parent: {vessel: {}}}, //JIT 1.2.0 Beta 1\n  draft: {attributeRequirements: {type: 'number', format: 'float'}, parent: {vessel: {}}}, //JIT 1.2.0 Beta 1\n  eventCreatedDateTime: {attributeRequirements: {type: 'string', format: 'date-time'}}, //JIT 1.1.0\n  eventDateTime: {attributeRequirements: {type: 'string', format: 'date-time'}}, //JIT 1.1.0\n  eventID: {attributeRequirements: {type: 'string', format: 'uuid'}}, //JIT 1.1.0\n  facilitySMDGCode: {attributeRequirements: {type: 'string', maxLength: 6}, parents: {timestamp: {nullable: false, deprecated: true} }}, //JIT 1.1.0\n  identifyingCodes: {attributeRequirements: {type: 'array'}, parents: {publisher: {}}}, //JIT 1.1.0\n  latitude: {attributeRequirements: {type: 'string', maxLength: 10}}, //JIT 1.1.0\n  lengthOverall: {attributeRequirements: {type: 'number', format: 'float'}}, //JIT 1.2.0 Beta 1\n  longitude: {attributeRequirements: {type: 'string', maxLength: 11}}, //JIT 1.1.0\n  milesToDestinationPort: {attributeRequirements: {type: 'number', format: 'float'}}, //JIT 1.1.0\n  partyCode: {attributeRequirements: {type: 'string', maxLength: 100}, parents: {identifyingCode: {} }}, //JIT 1.1.0\n  partyName: {attributeRequirements: {type: 'string', maxLength: 100} }, //JIT 1.1.0\n  portCallPhaseTypeCode: {attributeRequirements: {type: 'string', enum: ['INBD', 'ALGS', 'SHIF', 'OUTB']}}, //JIT 1.1.0\n  portCallServiceTypeCode: {attributeRequirements: {type: 'string', enum: ['PILO', 'MOOR', 'CRGO', 'TOWG', 'BUNK', 'WSDP', 'LASH', 'SAFE', 'FAST', 'GWAY']}}, //JIT 1.1.0\n  portVisitReference: {attributeRequirements: {type: 'string', maxLength: 50}}, //JIT 1.1.0\n  transportCall: {ref: true },\n\n\n  // Notification - CloudEvent\n  specversion: {attributeRequirements: {type: 'string', enum: ['1.0']}, parents: DCSA_CLOUDEVENT_GROUP },\n  id: {attributeRequirements: {type: 'string', maxLength: 100}, parents: DCSA_CLOUDEVENT_GROUP },\n  source: {attributeRequirements: {type: 'string', maxLength: 4096}, parents: DCSA_CLOUDEVENT_GROUP },\n  type: {attributeRequirements: {type: 'string'}, parents: {ArrivalNoticeNotification: {enum: ['org.dcsa.arrival-notice-notification.v1']}, BookingNotification: {enum: ['org.dcsa.booking-notification.v2']},TransportDocumentNotification: {enum: ['org.dcsa.transport-document-notification.v3']}, ShippingInstructionsNotification: {enum: ['org.dcsa.shipping-instructions-notification.v3']}, vessel: {enum: ['GCGO', 'CONT', 'RORO', 'CARC', 'PASS', 'FERY', 'BULK', 'TANK', 'LGTK', 'ASSI', 'PILO']} } },\n  time: {attributeRequirements: {type: 'string', format: 'date-time'}, parents: DCSA_CLOUDEVENT_GROUP },\n  datacontenttype: {attributeRequirements: {type: 'string', enum: ['application/json']}, parents: DCSA_CLOUDEVENT_GROUP },\n  subscriptionReference: {attributeRequirements: {type: 'string', pattern: '^\\\\S(?:.*\\\\S)?$', maxLength: 100}, parents: DCSA_CLOUDEVENT_GROUP },\n  data: {attributeRequirements: {type: 'object'}, parents: DCSA_CLOUDEVENT_GROUP },\n};\n\n// A list of properties that have changed over time or are different for different standards\nconst DCSA_ADVANCED_PROPERTIES = {\n  address: {\n    'DEFAULT'               : {ref: '#/components/schemas/Address', parents: {AddressLocation: {}}},\n  },\n  Address: {\n    'DEFAULT'               : {attributeRequirements: { type: 'object', title: 'Address'}, parents: {}},\n  },\n  AddressLocation: {\n    'DEFAULT'               : {attributeRequirements: { type: 'object', title: 'Address Location', required: ['locationType', 'address']}, parents: {}},\n  },\n  bookingChannelReference: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 20, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {}} },\n  },\n  cargoMovementTypeAtOrigin: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 3}, parents: {CreateBooking: {}} },\n  },\n  cargoMovementTypeAtDestination: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 3}, parents: {CreateBooking: {}} },\n  },\n  carrierBookingRequestReference: {\n    'BKG_NTF_v2.0.0-Beta-1.yaml': {attributeRequirements: {type: 'string', maxLength: 100, pattern: '^\\\\S+(\\\\s+\\\\S+)*$'} }, //BKG NTF 2.0.0 Beta 1\n    DEFAULT: {attributeRequirements: {type: 'string', maxLength: 100, pattern: '^\\\\S(?:.*\\\\S)?$'} },\n  },\n  carrierBookingReference: {\n    'BKG_NTF_v2.0.0-Beta-1.yaml': {attributeRequirements: {type: 'string', maxLength: 35, pattern: \"^\\\\S+(\\\\s+\\\\S+)*$\"} }, //BKG NTF 2.0.0 Beta 1\n    DEFAULT:                      {attributeRequirements: {type: 'string', maxLength: 35, pattern: '^\\\\S(?:.*\\\\S)?$'} }, //BKG NTF 2.0.0 Beta 1\n  },\n  carrierExportVoyageNumber: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 50}},\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 50, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {}} },\n  },\n  carrierServiceCode: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 5}},\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 11, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {}} },\n  },\n  carrierServiceName: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 50, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {}} },\n  },\n  carrierTransportCallReference: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 100}, parents: {timestamp: {} }},\n  },\n  carrierVoyageNumber: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 50, deprecated: true}},\n  },\n  city: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 65}, parents: {address: {} } },\n    'DEFAULT'               : {attributeRequirements: {type: 'string', maxLength: 65, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {address: {}, Address: {} } },\n  },\n  codeListResponsibleAgencyCode: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', deprecated: true, enum: ['5','6','11','20','54','182','274','296','306','399','zzz'] }, parents: {identifyingCode: {} }},\n  },\n  communicationChannelCode: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 2}, parents: {CreateBooking: {}} },\n  },\n  contractQuotationReference: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 35, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {}} },\n  },\n  countryCode: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 2, minLength: 2, pattern: '^[A-Z]{2}$'}, parents: {address: {}, Address: {}} },\n  },\n  CreateBooking: {\n    'DEFAULT'               : {attributeRequirements: { type: 'object', title: 'Create Booking', required: ['receiptTypeAtOrigin', 'deliveryTypeAtDestination', 'cargoMovementTypeAtOrigin', 'cargoMovementTypeAtDestination', 'isPartialLoadAllowed', 'isExportDeclarationRequired', 'isImportLicenseRequired', 'communicationChannelCode', 'isEquipmentSubstitutionAllowed', 'shipmentLocations', 'requestedEquipments', 'documentParties']}, parents: {}},\n  },\n  DCSAResponsibleAgencyCode: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', enum: ['ISO', 'UNECE', 'LLOYD', 'BIC', 'IMO', 'SCAC', 'ITIGG', 'ITU', 'SMDG', 'EXIS', 'FMC', 'CBSA', 'ZZZ'] }, parents: {identifyingCode: {} }},\n  },\n  declaredValue: {\n    'DEFAULT':                {attributeRequirements: {type: 'number', format: 'float', minimum: 0}, parents: {CreateBooking: {}} },\n  },\n  declaredValueCurrency: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', minLength: 3, maxLength: 3, pattern: '^[A-Z]{3}$'}, parents: {CreateBooking: {}} },\n  },\n  deliveryTypeAtDestination: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 3, enum: ['CY', 'SD', 'CFS']}, parents: {CreateBooking: {}} },\n  },\n  destinationChargesPaymentTerm: {\n    'DEFAULT'               : {attributeRequirements: { type: 'object', title: 'Create Booking'}, parents: {CreateBooking: {} }, ref: true},\n  },\n  errorDateTime: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', format: 'date-time'}},\n    'DEFAULT'               : {attributeRequirements: {type: 'string', format: 'date-time'}, parents: {ErrorResponse: {}}},\n  },\n  errorCode: {\n    'DEFAULT'               : {attributeRequirements: {type: 'integer', format: 'int32', minimum: 7000, maximum: 9999}, parents: {DetailedError: {}, errors: {}}},\n  },\n  errorCodeMessage: {\n    DEFAULT:                  {attributeRequirements: {type: 'string', maxLength: 200}, parents: {DetailedError: {}, errors: {}}},\n  },\n  errorCodeText: {\n    DEFAULT: {attributeRequirements: {type: 'string', maxLength: 100}, parents: {DetailedError: {}, errors: {}}},\n  },\n  ErrorResponse: {\n    DEFAULT:                  {attributeRequirements: {type: 'object', title: 'Error Response', required: ['httpMethod', 'requestUri', 'statusCode', 'statusCodeText', 'errorDateTime', 'errors']}, parents: {} },\n  },\n  errors: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'array'}},\n    'DEFAULT'               : {attributeRequirements: {type: 'array', minItems: 1}, parents: {ErrorResponse: {}}},\n  },\n  eventClassifierCode: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', enum: ['PLN', 'ACT', 'REQ', 'EST']}},\n  },\n  eventLocation: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'object'}},\n  },\n  eventType: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', enum: ['OPERATIONS']}},\n  },\n  expectedArrivalAtPlaceOfDeliveryStartDate: {\n    DEFAULT:                  {attributeRequirements: {type: 'string', format: 'date'}, parents: {CreateBooking: {} }},\n  },\n  expectedArrivalAtPlaceOfDeliveryEndDate: {\n    DEFAULT:                  {attributeRequirements: {type: 'string', format: 'date'}, parents: {CreateBooking: {} }},\n  },\n  expectedDepartureDate: {\n    DEFAULT:                  {attributeRequirements: {type: 'string', format: 'date'}, parents: {CreateBooking: {} }},\n  },\n  exportDeclarationReference: {\n    DEFAULT: {attributeRequirements: {type: 'string', maxLength: 35, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {} }},\n  },\n  exportVoyageNumber: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 50, deprecated: true}},\n  },\n  facilityCode: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 6}, parents: {TransportCall: {}, location: {nullable: false}, eventLocation: {nullable: false} }},\n    'BKG_v2.0.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 6, nullable: false, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {FacilityLocation: {} }},\n    DEFAULT                 : {attributeRequirements: {type: 'string', maxLength: 6, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {FacilityLocation: {} }},\n  },\n  FacilityLocation: {\n    'DEFAULT'               : {attributeRequirements: { type: 'object', title: 'Facility Location', required: ['locationType', 'facilityCode', 'facilityCodeListProvider']}, parents: {}},\n  },\n  facilityTypeCode: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string'}, parents: {timestamp: {enum: ['PBPL', 'BRTH'] }, TransportCall: {enum: ['BOCR', 'CLOC', 'COFS', 'COYA', 'OFFD', 'DEPO', 'INTE', 'POTE', 'RAMP']}}},\n  },\n  facilityCodeListProvider: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', enum: ['BIC', 'SMDG']}},\n    DEFAULT                 : {attributeRequirements: {type: 'string', enum: ['BIC', 'SMDG']}, parents: {FacilityLocation: {} }},\n  },\n  floor: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 50}, parents: {Address: {}, address: {} }},\n    DEFAULT: {attributeRequirements: {type: 'string', pattern: '^\\\\S(?:.*\\\\S)?$', maxLength: 50}, parents: {Address: {}, address: {} }},\n  },\n  freightPaymentTermCode: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', enum: ['PRE', 'COL']}, parents: {CreateBooking: {}} },\n  },\n  haulageChargesPaymentTermCode: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', enum: ['PRE', 'COL']}, parents: {originChargesPaymentTerm: {}, destinationChargesPaymentTerm: {}} },\n  },\n  httpMethod: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string'}},\n    'DEFAULT':                {attributeRequirements: {type: 'string', enum: ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'OPTION', 'PATCH']}, parents: {ErrorResponse: {}}},\n  },\n  importLicenseReference: {\n    DEFAULT:                  {attributeRequirements: {type: 'string', maxLength: 35, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {} }},\n  },\n  importVoyageNumber: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 50, deprecated: true}},\n  },\n  incoTerms: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 3}, parents: {CreateBooking: {}} },\n  },\n  InvoicePayableAt: {\n    'DEFAULT':                {attributeRequirements: {type: 'object', title: 'Invoice Payable At', required: ['UNLocationCode']}, parents: {} },\n  },\n  invoicePayableAt: {\n    'BKG_v2.0.0-Beta-2.yaml': {attributeRequirements: {type: 'object', title: 'Invoice Payable At', required: ['UNLocationCode']}, parents: {} },//<-- Needs to be modified\n    'DEFAULT':                {attributeRequirements: {type: 'object', title: 'Invoice Payable At', required: ['UNLocationCode']}, parents: {CreateBooking: {} } },\n  },\n  isEquipmentSubstitutionAllowed: {\n    DEFAULT:                  {attributeRequirements: {type: 'boolean'}, parents: {CreateBooking: {} }},\n  },\n  isExportDeclarationRequired: {\n    DEFAULT:                  {attributeRequirements: {type: 'boolean'}, parents: {CreateBooking: {} }},\n  },\n  isImportLicenseRequired: {\n  DEFAULT:                    {attributeRequirements: {type: 'boolean'}, parents: {CreateBooking: {} }},\n  },\n  isPartialLoadAllowed: {\n    DEFAULT:                  {attributeRequirements: {type: 'boolean'}, parents: {CreateBooking: {} }},\n  },\n  jsonPath: {\n    DEFAULT:                  {attributeRequirements: {type: 'string', maxLength: 500}, parents: {RequestedChange: {}, errors: {}}},\n  },\n  location: {\n    'jit_v1.2.0-Beta-2.yaml': {parents: {TransportCall: {} }},\n  },\n  locationName: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 100}, parents: {location: {}, eventLocation: {} }},\n    'BKG_v2.0.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 100}, parents: {AddressLocation: {}, FacilityLocation: {pattern: '^\\\\S(?:.*\\\\S)?$'}, UNLocationLocation: {pattern: '^\\\\S(?:.*\\\\S)?$'} }},\n    DEFAULT:                  {attributeRequirements: {type: 'string', maxLength: 100, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {AddressLocation: {}, FacilityLocation: {}, UNLocationLocation: {} }},\n  },\n  locationType: {\n    DEFAULT:                  {attributeRequirements: {type: 'string', maxLength: 4}, parents: {AddressLocation: {}, FacilityLocation: {}, UNLocationLocation: {} }},\n  },\n  message: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string'}, parents: {subError: {}}},\n    DEFAULT:                  {attributeRequirements: {type: 'string', maxLength: 500}, parents: {RequestedChange: {}}},\n  },\n  modeOfTransport: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', enum: ['VESSEL', 'RAIL', 'TRUCK', 'BARGE']}, parents: {timestamp: {deprecated: true}, TransportCall: {}}},\n    'DEFAULT':                {attributeRequirements: {type: 'string', enum: ['VESSEL', 'RAIL', 'TRUCK', 'BARGE']}},\n  },\n  name: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 50, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {vessel: {}, Vessel: {} } },\n  },\n  nmftaCode: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 4, deprecated: true}, parents: {publisher: {} }},\n  },\n  operationsEventTypeCode: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', enum: ['STRT', 'CMPL', 'ARRI', 'DEPA'] }},\n  },\n  originChargesPaymentTerm: {\n    'DEFAULT'               : {attributeRequirements: { type: 'object', title: 'Create Booking'}, parents: {CreateBooking: {}}, ref: true},\n  },\n  otherChargesPaymentTermCode: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', enum: ['PRE', 'COL']}, parents: {originChargesPaymentTerm: {}, destinationChargesPaymentTerm: {}} },\n  },\n  otherFacility: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 50}, parents: {}},\n  },\n  placeOfBLIssue: {\n    'BKG_v2.0.0-Beta-2.yaml': {attributeRequirements: {type: 'object', title: 'Place of B/L Issue', required: ['UNLocationCode']}, parents: {} },//<-- Needs to be modified\n    'DEFAULT':                {attributeRequirements: {type: 'object', title: 'Place of B/L Issue', oneOf: true}, parents: {CreateBooking: {} } },\n  },\n  portChargesPaymentTermCode: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', enum: ['PRE', 'COL']}, parents: {originChargesPaymentTerm: {}, destinationChargesPaymentTerm: {}} },\n  },\n  postCode: {\n    DEFAULT:                  {attributeRequirements: {type: 'string', maxLength: 50}, parents: {Address: {}, address: {}} },\n  },\n  property: {\n    DEFAULT:                  {attributeRequirements: {type: 'string', maxLength: 100}, parents: {ErrorResponse: {}, RequestedChange: {}, errors: {}}},\n  },\n  providerCorrelationReference: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 100}, parents: {ErrorResponse: {}} },\n  },\n  publicKey: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 500} },\n  },\n  publisher: {\n    'jit_v1.2.0-Beta-2.yaml': {ref: true },\n  },\n  publisherRole: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', enum: ['CA', 'AG', 'VSL', 'ATH', 'PLT', 'TR', 'TWG', 'LSH', 'BUK'] } },\n  },\n  remark: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 500}},\n  },\n  reason: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string'}, parents: {subError: {}}},\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 5000}, parents: {data: {}}}, //BKG NTF 2.0.0 Beta 1 + EBL NTF 3.0.0 Beta 1\n  },\n  receiptTypeAtOrigin: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 3, enum: ['CY', 'SD', 'CFS']}, parents: {CreateBooking: {}} },\n  },\n  references: {\n    'DEFAULT':                {attributeRequirements: {type: 'array', items: {$ref: '#/components/schemas/Reference'}}, parents: {CreateBooking: {} } },\n  },\n  replyToTimestampID: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', format: 'uuid'} },\n  },\n  RequestedChange: {\n    'DEFAULT':                {attributeRequirements: {type: 'object', title: 'Requested Change', required: ['message']}, parents: {} },\n  },\n  requestUri: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string'} },\n    'DEFAULT':                {attributeRequirements: {type: 'string'}, parents: {ErrorResponse: {}} },\n  },\n  serviceContractReference: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 30}, parents: {CreateBooking: {}} },\n  },\n  stateRegion: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 65}, parents: {address: {} }},\n    'BKG_v2.0.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 65, nullable: true} },\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 65} },\n  },\n  statusCode: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'integer'}},\n    'DEFAULT':                {attributeRequirements: {type: 'integer', format: 'int32'}, parents: {ErrorResponse: {}} },\n  },\n  statusCodeMessage: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 200}, parents: {ErrorResponse: {}} },\n  },\n  statusCodeText: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string'}},\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 50}, parents: {ErrorResponse: {}} },\n  },\n  street: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 100}, parents: {Address: {}, address: {}} },\n  },\n  streetNumber: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', maxLength: 50}, parents: {Address: {}, address: {}} },\n  },\n  taxReference1: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 20} },\n  },\n  taxReference2: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 20} },\n  },\n  timestampID: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', format: 'uuid'} },\n  },\n  transportCallID: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 100}, parents: {TransportCall: {}} },\n  },\n  transportCallReference: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 100} },\n  },\n  transportCallSequenceNumber: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'integer'}},\n    'DEFAULT':                {attributeRequirements: {type: 'integer', format: 'int32'} },\n  },\n  transportDocumentReference: {\n    DEFAULT                 : {attributeRequirements: {type: 'string', maxLength: 20, pattern: '^\\\\S(?:.*\\\\S)?$'}, parents: {CreateBooking: {} }},\n  },\n  transportDocumentTypeCode: {\n    DEFAULT                 : {attributeRequirements: {type: 'string', enum: ['BOL', 'SWB']}, parents: {CreateBooking: {} }},\n  },\n  universalExportVoyageReference: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', minLength: 5, maxLength: 5, pattern: '^\\\\d{2}[0-9A-Z]{2}[NEWSR]$'}, parents: {CreateBooking: {}} },\n  },\n  universalServiceReference: {\n    'DEFAULT':                {attributeRequirements: {type: 'string', minLength: 8, maxLength: 8, pattern: '^SR\\\\d{5}[A-Z]$'}, parents: {CreateBooking: {}} },\n  },\n  UNLocationCode: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 5}},\n    'DEFAULT':                {attributeRequirements: {type: 'string', minLength: 5, maxLength: 5, pattern: '^[A-Z]{2}[A-Z2-9]{3}$'}, parents: {invoicePayableAt: {}, InvoicePayableAt: {}, FacilityLocation: {}, UNLocationLocation: {} } },\n  },\n  UNLocationLocation: {\n    'DEFAULT'               : {attributeRequirements: { type: 'object', title: 'UNLocation Location', additionalProperties: false, required: ['locationType', 'UNLocationCode']}, parents: {}},\n  },\n  value: {\n    DEFAULT:                  {attributeRequirements: {type: 'string', maxLength: 500}, parents: {DetailedError: {}, errors: {}} },\n  },\n  vessel: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'object'}, parents: {timestamp: {}, TransportCall: {} }, ref: true },\n    DEFAULT                 : {attributeRequirements: {type: 'object', title: 'Vessel', required: ['name']}, parents: {CreateBooking: {} }, ref: true },\n  },\n  vesselCallSignNumber: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 10}, parents: {vessel: {} } },\n  },\n  vesselDraft: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'number', format: 'float'}, parents: {OperationsEvent: {} } },\n  },\n  vesselDraftUnit: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', enum: ['MTR', 'FOT']}, parents: {OperationsEvent: {} } },\n  },\n  vesselFlag: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 2}, parents: {vessel: {} } },\n  },\n  vesselIMONumber: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 7}, parents: {timestamp: {deprecated: true}, vessel: {} }},\n    'DEFAULT':                {attributeRequirements: {type: 'string', minLength: 7, maxLength: 8, pattern: '^\\\\d{7,8}$'}, parents: {vessel: {}, Vessel: {} } },\n  },\n  vesselName: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 35}, parents: {vessel: {} } },\n  },\n  vesselOperatorCarrierCode: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', maxLength: 10, nullable: false}, parents: {vessel: {} } },\n  },\n  vesselOperatorCarrierCodeListProvider: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'string', enum: ['SMDG', 'NMFTA'], nullable: false}, parents: {vessel: {} } },\n  },\n  vesselPosition: {\n    'jit_v1.2.0-Beta-2.yaml': {ref: true },\n  },\n  width: {\n    'jit_v1.2.0-Beta-2.yaml': {attributeRequirements: {type: 'number', format: 'float'}, parents: {vessel: {} }},\n  },\n};\n\n// Makes sure two arrays are equal if:\n// * they are the same array\n// * they have the same size\n// * items on each position in the list are the same\nfunction arraysEqual(a, b) {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  if (a.length !== b.length) return false;\n\n  for (let i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\nfunction checkRequirement(input, propertyName, attribute, requirements, results) {\n  // Checking 'enum' attribute\n  if (attribute === 'enum') {\n    // Check that enum values match (= are specified the same way...)\n    const enumValuesRequired = requirements[attribute];\n    const enumValues = input[attribute];\n    if (!arraysEqual(enumValues, enumValuesRequired)) {\n      // The two enum lists do not match - file an error\n      results.push( { message: propertyName + `.` + attribute + ` value must equal: [` + enumValuesRequired + `], value provided: [` + enumValues + `]`, }, );\n    }\n    // Checking 'required' attribute\n  } else if (attribute === 'required') {\n    // Check that required lists match (= are specified the same way...)\n    const requiredValues = requirements[attribute];\n    const inputValues = input[attribute];\n    if (!arraysEqual(inputValues, requiredValues)) {\n      // The two required lists do not match - file an error\n      results.push( { message: propertyName + `.` + attribute + ` value must equal: [` + requiredValues + `], value provided: [` + inputValues + `]`, }, );\n    }\n    // Checking a specific attribute\n  } else if (attribute === 'items') {\n    // Check if a $ref MUST be used\n    if (input['items'] && Object.keys(input['items']).length === 1 && input['items']['$ref']) {\n      if (!(requirements['items'] && requirements['items']['$ref'] === input['items']['$ref'])) {\n        results.push( { message: propertyName + `.` + attribute + ` is defined as a $ref pointing to '` + input['items']['$ref'] + `' - but must be defined ` + (requirements['items']['$ref'] ? `as a $ref pointing to: ` + requirements['items']['$ref'] : `inline`), }, );\n      }\n    } else if (requirements['items'] && Object.keys(requirements['items']).length === 1 && requirements['items']['$ref']) {\n      if (!(input['items'] && input['items']['$ref'] === requirements['items']['$ref'])) {\n        results.push( { message: propertyName + `.` + attribute + ` is not defined as a $ref and MUST point to: ` + requirements['items']['$ref'], }, );\n      }\n    }\n  } else if (requirements[attribute] !== input[attribute]) {\n    // The value provided and the value required does not match - file an error\n    results.push( { message: propertyName + `.` + attribute + ` value must equal: ` + requirements[attribute] + `, value provided: ` + input[attribute], }, );\n  }\n\n  // Make sure type attributes that are strings have example attribute value set\n  if (attribute === 'type' && requirements[attribute] === \"string\" && (!input['example'] || input['example'].length === 0)) {\n    // Example value missing when type=string - file an error\n    results.push( { message: propertyName + `.example attribute must be set with a value`, }, );\n  }\n}\n\nfunction checkAttributeRequirements(property, input, propertyName, parentPropertyName, currentParentAttributeRequirements, results) {\n  // Test valid $ref specifications\n  if (input && Object.keys(input).length === 1 && input['$ref']) {\n    // Make sure correct use of $ref is used\n    if (property['ref'] !== input['$ref']) {\n      // Only return this error - don't need to file other errors as well...\n      results.push({ message: propertyName + ` - if not defined inline it MUST use a $ref pointing to: ` + property['ref'] + ` (currently pointing to: ` + input['$ref'] +`)`, }, );\n    }\n    return [];\n  }\n\n  // Get default attribute requirements applicable to all locations\n  let attributeRequirements = property['attributeRequirements'];\n\n  for (const attribute of ATTRIBUTES_TO_CHECK) {\n    if (input && input[attribute]) {\n      // The attribute exists in the Spec\n      if (attributeRequirements && attributeRequirements[attribute]) {\n        checkRequirement(input, propertyName, attribute, attributeRequirements, results);\n      } else if (currentParentAttributeRequirements && currentParentAttributeRequirements[attribute]) {\n        checkRequirement(input, propertyName, attribute, currentParentAttributeRequirements, results);\n      } else {\n        // The attribute exists only in the Spec - NOT in the required fields in neither current nor parent requirements - file an error\n        results.push( { message: propertyName + `.` + attribute + ` is specified - but should be removed as it is not a required attribute`, }, );\n      }\n    } else if (attributeRequirements && attributeRequirements[attribute]) {\n      // The attribute exists only in the required fields - NOT in the Spec\n      if (attribute === 'enum') {\n        // Provide better error message for missing enum\n        results.push( { message: propertyName + `.enum must contain the list: [` + attributeRequirements[attribute] + `] but nothing was provided`, }, );\n      } else {\n        results.push( { message: propertyName + `.` + attribute + ` value must equal: ` + attributeRequirements[attribute] + ` but nothing was provided`, }, );\n      }\n    } else if (currentParentAttributeRequirements && currentParentAttributeRequirements[attribute]) {\n      // The attribute exists only in the required fields of the parent - NOT in the Spec\n      if (attribute === 'enum') {\n        // Provide better error message for missing enum\n        results.push( { message: propertyName + `.enum must contain the list: [` + currentParentAttributeRequirements[attribute] + `] when defined under the parent property: ` + parentPropertyName + ` but nothing was provided`, }, );\n      } else {\n        results.push( { message: propertyName + `.` + attribute + ` value must equal: ` + currentParentAttributeRequirements[attribute] + ` when defined under the parent property: ` + parentPropertyName + ` but nothing was provided`, }, );\n      }\n    } else {\n      // In none of the lists - there is no requirement for this attribute\n    }\n  }\n}\n\nfunction checkStandard(property, propertyName, input, context) {\n  // Gather all errors in results\n  const results = [];\n\n  // Test if there are any parent attribute requirements\n  let parents = property['parents'];\n  // If parent is defined - the required attributes only apply under a parent\n  if (parents && Object.keys(parents).length > 0) {\n\n    // Get parent to DCSA_property (if parent is called 'items' then check grandParent as the object might be defined \"inline\")\n    const parentPropertyName = (context.path.length > 3 && context.path[context.path.length - 3] === 'items') ? context.path[context.path.length - 4] : context.path[context.path.length - 3];\n\n    if (parents && parents[parentPropertyName]) {\n      // Check parent attributeRequirements\n      checkAttributeRequirements(property, input, propertyName, parentPropertyName, parents[parentPropertyName], results);\n    } else {\n      // The attribute MUST exist below one of the specified parents - if located elsewhere it is an error\n      return [ { message: propertyName + ` is only allowed under one of these parents: [` + Object.keys(parents) + `] - was found under: ` + parentPropertyName, }, ];\n    }\n  } else {\n    // No parent is defined - so the check applies to all locations\n    checkAttributeRequirements(property, input, propertyName, null, null, results);\n  }\n\n  return results;\n}\n\nexport default createRulesetFunction(\n    {\n      input: null,\n      options: null,\n    },\n    function checkRequirements(input, options, context) {\n      // Get current DCSA_property to check\n      const propertyName = context.path[[context.path.length - 1]];\n\n      let property = DCSA_PROPERTIES[propertyName];\n      if (property) {\n        const results = checkStandard(property, propertyName, input, context);\n\n        // Only return a list if it contains something - StopLight requirement!!\n        if (results.length > 0) {\n          return results;\n        }\n      } else {\n        // propertyName is not part of DCSA_PROPERTIES --> try it in the DCSA_ADVANCED_PROPERTIES\n        property = DCSA_ADVANCED_PROPERTIES[propertyName];\n        if (property) {\n          const standard = context['document']['source'].substring(context['document']['source'].lastIndexOf('/') + 1);\n          // Test if the property is defined for a predefined standard\n          if (property[standard]) {\n            // Check against the matched standard\n            const results = checkStandard(property[standard], propertyName, input, context);\n\n            // Only return a list if it contains something - StopLight requirement!!\n            if (results.length > 0) {\n              return results;\n            }\n          } else if (property['DEFAULT']) {\n            // Check against the DEFAULT standard\n            const results = checkStandard(property['DEFAULT'], propertyName, input, context);\n\n            // Only return a list if it contains something - StopLight requirement!!\n            if (results.length > 0) {\n              return results;\n            }\n          } else {\n            return [ { message: propertyName + ` is not defined for the current standard: ` + standard + ` nor does a DEFAULT standard exist. Current standard is: ` + standard, }, ];\n          }\n        } else {\n          // propertyName is not part of neither DCSA_PROPERTIES nor DCSA_ADVANCED_PROPERTIES\n          return [ { message: propertyName + ` is not in the list of DCSA approved property names`, }, ];\n        }\n      }\n    }\n);"
    }
  ],
  "extendedDefault": false
}