openapi: 3.0.3
info:
  title: DCSA OpenAPI specification for Commercial Schedules
  version: 1.0.0
  description: |
    API specification issued by DCSA.org

    This API supports Commercial Schedules (CS) in the context of: point-to-point routings, port schedules, and vessel schedules. 

    **Commercial schedules - point-to-point routings**: provides the product offering of single or multiple estimated end-to-end route options for a shipment in the pre-booking phase. This includes point-to-point specification of all transport legs, estimated timings, estimated schedules and interdependencies between transport legs.
     
    **Commercial schedules – port schedules**: provides, for a required specific port and starting date, the set of all vessels arriving and departing from the port with the corresponding estimated timestamps.
     
    **Commercial schedules – vessel schedules**: provides, for a required specific service and/or voyage and/or vessel and/or location, the timetable of estimated departure and arrival times for each port call on the rotation of the vessel(s).

    Visit the [DCSA Website](https://dcsa.org/standards/commercial-schedules/) to find other documentation related to the standard publication (i.e. Interface Standard, Information Model).


    **Stats API**

    The Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to the Commercial Schedule API. Further details can be found [here](https://labs.dcsa.org/#/http/guides/api-guides/stats-api/introduction).

    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/cs/v1#v100B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.
  license:
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
    name: Apache 2.0
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: 'https://dcsa.org/'
    email: info@dcsa.org
servers:
  - url: 'http://localhost:3000'
paths:
  /v1/point-to-point-routes:
    get:
      summary: Point to Point Routing
      tags:
        - Point To Point
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PointToPoint'
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned
        '400':
          description: Bad Request
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    httpMethod: GET
                    requestUri: 'https://dcsa.org/cs/v1/point-to-point'
                    statusCode: 400
                    statusCodeText: Bad Request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2019-11-12T07:41:00+08:30'
                    errors:
                      - errorCode: 7005
                        property: placeOfDelivery
                        value: SG
                        errorCodeText: invalidQuery
                        errorCodeMessage: PlaceOfDelivery does not exist
        '500':
          description: Internal Server Error
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    httpMethod: GET
                    requestUri: 'https://dcsa.org/cs/v1/point-to-point'
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Unable to process request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2019-11-12T07:41:00+08:30'
                    errors:
                      - errorCode: 7007
                        property: UNLocationCode
                        value: NA
                        errorCodeText: invalidQuery
                        errorCodeMessage: UNLocationCode does not exist
      operationId: get-v1-point-to-point
      parameters:
        - schema:
            type: string
            pattern: ^[A-Z]{2}[A-Z2-9]{3}$
            minLength: 5
            maxLength: 5
            example: NLAMS
          in: query
          name: placeOfReceipt
          description: The `UNLocationCode` specifying where the place is located.
          required: true
        - schema:
            type: string
            pattern: ^[A-Z]{2}[A-Z2-9]{3}$
            minLength: 5
            maxLength: 5
            example: NLAMS
          in: query
          name: placeOfDelivery
          description: The `UNLocationCode` specifying where the place is located.
          required: true
        - schema:
            type: string
            format: date
            example: '2021-04-01'
          in: query
          name: departureDate
          description: |
            Limit the result based on the departureDate. It is possible to use operators on this query parameter. This is done by adding a colon (:) followed by an operator at the end of the queryParameterName (before the equal (`=`)).
            `departureDate:gte=2021-04-01` would result in all the routings for which the departureDate is ≥ 2021-04-01.
            The following operators are supported
              - `:gte` (≥ Greater than or equal)
              - `:gt` (> Greater than)
              - `:lte` (≤ Less than or equal)
              - `:lt` (< Less than)
              - `:eq`(= Equal to)
            A no operator in the case of a single date indicates that the `departureDate` is greater than or equal to the provided date.
              #### Ranges
              In order to `specify a range` the query parameter needs to be used twice with different operators. If multiple operators are used with this query parameter a logical `AND` is to be used between the operators.
              So for the following filter:`departureDate:gte=2021-04-01 & departureDate:lte=2021-04-03` will result in routings within the 2 days range (48 hours) specified. The routings matched **MUST** be available on or after (`≥`) 2021-04-01 `AND` on or before (`≤`) 2021-04-03.
              A no operator here indicates that the `departureDate` would be greater than or equal to the first date and lesser than or equal to the second date following the `&` operator.
                
        - schema:
            type: string
            format: date
            example: '2021-04-01'
          in: query
          name: arrivalDate
          description: |
            Limit the result based on the arrivalDate. It is possible to use operators on this query parameter. This is done by adding a colon (:) followed by an operator at the end of the queryParameterName (before the equal (`=`)).
            `arrivalDate:lte=2021-04-01` would result in all the routings for which the arrivalDate is ≤ 2021-04-01.
            The following operators are supported
              - `:gte` (≥ Greater than or equal)
              - `:gt` (> Greater than)
              - `:lte` (≤ Less than or equal)
              - `:lt` (< Less than)
              - `:eq`(= Equal to)
            A no operator in the case of a single date indicates that the `arrivalDate` is lesser than or equal to the provided date.
              #### Ranges
              In order to `specify a range` the query parameter needs to be used twice with different operators. If multiple operators are used with this query parameter a logical `AND` is to be used between the operators.
              So for the following filter:`arrivalDate:gte=2021-04-01 & arrivalDate:lte=2021-04-03` will result in routings within the 2 days range (48 hours) specified. The routings matched **MUST** be available on or after (`≥`) 2021-04-01 `AND` on or before (`≤`) 2021-04-03.
              A no operator here indicates that the `arrivalDate` would be greater than or equal to the first date and lesser than or equal to the second date following the `&` operator.
        - schema:
            type: integer
            example: 1
            format: int32
            minimum: 0
          in: query
          name: maxTranshipment
          description: 'Specifies the maximum number of transhipments that can have the proposed routings in the response. By default, transhipments are allowed and the responses can have either direct routings or routings with transhipment. The default value of maximum transhipments is defined by the carrier for when the consumer does not provide a value. If the user sets the number of transhipments to 0, only direct routings can be returned in the response.'
        - schema:
            type: string
            enum:
              - CY
              - SD
              - CFS
            maxLength: 3
            example: CY
          in: query
          name: receiptTypeAtOrigin
          description: |
            Indicates the type of service offered at Origin. Options are defined in the `Receipt/Delivery` entity.  
              - `CY` (Container yard (incl. rail ramp))  
              - `SD` (Store Door)  
              - `CFS` (Container Freight Station)
        - schema:
            type: string
            enum:
              - CY
              - SD
              - CFS
            maxLength: 3
            example: CY
          in: query
          name: deliveryTypeAtDestination
          description: |
            Indicates the type of service offered at Destination. Options are defined in the `Receipt/Delivery` entity.  
              - `CY` (Container yard (incl. rail ramp))  
              - `SD` (Store Door)  
              - `CFS` (Container Freight Station)
        - schema:
            type: integer
            format: int32
            default: 100
            example: 100
            minimum: 1
          in: query
          name: limit
          description: Maximum number of items to return.
        - schema:
            type: string
            maxLength: 1024
          in: query
          name: cursor
          description: 'A server generated value to specify a specific point in a collection result, used for pagination.'
        - $ref: '#/components/parameters/Api-Version-Major'
      description: Provides the product offering of single or multiple estimated end-to-end route options for a shipment in the pre-booking phase.
  /v1/port-schedules:
    get:
      summary: Port Schedule
      tags:
        - Port Schedule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortSchedule'
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
        '400':
          description: Bad Request
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    httpMethod: GET
                    requestUri: 'https://dcsa.org/cs/v1/port-schedule'
                    statusCode: 400
                    statusCodeText: Bad Request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2019-11-12T07:41:00+08:30'
                    errors:
                      - errorCode: 7005
                        property: port
                        value: SG
                        errorCodeText: invalidQuery
                        errorCodeMessage: Port does not exist
        '500':
          description: Internal Server Error
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    httpMethod: GET
                    requestUri: 'https://dcsa.org/cs/v1/port-schedule'
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Cannot process request.
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2019-11-12T07:41:00+08:30'
                    errors:
                      - errorCode: 7007
                        property: UNLocationCode
                        value: NA
                        errorCodeText: invalidQuery
                        errorCodeMessage: UNLocationCode does not exist
      operationId: get-v1-port-schedules
      description: 'Provides, for a required specific port and starting date, the set of all vessels arriving and departing from the port with the corresponding estimated timestamps.'
      parameters:
        - schema:
            type: string
            maxLength: 5
            example: NLAMS
            pattern: ^[A-Z]{2}[A-Z2-9]{3}$
            minLength: 5
          in: query
          name: port
          description: The UN Location code specifying where the place is located.
          required: true
        - schema:
            type: string
            format: date
            pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}$
            example: '2023-07-01'
          in: query
          name: date
          description: The date since when the estimated arrival and departures of vessels in a given port is required
          required: true
        - $ref: '#/components/parameters/Api-Version-Major'
        - schema:
            type: integer
            format: int32
            default: 100
            example: 100
            minimum: 1
          in: query
          name: limit
          description: Maximum number of items to return.
        - schema:
            type: string
            example: fE9mZnNldHw9MTAmbGltaXQ9MTA=
            maxLength: 1024
          in: query
          name: cursor
          description: 'A server generated value to specify a specific point in a collection result, used for pagination.'
    parameters: []
  /v1/vessel-schedules:
    get:
      summary: Vessel Schedule
      tags:
        - Vessel Schedule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceSchedule'
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
        '400':
          description: Bad Request
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    httpMethod: GET
                    requestUri: 'https://dcsa.org/cs/v1/vessel-schedule'
                    statusCode: 400
                    statusCodeText: Bad Request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2019-11-12T07:41:00+08:30'
                    errors:
                      - errorCode: 7007
                        property: UNLocationCode
                        value: NA
                        errorCodeText: invalidQuery
                        errorCodeMessage: UNLocationCode does not exist
        '500':
          description: Internal Server Error
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example 1:
                  value:
                    httpMethod: GET
                    requestUri: 'https://dcsa.org/cs/v1/vessel-schedule'
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Cannot process request.
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2019-11-12T07:41:00+08:30'
                    errors:
                      - errorCode: 7007
                        property: UNLocationCode
                        value: NA
                        errorCodeText: invalidQuery
                        errorCodeMessage: UNLocationCode does not exist
      operationId: get-v1-vessel-schedule
      parameters:
        - schema:
            type: string
            minLength: 7
            maxLength: 8
            pattern: ^\d{7,8}$
            example: '9321483'
          in: query
          name: vesselIMONumber
          description: 'The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel.'
        - schema:
            type: string
            maxLength: 50
            pattern: ^\S(?:.*\S)?$
            example: King of the Seas
          in: query
          name: vesselName
          description: The name of a vessel. The result will only return schedules including the vessel with the specified name.  Be aware that the vesselName is not unique and might match multiple vessels.
        - schema:
            type: string
            maxLength: 11
            example: FE1
          in: query
          name: carrierServiceCode
          description: The carrier specific service code to filter by. The result will only return schedules including the service code.
        - schema:
            type: string
            pattern: ^SR\d{5}[A-Z]$
            maxLength: 8
            minLength: 8
            example: SR12345A
          in: query
          name: universalServiceReference
          description: The Universal Service Reference (USR) as defined by DCSA to filter by.
        - schema:
            type: string
            maxLength: 50
            example: 2103S
          in: query
          name: carrierVoyageNumber
          description: The carrier specific identifier of a Voyage - can be both `importVoyageNumber` and `exportVoyageNumber`. The result will only return schedules including the Ports where `carrierVoyageNumber` is either `carrierImportVoyageNumber` or `carrierExportVoyageNumber`.
        - schema:
            type: string
            pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
            maxLength: 5
            example: 2201N
          in: query
          name: universalVoyageReference
          description: The Universal Reference of a Voyage - can be both `importUniversalVoyageReference` and `exportUniversalVoyageReference`. The result will only return schedules including the Ports where `universalVoyageReference` is either `importUniversalVoyageReference` or `exportUniversalVoyageReference`.
        - schema:
            type: string
            pattern: ^[A-Z]{2}[A-Z2-9]{3}$
            minLength: 5
            maxLength: 5
            example: NLAMS
          in: query
          name: UNLocationCode
          description: The UN Location Code specifying where a port is located.  Specifying this filter will only return schedules including entire Voyages related to this particular UN Location Code.
        - schema:
            type: string
            maxLength: 6
            example: APM
          in: query
          name: facilitySMDGCode
          description: The facilitySMDGCode specifying a specific facility (using SMDG Code). Be aware that the `facilitySMDGCode` does not contain a `UNLocationCode` - this must be specified in the `UNLocationCode` filter.  Specifying this filter will only return schedules including entire Voyages related to this particular `facilitySMDGCode`.
        - schema:
            type: string
            example: MAEU
            maxLength: 10
          in: query
          name: vesselOperatorCarrierCode
          description: The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists.
        - schema:
            type: string
            format: date
            example: '2020-04-06'
          in: query
          name: startDate
          description: |
            The start date of the period for which schedule information is requested. If a date of any Timestamp (ATA, ETA or PTA) inside a PortCall matches a date on or after (≥) the `startDate` the entire Voyage (import- and export-Voyage) matching the PortCall will be included in the result. All matching is done towards local Date at the place of the port call.
            If this filter is not provided the default value is `3 months` prior to request time.  The value is populated in `ISO 8601` date format.
        - schema:
            type: string
            format: date
            example: '2020-04-10'
          in: query
          name: endDate
          description: |
            The end date of the period for which schedule information is requested. If a date of any Timestamp (ATA, ETA or PTA) inside a PortCall matches a date on or before (≤) the `endDate` the entire Voyage(import- and export-Voyage) matching the PortCall will be included in the result. All matching is done towards local Date at the place of the port call.  
            If this filter is not provided the default value is `6 months` after request time.  The value is populated in `ISO 8601` date format.
        - schema:
            type: integer
            format: int32
            default: 100
            example: 100
            minimum: 1
          in: query
          name: limit
          description: Maximum number of items to return.
        - schema:
            type: string
            example: fE9mZnNldHw9MTAmbGltaXQ9MTA=
            maxLength: 1024
          in: query
          name: cursor
          description: 'A server generated value to specify a specific point in a collection result, used for pagination.'
        - $ref: '#/components/parameters/Api-Version-Major'
      description: |-
        Provides, for a required specific service and/or voyage and/or vessel and/or location, the timetable of estimated departure and arrival times for each port call on the rotation of the vessel(s). 

        The number of schedules in the list can be narrowed down by providing filter parameters. The resulting payload will always include the entire voyage(s) being matched.
    parameters: []
components:
  schemas:
    PlaceOfReceipt:
      title: Place of Receipt
      type: object
      description: |
        The Location specifying where the place of receipt is located.
      required:
        - facilityTypeCode
        - location
        - dateTime
      properties:
        facilityTypeCode:
          description: |
            The code to identify the specific type of facility. The code indicates which role the facility plays during the transportCall.
            - `BORD` (Border)
            - `CLOC` (Customer Location)
            - `COFS` (Container Freight Station)
            - `OFFD` (Off Dock Storage)
            - `DEPO` (Depot)
            - `INTE` (Inland Terminal)
            - `POTE` (Port Terminal)
            - `PBPL` (Pilot Boarding Place)
            - `BRTH` (Berth)
            - `RAMP` (Ramp)
            - `WAYP` (Waypoint)
          example: POTE
          maxLength: 4
          type: string
        location:
          $ref: '#/components/schemas/Location'
        dateTime:
          type: string
          format: date-time
          example: '2025-01-14T09:21:00+01:00'
          description: 'The local date and time, when the event will take place, in ISO 8601 format specifying the offset.'
    PlaceOfDelivery:
      title: Place Of Delivery
      type: object
      description: |
        The Location specifying where the place of delivery is located.
      required:
        - facilityTypeCode
        - location
        - dateTime
      properties:
        facilityTypeCode:
          description: |
            The code to identify the specific type of facility. The code indicates which role the facility plays during the transportCall.
            - `BORD` (Border)
            - `CLOC` (Customer Location)
            - `COFS` (Container Freight Station)
            - `OFFD` (Off Dock Storage)
            - `DEPO` (Depot)
            - `INTE` (Inland Terminal)
            - `POTE` (Port Terminal)
            - `PBPL` (Pilot Boarding Place)
            - `BRTH` (Berth)
            - `RAMP` (Ramp)
            - `WAYP` (Waypoint)
          example: POTE
          maxLength: 4
          type: string
        location:
          $ref: '#/components/schemas/Location'
        dateTime:
          type: string
          format: date-time
          example: '2025-01-14T09:21:00+01:00'
          description: 'The local date and time, when the event will take place, in ISO 8601 format specifying the offset.'
    PlaceOfArrival:
      title: Place of Arrival
      type: object
      description: |
        The Location specifying where the place of arrival is located.
      required:
        - facilityTypeCode
        - location
        - dateTime
      properties:
        facilityTypeCode:
          description: |
            The code to identify the specific type of facility. The code indicates which role the facility plays during the transportCall.
            - `BORD` (Border)
            - `CLOC` (Customer Location)
            - `COFS` (Container Freight Station)
            - `OFFD` (Off Dock Storage)
            - `DEPO` (Depot)
            - `INTE` (Inland Terminal)
            - `POTE` (Port Terminal)
            - `PBPL` (Pilot Boarding Place)
            - `BRTH` (Berth)
            - `RAMP` (Ramp)
            - `WAYP` (Waypoint)
          example: POTE
          maxLength: 4
          type: string
        location:
          $ref: '#/components/schemas/Location'
        dateTime:
          type: string
          format: date-time
          example: '2025-01-14T09:21:00+01:00'
          description: 'The local date and time, when the event will take place, in ISO 8601 format specifying the offset.'
    PlaceOfDeparture:
      title: Place Of Departure
      type: object
      description: |
        The Location specifying where the place of departure is located.
      required:
        - facilityTypeCode
        - location
        - dateTime
      properties:
        facilityTypeCode:
          description: |
            The code to identify the specific type of facility. The code indicates which role the facility plays during the transportCall.
            - `BORD` (Border)
            - `CLOC` (Customer Location)
            - `COFS` (Container Freight Station)
            - `OFFD` (Off Dock Storage)
            - `DEPO` (Depot)
            - `INTE` (Inland Terminal)
            - `POTE` (Port Terminal)
            - `PBPL` (Pilot Boarding Place)
            - `BRTH` (Berth)
            - `RAMP` (Ramp)
            - `WAYP` (Waypoint)
          example: POTE
          maxLength: 4
          type: string
        location:
          $ref: '#/components/schemas/Location'
        dateTime:
          type: string
          format: date-time
          example: '2025-01-14T09:21:00+01:00'
          description: 'The local date and time, when the event will take place, in ISO 8601 format specifying the offset.'
    PointToPoint:
      title: Point To Point
      type: object
      required:
        - placeOfReceipt
        - placeOfDelivery
        - legs
      properties:
        placeOfReceipt:
          $ref: '#/components/schemas/PlaceOfReceipt'
        placeOfDelivery:
          $ref: '#/components/schemas/PlaceOfDelivery'
        cutOffTimes:
          type: array
          description: A list of cut-offs times provided by the carrier when available. A cut-off time indicates the latest deadline within which a task must be completed.
          items:
            $ref: '#/components/schemas/CutOffTime'
        solutionNumber:
          type: integer
          format: int32
          minimum: 1
          example: 1
          description: 'Solution number, starting with 1. Used to group and identify similar or same routings in the response as per the carrier commercial definitions.'
        transitTime:
          type: integer
          description: The estimated total time in **days** that it takes a shipment to move from place of receipt to place of delivery. Transit time includes stop-over time during transshipments and waiting time at connection points.
          format: int32
          example: 10
        legs:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Leg'
    PortSchedule:
      title: Port Schedule
      type: object
      required:
        - location
      properties:
        location:
          $ref: '#/components/schemas/PortScheduleLocation'
        vesselSchedules:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
    Schedule:
      title: Schedule
      type: object
      required:
        - isDummyVessel
        - timestamps
        - serviceCarriers
      properties:
        universalServiceReference:
          type: string
          description: 'A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: SR\d{5}[A-Z]. The letters SR followed by 5 digits, followed by a checksum-character as a capital letter from A to Z.'
          example: SR12345A
          pattern: ^SR\d{5}[A-Z]$
          maxLength: 8
          minLength: 8
        servicePartners:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ServicePartnerSchedules'
        vesselIMONumber:
          type: string
          description: 'The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel.'
          example: '9321483'
          pattern: ^\d{7,8}$
          minLength: 7
          maxLength: 8
        MMSINumber:
          type: string
          description: 'Maritime Mobile Service Identities (MMSIs) are nine-digit numbers used by maritime digital selective calling (DSC), automatic identification systems (AIS) and certain other equipment to uniquely identify a ship or a coast radio station.'
          pattern: ^\d{9}$
          minLength: 9
          maxLength: 9
          example: '278111222'
        vesselName:
          type: string
          description: The name of the Vessel given by the Vessel Operator and registered with IMO.
          example: King of the Seas
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
        isDummyVessel:
          type: boolean
          description: Is this a dummy vessel. In case no vessel has been asigned yet - this property can be set to `true` indicating that the vesselIMONumber does not exist.
        universalImportVoyageReference:
          type: string
          description: 'A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage.'
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          example: 2103N
          minLength: 5
          maxLength: 5
        universalExportVoyageReference:
          type: string
          description: 'A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage.'
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          example: 2103N
          minLength: 5
          maxLength: 5
        vesselOperatorCarrierCode:
          type: string
          description: The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists.
          example: MAEU
          maxLength: 10
        vesselOperatorCarrierCodeListProvider:
          type: string
          description: Identifies the code list provider used for the operator and partner carriercodes.
          example: NMFTA
          enum:
            - SMDG
            - NMFTA
        timestamps:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Timestamp'
        cutOffTimes:
          type: array
          description: A list of cut-offs times provided by the carrier when available. A cut-off time indicates the latest deadline within which a task must be completed.
          items:
            $ref: '#/components/schemas/CutOffTime'
    TransportCall:
      title: Transport Call
      type: object
      required:
        - transportCallReference
        - carrierImportVoyageNumber
        - timestamps
      properties:
        portVisitReference:
          type: string
          description: The unique reference that can be used to link different `transportCallReferences` to the same port visit. The reference is provided by the port to uniquely identify a port call.
          maxLength: 50
          example: NLRTM1234589
        transportCallReference:
          type: string
          maxLength: 100
          description: 'The unique reference for a transport call. It’s the vessel operator’s responsibility to provide the Transport Call Reference, other parties are obliged to pick it up and use it. It can take the form of Port Call References as defined in OVS Definitions Document, or alternatively a reference as defined by the vessel operator.'
          example: SR11111X-9321483-2107W-NLRTM-HPD2-1-1
        carrierImportVoyageNumber:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          example: 2103N
          description: The identifier of an import voyage. The carrier-specific identifier of the import Voyage.
        carrierExportVoyageNumber:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          example: 2103S
          description: The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
        universalImportVoyageReference:
          type: string
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          example: 2103N
          description: 'A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage.'
          maxLength: 5
          minLength: 5
        universalExportVoyageReference:
          type: string
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          example: 2103N
          maxLength: 5
          minLength: 5
        location:
          $ref: '#/components/schemas/TransportCallLocation'
        timestamps:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Timestamp'
    Timestamp:
      title: Timestamp
      type: object
      required:
        - eventTypeCode
        - eventClassifierCode
        - eventDateTime
      properties:
        eventTypeCode:
          type: string
          enum:
            - ARRI
            - DEPA
          description: "Identifier for type of transportEvent\r\n\r\n- ARRI (Arrived)\r\n- DEPA (Departed)"
        eventClassifierCode:
          type: string
          enum:
            - PLN
            - EST
            - ACT
          description: |
            Code for the event classifier. Values can vary depending on eventType.

            Possible values are:
            - `ACT` (Actual)
            - `EST` (Estimated)
            - `PLN` (Planned)
        eventDateTime:
          type: string
          format: date-time
          description: 'The local date and time, when the event takes place, in ISO 8601 format specifying the offset.'
          example: '2025-01-14T09:21:00+01:00'
    ServiceSchedule:
      title: Service Schedule
      type: object
      required:
        - carrierServiceName
        - carrierServiceCode
        - vesselSchedules
      properties:
        carrierServiceName:
          type: string
          description: The name of the service.
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          example: Great Lion Service
        carrierServiceCode:
          type: string
          maxLength: 11
          example: FE1
          pattern: ^\S(?:.*\S)?$
          description: The carrier-specific code of the service for which the schedule details are published.
        universalServiceReference:
          type: string
          pattern: ^SR\d{5}[A-Z]$
          maxLength: 8
          minLength: 8
          example: SR12345A
          description: 'A global unique service reference, as per DCSA standard, agreed by VSA partners for the service.'
        vesselSchedules:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/VesselSchedule'
    VesselSchedule:
      title: Vessel Schedule
      type: object
      required:
        - vesselOperatorCarrierCode
        - vesselOperatorCarrierCodeListProvider
        - isDummyVessel
      properties:
        vesselOperatorCarrierCode:
          type: string
          description: The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists.
          example: MAEU
          maxLength: 10
        vesselOperatorCarrierCodeListProvider:
          type: string
          description: Identifies the code list provider used for the operator and partner carriercodes.
          example: NMFTA
          enum:
            - SMDG
            - NMFTA
        vesselIMONumber:
          type: string
          description: 'The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel.'
          example: '9321483'
          pattern: ^\d{7,8}$
          minLength: 7
          maxLength: 8
        MMSINumber:
          type: string
          description: 'Maritime Mobile Service Identities (MMSIs) are nine-digit numbers used by maritime digital selective calling (DSC), automatic identification systems (AIS) and certain other equipment to uniquely identify a ship or a coast radio station.'
          pattern: ^\d{9}$
          minLength: 9
          maxLength: 9
          example: '278111222'
        vesselName:
          type: string
          description: The name of the Vessel given by the Vessel Operator and registered with IMO.
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          example: King of the Seas
        vesselCallSign:
          type: string
          maxLength: 10
          example: NCVV
          pattern: ^\S+(\s+\S+)*$
          description: 'A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a threeletter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.'
        isDummyVessel:
          type: boolean
          description: Is this a dummy vessel. In case no vessel has been asigned yet - this property can be set to `true` indicating that the vesselIMONumber does not exist.
        transportCalls:
          type: array
          items:
            $ref: '#/components/schemas/TransportCall'
    CutOffTime:
      title: Cut-Off Time
      type: object
      description: Cut Off Times.
      required:
        - cutOffDateTimeCode
        - cutOffDateTime
      properties:
        cutOffDateTimeCode:
          type: string
          description: "Code for the cut-off time. Possible values are:\r\n- `DCO` (Documentation cut-off)\r\n- `VCO` (VGM cut-off)\r\n- `FCO` (FCL delivery cut-off)\r\n- `LCO` (LCL delivery cut-off)\r\n- `PCO` (Port cut-off)\r\n- `ECP` (Empty container pick-up date and time)\r\n- `EFC` (Earliest full-container delivery date)\r\n- `RCO` (Reefer cut-off)\r\n- `DGC` (Dangerous Goods cut-off)\r\n- `OBC` (OOG/BB cut-off)\r\n- `TCO` (Transhipment cut-off)\r\n- `STA` (Standard booking acceptance)\r\n- `SPA` (Special booking acceptance)\r\n- `CUA` (Customs Acceptance)\r\n- `AFC` (Advanced filling cut-off)\r\n\r\n**LCL Condition** : Only applicable when the `Receipt Type at Origin` is `CFS`.\r\n\r\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/reference-data/CutOffDateTimeCodeList-CS_v1.0.0.csv)"
          maxLength: 3
          example: DCO
        cutOffDateTime:
          type: string
          format: date-time
          description: Estimated cut-off time expressed in local time with offset following ISO 8601 format.
          example: '2019-11-12T07:41:00-08:30'
    Address:
      title: Address
      type: object
      description: An object for storing address related information.
      required:
        - countryCode
      properties:
        street:
          type: string
          example: Ruijggoordweg
          maxLength: 100
        streetNumber:
          type: string
          example: '100'
          maxLength: 50
        floor:
          type: string
          example: N/A
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
        postCode:
          type: string
          example: 1047 HM
          maxLength: 10
        city:
          type: string
          example: Amsterdam
          maxLength: 65
        stateRegion:
          type: string
          example: North Holland
          maxLength: 65
        countryCode:
          type: string
          pattern: ^[A-Z]{2}$
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: NL
    ErrorResponse:
      title: Error Response
      type: object
      required:
        - httpMethod
        - requestUri
        - statusCode
        - statusCodeText
        - errorDateTime
        - errors
      properties:
        httpMethod:
          type: string
          example: POST
          enum:
            - GET
            - HEAD
            - POST
            - PUT
            - DELETE
            - OPTION
            - PATCH
          description: 'The HTTP method used to make the request e.g. `GET`, `POST`, etc'
        requestUri:
          type: string
          description: The URI that was requested.
          example: /v1/events
        statusCode:
          type: integer
          description: The HTTP status code returned.
          format: int32
          maxLength: 50
          example: 400
        statusCodeText:
          type: string
          description: A standard short description corresponding to the HTTP status code.
          example: Bad Request
        statusCodeMessage:
          type: string
          description: A long description corresponding to the HTTP status code with additional information.
          maxLength: 200
          example: The supplied data could not be accepted
        providerCorrelationReference:
          type: string
          description: A unique identifier to the HTTP request within the scope of the API provider.
          maxLength: 100
          example: 4426d965-0dd8-4005-8c63-dc68b01c4962
        errorDateTime:
          type: string
          description: 'The DateTime corresponding to the error occuring. Must be formatted using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.'
          example: '2019-11-12T07:41:00Z'
          format: date-time
        errors:
          type: array
          description: An array of errors provding more detail about the root cause.
          minItems: 1
          items:
            title: Detailed Error
            type: object
            required:
              - errorCodeText
              - errorCodeMessage
            properties:
              errorCode:
                type: integer
                format: int32
                description: "The detailed error code returned.\r\n\r\n  - `7000-7999` Technical error codes\r\n  - `8000-8999` Functional error codes\r\n  - `9000-9999` API provider-specific error codes            \r\n\r\n[Error codes as specified by DCSA](https://dcsa.atlassian.net/wiki/spaces/DTG/pages/197132308/Standard+Error+Codes)."
                example: 7003
                minimum: 7000
                maximum: 9999
              property:
                type: string
                description: The name of the property causing the error.
                example: facilityCode
                maxLength: 100
              value:
                type: string
                description: The value of the property causing the error serialised as a string exactly as in the original request.
                example: SG SIN WHS
                maxLength: 500
              jsonPath:
                type: string
                description: 'A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).'
                example: $.location.facilityCode
                maxLength: 500
              errorCodeText:
                type: string
                description: A standard short description corresponding to the `errorCode`.
                example: invalidData
                maxLength: 100
              errorCodeMessage:
                type: string
                description: A long description corresponding to the `errorCode` with additional information.
                example: Spaces not allowed in facility code
                maxLength: 200
    Vessel:
      title: Vessel
      type: object
      properties:
        vesselIMONumber:
          type: string
          description: 'The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel.'
          example: '9321483'
          pattern: ^\d{7,8}$
          minLength: 7
          maxLength: 8
        MMSINumber:
          type: string
          description: 'Maritime Mobile Service Identities (MMSIs) are nine-digit numbers used by maritime digital selective calling (DSC), automatic identification systems (AIS) and certain other equipment to uniquely identify a ship or a coast radio station.'
          pattern: ^\d{9}$
          minLength: 9
          maxLength: 9
          example: '278111222'
        name:
          type: string
          description: The name of the Vessel given by the Vessel Operator and registered with IMO.
          example: King of the Seas
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
        flag:
          type: string
          description: The flag of the nation whose laws the vessel is registered under. This is the ISO 3166 two-letter country code.
          pattern: ^[A-Z]{2}$
          maxLength: 2
          minLength: 2
          example: DE
        callSign:
          type: string
          description: 'A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a threeletter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.'
          pattern: ^\S+(\s+\S+)*$
          example: NCVV
          maxLength: 10
        operatorCarrierCode:
          type: string
          description: The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists.
          example: MAEU
          maxLength: 10
        operatorCarrierCodeListProvider:
          type: string
          description: Identifies the code list provider used for the operator and partner carriercodes.
          example: NMFTA
          enum:
            - SMDG
            - NMFTA
    Barge:
      title: Barge
      type: object
      properties:
        vesselIMONumber:
          type: string
          description: 'The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel.'
          example: '9321483'
          pattern: ^\d{7,8}
          minLength: 7
          maxLength: 8
        MMSINumber:
          type: string
          description: 'Maritime Mobile Service Identities (MMSIs) are nine-digit numbers used by maritime digital selective calling (DSC), automatic identification systems (AIS) and certain other equipment to uniquely identify a ship or a coast radio station.'
          pattern: ^\d{9}$
          minLength: 9
          maxLength: 9
          example: '278111222'
        name:
          type: string
          description: The name of the Vessel given by the Vessel Operator and registered with IMO.
          example: King of the Seas
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
        flag:
          type: string
          description: The flag of the nation whose laws the vessel is registered under. This is the ISO 3166 two-letter country code.
          pattern: ^[A-Z]{2}$
          maxLength: 2
          minLength: 2
          example: DE
        callSign:
          type: string
          description: 'A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a threeletter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.'
          pattern: ^\S+(\s+\S+)*$
          example: NCVV
          maxLength: 10
        operatorCarrierCode:
          type: string
          description: The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists.
          example: MAEU
          maxLength: 10
        operatorCarrierCodeListProvider:
          type: string
          description: Identifies the code list provider used for the operator and partner carriercodes.
          example: NMFTA
          enum:
            - SMDG
            - NMFTA
    VesselTransport:
      title: Vessel Transport
      type: object
      description: Transport mode Vessel.
      required:
        - modeOfTransport
      properties:
        modeOfTransport:
          type: string
          enum:
            - VESSEL
          description: The mode of transport as defined by DCSA. For the Vessel Transport mode this needs to be VESSEL.
        portVisitReference:
          type: string
          example: NLAMS1234589
          maxLength: 50
          description: The unique reference that can be used to link different `transportCallReferences` to the same port visit. The reference is provided by the port to uniquely identify a port call.
        transportCallReference:
          type: string
          example: SR11111X-9321483-2107W-NLAMS-ACT-1-1
          maxLength: 100
          description: 'The unique reference for a transport call. It’s the vessel operator’s responsibility to provide the Transport Call Reference, other parties are obliged to pick it up and use it. It can take the form of Port Call References as defined in OVS Definitions Document, or alternatively a reference as defined by the vessel operator.'
        servicePartners:
          type: array
          items:
            $ref: '#/components/schemas/ServicePartner'
        universalServiceReference:
          type: string
          description: 'A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: SR\d{5}[A-Z]. The letters SR followed by 5 digits, followed by a checksum-character as a capital letter from A to Z.'
          example: SR12345A
          pattern: ^SR\d{5}[A-Z]$
          maxLength: 8
          minLength: 8
        universalExportVoyageReference:
          type: string
          description: 'A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage.'
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          minLength: 5
          maxLength: 5
          example: 2103N
        universalImportVoyageReference:
          type: string
          description: 'A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage.'
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          minLength: 5
          maxLength: 5
          example: 2103N
        vessel:
          $ref: '#/components/schemas/Vessel'
    BargeTransport:
      title: Barge Transport
      type: object
      description: Transport mode Barge.
      required:
        - modeOfTransport
      properties:
        modeOfTransport:
          type: string
          enum:
            - BARGE
          description: The mode of transport as defined by DCSA. For the Barge Transport mode this needs to be BARGE.
        portVisitReference:
          type: string
          example: NLAMS1234589
          maxLength: 50
          description: The unique reference that can be used to link different `transportCallReferences` to the same port visit. The reference is provided by the port to uniquely identify a port call.
        transportCallReference:
          type: string
          example: SR11111X-9321483-2107W-NLAMS-ACT-1-1
          maxLength: 100
          description: 'The unique reference for a transport call. It’s the vessel operator’s responsibility to provide the Transport Call Reference, other parties are obliged to pick it up and use it. It can take the form of Port Call References as defined in OVS Definitions Document, or alternatively a reference as defined by the vessel operator.'
        servicePartners:
          type: array
          items:
            $ref: '#/components/schemas/ServicePartner'
        universalServiceReference:
          type: string
          description: 'A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: SR\d{5}[A-Z]. The letters SR followed by 5 digits, followed by a checksum-character as a capital letter from A to Z.'
          example: SR12345A
          pattern: ^SR\d{5}[A-Z]$
          maxLength: 8
          minLength: 8
        universalExportVoyageReference:
          type: string
          description: 'A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage.'
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          minLength: 5
          maxLength: 5
          example: 2103N
        universalImportVoyageReference:
          type: string
          description: 'A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage.'
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          minLength: 5
          maxLength: 5
          example: 2103N
        barge:
          $ref: '#/components/schemas/Barge'
    OtherTransport:
      title: Other Transport
      type: object
      description: Other Transport modes.
      required:
        - modeOfTransport
      properties:
        modeOfTransport:
          type: string
          enum:
            - RAIL_TRUCK
            - BARGE_TRUCK
            - BARGE_RAIL
            - MULTIMODAL
            - RAIL
            - TRUCK
          description: "The mode of transport as defined by DCSA. The Other Transport mode needs to be one of the below options.\r\n- `RAIL` (When the transport mode is Rail)\r\n- `TRUCK` (When the transport mode is Truck)\r\n- `RAIL_TRUCK` (When rail and truck are expected to be the mode of transport in a leg of a proposed routing)\r\n- `BARGE_TRUCK`(When barge and truck are expected to be the mode of transport in a leg of a proposed routing)\r\n- `BARGE_RAIL`(When barge and rail are expected to be the mode of transport in a leg of a proposed routing)\r\n- `MULTIMODAL`(When mode of transport is not really defined or unknown at this stage)"
    FacilityLocation:
      title: Facility Location
      type: object
      description: A way to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
      required:
        - facilityCode
        - facilityCodeListProvider
      properties:
        facilityCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 6
          example: ADT
          description: "The code used for identifying the specific facility. This code does not include the UN Location Code.The definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:\r\n\r\n- for `SMDG` - the codeList used is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)\r\n- for `BIC`  - the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/)"
        facilityCodeListProvider:
          type: string
          description: "The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`.\r\n- `BIC` (Requires a UN Location Code) \r\n- `SMDG` (Requires a UN Location Code)"
          enum:
            - BIC
            - SMDG
          example: SMDG
    ServicePartner:
      title: Service Partners
      type: object
      description: The service code and voyage number as identified by the carriers that are partners in the service.
      properties:
        carrierCode:
          type: string
          description: The carrier code based on either the SMDG or SCAC code lists.
          maxLength: 10
          example: MAEU
        carrierCodeListProvider:
          type: string
          description: Identifies the code list provider used for the carriercodes.
          example: NMFTA
          enum:
            - SMDG
            - NMFTA
        carrierServiceName:
          type: string
          description: The name of the service.
          maxLength: 50
          example: Great Lion Service
        carrierServiceCode:
          type: string
          description: The carrier-specific code of the service for which the schedule details are published.
          maxLength: 11
          example: FE1
          pattern: ^\S(?:.*\S)?$
        carrierImportVoyageNumber:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          example: 2103S
          description: The identifier of an import voyage. The carrier-specific identifier of the import Voyage.
        carrierExportVoyageNumber:
          type: string
          example: 2103N
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
    ServicePartnerSchedules:
      title: Service Partner Schedules
      type: object
      required:
        - carrierServiceName
        - carrierServiceCode
        - carrierImportVoyageNumber
        - carrierExportVoyageNumber
      description: The service code and voyage number as identified by the carriers that are partners in the service.
      properties:
        carrierCode:
          type: string
          description: The carrier code based on either the SMDG or SCAC code lists.
          maxLength: 10
          example: MAEU
        carrierCodeListProvider:
          type: string
          description: Identifies the code list provider used for the carriercodes.
          example: NMFTA
          enum:
            - SMDG
            - NMFTA
        carrierServiceName:
          type: string
          description: The name of the service.
          maxLength: 50
          example: Great Lion Service
        carrierServiceCode:
          type: string
          description: The carrier-specific code of the service for which the schedule details are published.
          maxLength: 11
          example: FE1
          pattern: ^\S(?:.*\S)?$
        carrierImportVoyageNumber:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          example: 2103S
          description: The identifier of an import voyage. The carrier-specific identifier of the import Voyage.
        carrierExportVoyageNumber:
          type: string
          example: 2103N
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
    Leg:
      title: Leg
      type: object
      description: Leg of the Point-to-Point routing. The object "Legs" can be conformed by as many legs as needed and this legs must be identified with a sequence number.
      required:
        - departure
        - arrival
      properties:
        sequenceNumber:
          type: integer
          format: int32
          description: Sequence number of the leg.
        transport:
          description: The mode of transport as defined by DCSA.
          oneOf:
            - $ref: '#/components/schemas/VesselTransport'
            - $ref: '#/components/schemas/BargeTransport'
            - $ref: '#/components/schemas/OtherTransport'
        departure:
          $ref: '#/components/schemas/PlaceOfDeparture'
        arrival:
          $ref: '#/components/schemas/PlaceOfArrival'
    Location:
      title: Location
      type: object
      description: |
        The location can be specified using **any** of the nested structures:
          - `Address` (used to specify the location via an Address)
          - `UNLocationCode`
          - `Facility` (used to specify a location using a `facilityCode` and a 'facilityCodeListProvider')
          It is expected that if a location is specified in multiple ways (both as an `Address` and as a `Facility`) that both ways point to the same location.
      properties:
        locationName:
          type: string
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 102
          description: An optional name for the location.
        address:
          $ref: '#/components/schemas/Address'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: "The UN Location code specifying where the place is located. The pattern used must be\r\n\r\n - 2 characters for the country code using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\r\n - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\r\n\r\nMore info can be found here: [UN/LOCODE](https://en.wikipedia.org/wiki/UN/LOCODE)"
          example: NLAMS
        facility:
          $ref: '#/components/schemas/FacilityLocation'
    TransportCallLocation:
      title: TransportCall Location
      type: object
      description: |
        General purpose object to capture location-related data, the location can be specified in **any** of the following ways:
          - `Address` (used to specify the location via an Address)
          - `UNLocationCode`
          - `FacilitySMDGCode` (used to specify a location using a `facilitySMDGCode`)
          It is expected that if a location is specified in multiple ways (both as an `Address` and as a `Facility`) that both ways point to the same location.
      properties:
        locationName:
          type: string
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 102
          description: An optional name for the location.
        address:
          $ref: '#/components/schemas/Address'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: "The UN Location code specifying where the place is located. The pattern used must be\r\n\r\n - 2 characters for the country code using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\r\n - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\r\n\r\nMore info can be found here: [UN/LOCODE](https://en.wikipedia.org/wiki/UN/LOCODE)"
          example: NLAMS
        facilitySMDGCode:
          type: string
          example: ACT
          description: "The code used for identifying the specific facility. This code does not include the UN Location Code.\r\n\r\nThe codeList used by SMDG is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)"
          maxLength: 6
    PortScheduleLocation:
      title: Port Schedule Location
      type: object
      description: |
        General purpose object to capture location-related data, the location can be specified in **any** of the following ways:
          - `UNLocationCode`
          - `FacilitySMDGCode` (used to specify a location using a `facilitySMDGCode`)
          It is expected that if a location is specified in multiple ways (both as an `UNLocationCode` and as a `facilitySMDGCode`) that both ways point to the same location.
      properties:
        locationName:
          type: string
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 102
          description: An optional name for the location.
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: "The UN Location code specifying where the place is located. The pattern used must be\r\n\r\n - 2 characters for the country code using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\r\n - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\r\n\r\nMore info can be found here: [UN/LOCODE](https://en.wikipedia.org/wiki/UN/LOCODE)"
          example: NLAMS
        facilitySMDGCode:
          type: string
          example: ACT
          description: "The code used for identifying the specific facility. This code does not include the UN Location Code.\r\n\r\nThe codeList used by SMDG is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)"
          maxLength: 6
  parameters:
    Api-Version-Major:
      in: header
      name: API-Version
      required: false
      schema:
        type: string
        example: '1'
      description: |
        An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
tags:
  - name: Point To Point
    description: ' '
  - name: Port Schedule
    description: ' '
  - name: Vessel Schedule
    description: ' '
