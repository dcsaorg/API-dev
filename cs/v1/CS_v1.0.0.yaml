openapi: 3.0.3
x-stoplight:
  id: eok4umquikhny
info:
  title: DCSA OpenAPI specification for Commercial Schedules
  version: 1.0.0-Beta-1
  description: |
    API specification issued by DCSA.org

    This API supports Commercial Schedules (CS) in the context of: point-to-point routings, port schedules, and vessel schedules. 

    **Commercial schedules - point-to-point routings**: provides the product offering of single or multiple estimated end-to-end route options for a shipment in the pre-booking phase. This includes point-to-point specification of all transport legs, estimated timings, estimated schedules and interdependencies between transport legs.
     
    **Commercial schedules – port schedules**: provides, for a required specific port and starting date, the set of all vessels arriving and departing from the port with the corresponding estimated timestamps.
     
    **Commercial schedules – vessel schedules**: provides, for a required specific service and/or voyage and/or vessel and/or location, the timetable of estimated departure and arrival times for each port call on the rotation of the vessel(s).

    The Interface Standards for CS and other documentation can be found on the [DCSA Website](https://dcsa.org/standards/commercial-schedules/).

    For explanation to specific values or objects please refer to the [Information Model](https://dcsa.org/wp-content/uploads/2024/01/DCSA-Information-Model-2023.Q4.pdf).

    **Stats API**

    The Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to the Commercial Schedule API. Further details can be found [here](https://developer.dcsa.org/#/http/guides/api-guides/stats-api).

    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/cs/v1#v100B1). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.
  license:
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
    name: Apache 2.0
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: 'https://dcsa.org/'
    email: info@dcsa.org
servers:
  - url: 'http://localhost:3000'
paths:
  /v1/point-to-point-routes:
    get:
      summary: Point to Point Routing
      tags:
        - Point To Point
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PointToPoint'
              examples: {}
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned
        '400':
          description: Bad Request
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                Example 1:
                  value:
                    httpMethod: GET
                    requestUri: 'https://dcsa.org/cs/v1/point-to-point'
                    statusCode: 400
                    statusCodeText: Bad Request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2019-11-12T07:41:00+08:30'
                    errors:
                      - errorCode: 7005
                        property: placeOfDelivery
                        value: SG
                        errorCodeText: invalidQuery
                        errorCodeMessage: PlaceOfDelivery does not exist
        '500':
          description: Internal Server Error
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                Example 1:
                  value:
                    httpMethod: GET
                    requestUri: 'https://dcsa.org/cs/v1/point-to-point'
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Unable to process request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2019-11-12T07:41:00+08:30'
                    errors: []
      operationId: get-v1-point-to-point
      parameters:
        - schema:
            type: string
            pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
            minLength: 5
            maxLength: 5
            example: NLAMS
          in: query
          name: placeOfReceipt
          description: The `UNLocationCode` specifying where the place is located.
          required: true
        - schema:
            type: string
            pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
            minLength: 5
            maxLength: 5
            example: NLAMS
          in: query
          name: placeOfDelivery
          description: The `UNLocationCode` specifying where the place is located.
          required: true
        - schema:
            type: string
            format: date
            example: '2021-04-01'
          in: query
          name: departureDate
          description: 'The date of departure of the routings in the response `:gte` (≥ Greater than or equal) OR `:lte` (≤ Less than or equal) `departureDate:gte=2021-04-01`'
        - schema:
            type: string
            format: date
            example: '2021-04-01'
          in: query
          name: arrivalDate
          description: 'The data of arrival of the routings in the response `:gte` (≥ Greater than or equal) OR `:lte` (≤ Less than or equal) `arrivalDate:gte=2021-04-01`'
        - schema:
            type: integer
            example: 1
            format: int32
            minimum: 0
          in: query
          name: maxTranshipment
          description: 'Specifies the maximum number of transhipments that can have the proposed routings in the response. By default, transhipments are allowed and the responses can have either direct routings or routings with transhipment. The default value of maximum transhipments is defined by the carrier for when the consumer does not provide a value. If the user sets the number of transhipments to 0, only direct routings can be returned in the response.'
        - schema:
            type: string
            enum:
              - CY
              - SD
              - CFS
            maxLength: 3
            example: CY
          in: query
          name: receiptTypeAtOrigin
          description: |
            Indicates the type of service offered at Origin. Options are defined in the `Receipt/Delivery` entity.  
              - `CY` (Container yard (incl. rail ramp))  
              - `SD` (Store Door)  
              - `CFS` (Container Freight Station)
        - schema:
            type: string
            enum:
              - CY
              - SD
              - CFS
            maxLength: 3
            example: CY
          in: query
          name: deliveryTypeAtDestination
          description: |
            Indicates the type of service offered at Destination. Options are defined in the `Receipt/Delivery` entity.  
              - `CY` (Container yard (incl. rail ramp))  
              - `SD` (Store Door)  
              - `CFS` (Container Freight Station)
        - schema:
            type: integer
            format: int32
            default: 100
            example: 100
            minimum: 1
          in: query
          name: limit
          description: Maximum number of items to return.
        - schema:
            type: string
            maxLength: 1024
          in: query
          name: cursor
          description: 'A server generated value to specify a specific point in a collection result, used for pagination.'
        - $ref: '#/components/parameters/Api-Version-Major'
      description: Provides the product offering of single or multiple estimated end-to-end route options for a shipment in the pre-booking phase.
      x-stoplight:
        id: ibt5y7c4xqfp8
  /v1/port-schedules:
    get:
      summary: Port Schedule
      tags:
        - Port Schedule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortSchedule'
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
        '400':
          description: Bad Request
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                Example 1:
                  value:
                    httpMethod: GET
                    requestUri: 'https://dcsa.org/cs/v1/port-schedule'
                    statusCode: 400
                    statusCodeText: Bad Request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2019-11-12T07:41:00+08:30'
                    errors:
                      - errorCode: 7005
                        property: port
                        value: SG
                        errorCodeText: invalidQuery
                        errorCodeMessage: Port does not exist
        '500':
          description: Internal Server Error
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                Example 1:
                  value:
                    httpMethod: GET
                    requestUri: 'https://dcsa.org/cs/v1/port-schedule'
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Cannot process request.
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2019-11-12T07:41:00+08:30'
                    errors: []
      operationId: get-v1-port-schedules
      description: 'Provides, for a required specific port and starting date, the set of all vessels arriving and departing from the port with the corresponding estimated timestamps.'
      parameters:
        - schema:
            type: string
            maxLength: 5
            example: NLAMS
            pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
            minLength: 5
          in: query
          name: port
          description: The UN Location code specifying where the place is located.
          required: true
        - schema:
            type: string
            format: date
            pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}$'
            example: '2023-07-01'
          in: query
          name: date
          description: The date since when the estimated arrival and departures of vessels in a given port is required
          required: true
        - $ref: '#/components/parameters/Api-Version-Major'
        - schema:
            type: integer
            format: int32
            default: 100
            example: 100
            minimum: 1
          in: query
          name: limit
          description: Maximum number of items to return.
        - schema:
            type: string
            example: fE9mZnNldHw9MTAmbGltaXQ9MTA=
            maxLength: 1024
          in: query
          name: cursor
          description: 'A server generated value to specify a specific point in a collection result, used for pagination.'
      x-stoplight:
        id: qgasqkwxqdf20
    parameters: []
  /v1/vessel-schedules:
    get:
      summary: Vessel Schedule
      tags:
        - Vessel Schedule
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceSchedule'
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
        '400':
          description: Bad Request
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                Example 1:
                  value:
                    httpMethod: GET
                    requestUri: 'https://dcsa.org/cs/v1/vessel-schedule'
                    statusCode: 400
                    statusCodeText: Bad Request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2019-11-12T07:41:00+08:30'
                    errors:
                      - errorCode: 7007
                        property: UNLocationCode
                        value: NA
                        errorCodeText: invalidQuery
                        errorCodeMessage: UNLocationCode does not exist
        '500':
          description: Internal Server Error
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0
              description: |
                SemVer used to indicate the version of the contract (API version) returned.
          content:
            application/json:
              schema:
                $ref: ../../models/ErrorResponse.yaml
              examples:
                Example 1:
                  value:
                    httpMethod: GET
                    requestUri: 'https://dcsa.org/cs/v1/vessel-schedule'
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Cannot process request.
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2019-11-12T07:41:00+08:30'
                    errors: []
      operationId: get-v1-vessel-schedule
      x-stoplight:
        id: 66z7va8arml1z
      parameters:
        - schema:
            type: string
            minLength: 7
            maxLength: 8
            pattern: '^\d{7,8}$'
            example: '9321483'
          in: query
          name: vesselIMONumber
          description: 'The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel.'
        - schema:
            type: string
            maxLength: 50
            pattern: '^\S(?:.*\S)?$'
            example: King of the Seas
          in: query
          name: vesselName
          description: The name of a vessel. The result will only return schedules including the vessel with the specified name.  Be aware that the vesselName is not unique and might match multiple vessels.
        - schema:
            type: string
            maxLength: 11
            example: FE1
          in: query
          name: carrierServiceCode
          description: The carrier specific service code to filter by. The result will only return schedules including the service code.
        - schema:
            type: string
            pattern: '^SR\d{5}[A-Z]$'
            maxLength: 8
            example: SR12345A
          in: query
          name: universalServiceReference
          description: The Universal Service Reference (USR) as defined by DCSA to filter by.
        - schema:
            type: string
            maxLength: 50
            example: 2103S
          in: query
          name: carrierVoyageNumber
          description: The carrier specific identifier of a Voyage - can be both `importVoyageNumber` and `exportVoyageNumber`. The result will only return schedules including the Ports where `carrierVoyageNumber` is either `carrierImportVoyageNumber` or `carrierExportVoyageNumber`.
        - schema:
            type: string
            pattern: '^\d{2}[0-9A-Z]{2}[NEWSR]$'
            maxLength: 5
            example: 2201N
          in: query
          name: universalVoyageReference
          description: The Universal Reference of a Voyage - can be both `importUniversalVoyageReference` and `exportUniversalVoyageReference`. The result will only return schedules including the Ports where `universalVoyageReference` is either `importUniversalVoyageReference` or `exportUniversalVoyageReference`.
        - schema:
            type: string
            pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
            minLength: 5
            maxLength: 5
            example: NLAMS
          in: query
          name: UNLocationCode
          description: The UN Location Code specifying where a port is located.  Specifying this filter will only return schedules including entire Voyages related to this particular UN Location Code.
        - schema:
            type: string
            maxLength: 6
            example: APM
          in: query
          name: facilitySMDGCode
          description: The facilitySMDGCode specifying a specific facility (using SMDG Code). Be aware that the `facilitySMDGCode` does not contain a `UNLocationCode` - this must be specified in the `UNLocationCode` filter.  Specifying this filter will only return schedules including entire Voyages related to this particular `facilitySMDGCode`.
        - schema:
            type: string
            example: MAEU
            maxLength: 10
          in: query
          name: vesselOperatorCarrierCode
          description: The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists.
        - schema:
            type: string
            format: date
            example: '2020-04-06'
          in: query
          name: startDate
          description: |
            The start date of the period for which schedule information is requested. If a date of any Timestamp (ATA, ETA or PTA) inside a PortCall matches a date on or after (≥) the `startDate` the entire Voyage (import- and export-Voyage) matching the PortCall will be included in the result. All matching is done towards local Date at the place of the port call.
            If this filter is not provided the default value is `3 months` prior to request time.  The value is populated in `ISO 8601` date format.
        - schema:
            type: string
            format: date
            example: '2020-04-10'
          in: query
          name: endDate
          description: |
            The end date of the period for which schedule information is requested. If a date of any Timestamp (ATA, ETA or PTA) inside a PortCall matches a date on or before (≤) the `endDate` the entire Voyage(import- and export-Voyage) matching the PortCall will be included in the result. All matching is done towards local Date at the place of the port call.  
            If this filter is not provided the default value is `6 months` after request time.  The value is populated in `ISO 8601` date format.
        - schema:
            type: integer
            format: int32
            default: 100
            example: 100
            minimum: 1
          in: query
          name: limit
          description: Maximum number of items to return.
        - schema:
            type: string
            example: fE9mZnNldHw9MTAmbGltaXQ9MTA=
            maxLength: 1024
          in: query
          name: cursor
          description: 'A server generated value to specify a specific point in a collection result, used for pagination.'
        - $ref: '#/components/parameters/Api-Version-Major'
      description: |-
        Provides, for a required specific service and/or voyage and/or vessel and/or location, the timetable of estimated departure and arrival times for each port call on the rotation of the vessel(s). 

        The number of schedules in the list can be narrowed down by providing filter parameters. The resulting payload will always include the entire voyage(s) being matched.
    parameters: []
components:
  schemas:
    Place:
      title: Place
      type: object
      description: The Location specifying where the place is located.
      x-stoplight:
        id: 6qncmwke0iqvq
      required:
        - facilityTypeCode
        - location
        - dateTime
      properties:
        facilityTypeCode:
          description: |
            The code to identify the specific type of facility. The code indicates which role the facility plays during the transportCall.
            - `BORD` (Border)
            - `CLOC` (Customer Location)
            - `COFS` (Container Freight Station)
            - `OFFD` (Off Dock Storage)
            - `DEPO` (Depot)
            - `INTE` (Inland Terminal)
            - `POTE` (Port Terminal)
            - `PBPL` (Pilot Boarding Place)
            - `BRTH` (Berth)
            - `RAMP`  (Ramp)
            - `WAYP` (Waypoint)
          example: POTE
          type: string
        location:
          oneOf:
            - $ref: '#/components/schemas/UNLocationLocation'
            - $ref: '#/components/schemas/FacilitySMDGLocation'
            - $ref: '#/components/schemas/AddressLocation'
          discriminator:
            propertyName: locationType
            mapping:
              ADDR: '#/components/schemas/AddressLocation'
              FACS: '#/components/schemas/FacilitySMDGLocation'
              UNLO: '#/components/schemas/UNLocationLocation'
        dateTime:
          type: string
          format: date-time
          example: '2019-08-24T14:15:22Z'
          x-stoplight:
            id: tfufl59x6te0n
    PointToPoint:
      title: Point To Point
      x-stoplight:
        id: x1x7ae0q7kym3
      type: object
      required:
        - placeOfReceipt
        - placeOfDelivery
        - legs
      properties:
        placeOfReceipt:
          $ref: '#/components/schemas/Place'
        placeOfDelivery:
          $ref: '#/components/schemas/Place'
        cutOffTimes:
          type: array
          description: A list of cut-offs times provided by the carrier when available. A cut-off time indicates the latest deadline within which a task must be completed.
          x-stoplight:
            id: ey85uy7hk8gp5
          items:
            $ref: '#/components/schemas/CutOffTime'
        transitTime:
          type: integer
          x-stoplight:
            id: n94kpnvpk6zsn
          description: The estimated total time in **days** that it takes a shipment to move from place of receipt to place of delivery. Transit time includes stop-over time during transshipments and waiting time at connection points.
          format: int64
          example: 10
        legs:
          x-stoplight:
            id: w4k1wtp4z5j6i
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Leg'
    Leg:
      title: Leg
      x-stoplight:
        id: itbpqbyi0so58
      type: object
      description: Leg of the Point-to-Point routing. The object "Legs" can be conformed by as many legs as needed and this legs must be identified with a sequence number.
      required:
        - departure
        - arrival
      properties:
        sequenceNumber:
          type: integer
          x-stoplight:
            id: 4z9lhffp3cyjs
          format: int64
          description: Sequence number of the leg.
        modeOfTransport:
          x-stoplight:
            id: 9atywo7bqza4b
          description: The mode of transport as defined by DCSA.
          oneOf:
            - $ref: '#/components/schemas/VesselTransport'
            - $ref: '#/components/schemas/BargeTransport'
            - $ref: '#/components/schemas/RailTransport'
            - $ref: '#/components/schemas/TruckTransport'
            - $ref: '#/components/schemas/CombinedTransport'
        departure:
          $ref: '#/components/schemas/Place'
        arrival:
          $ref: '#/components/schemas/Place'
    PortSchedule:
      title: Port Schedule
      type: object
      x-stoplight:
        id: mgxbp9alny3q0
      required:
        - location
      properties:
        location:
          x-stoplight:
            id: ksjcrliv4kobm
          oneOf:
            - $ref: '#/components/schemas/UNLocationLocation'
            - $ref: '#/components/schemas/FacilitySMDGLocation'
          discriminator:
            propertyName: locationType
            mapping:
              FACS: '#/components/schemas/FacilitySMDGLocation'
              UNLO: '#/components/schemas/UNLocationLocation'
        vesselSchedules:
          type: array
          x-stoplight:
            id: oqtnha66e947j
          minItems: 1
          items:
            $ref: '#/components/schemas/Schedule'
    Schedule:
      title: Schedule
      x-stoplight:
        id: czyyep580i801
      type: object
      required:
        - carrierServiceName
        - carrierServiceCode
        - isDummyVessel
        - carrierImportVoyageNumber
        - carrierExportVoyageNumber
        - timestamps
      properties:
        carrierServiceName:
          type: string
          x-stoplight:
            id: g8e6j84n6mcw8
          description: The name of the service.
          maxLength: 50
          example: Great Lion Service
        carrierServiceCode:
          type: string
          x-stoplight:
            id: ys8adwf0o370o
          description: The carrier-specific code of the service for which the schedule details are published.
          maxLength: 11
          example: FE1
        universalServiceReference:
          type: string
          x-stoplight:
            id: 18655doinhur2
          description: 'A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: SR\d{5}[A-Z]. The letters SR followed by 5 digits, followed by a checksum-character as a capital letter from A to Z.'
          example: SR12345A
          pattern: '^SR\d{5}[A-Z]$'
          maxLength: 8
        vesselIMONumber:
          type: string
          x-stoplight:
            id: o2ovfknig1oap
          description: 'The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel.'
          example: '9321483'
          pattern: '^\d{7,8}$'
          minLength: 7
          maxLength: 8
        vesselName:
          type: string
          x-stoplight:
            id: yrtql880q13gj
          description: The name of the Vessel given by the Vessel Operator and registered with IMO.
          example: King of the Seas
          maxLength: 50
          pattern: '^\S(?:.*\S)?$'
        isDummyVessel:
          type: boolean
          x-stoplight:
            id: 018smkza52uel
          description: Is this a dummy vessel. In case no vessel has been asigned yet - this property can be set to `true` indicating that the vesselIMONumber does not exist.
        carrierImportVoyageNumber:
          type: string
          x-stoplight:
            id: g5k2j8ieu07oq
          maxLength: 50
          example: 2103S
          description: The identifier of an import voyage. The carrier-specific identifier of the import Voyage.
        carrierExportVoyageNumber:
          type: string
          x-stoplight:
            id: dj9o6n46dqdas
          example: 2103N
          maxLength: 50
          description: The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
        universalImportVoyageReference:
          type: string
          x-stoplight:
            id: 6lhyeoynmhgm7
          description: 'A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage.'
          pattern: '^\d{2}[0-9A-Z]{2}[NEWSR]$'
          example: 2103N
        universalExportVoyageReference:
          type: string
          x-stoplight:
            id: a41ztcfgnzf22
          description: 'A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage.'
          pattern: '^\d{2}[0-9A-Z]{2}[NEWSR]$'
          example: 2103N
        vesselOperatorCarrierCode:
          type: string
          x-stoplight:
            id: vsirzc1w4gbqt
          description: The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists.
          example: MAEU
          maxLength: 10
        vesselOperatorCarrierCodeListProvider:
          type: string
          x-stoplight:
            id: vj9suv2w0l5j4
          description: Identifies the code list provider used for the operator and partner carriercodes.
          example: NMFTA
          enum:
            - SMDG
            - NMFTA
        timestamps:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Timestamp'
        cutOffTimes:
          type: array
          description: A list of cut-offs times provided by the carrier when available. A cut-off time indicates the latest deadline within which a task must be completed.
          x-stoplight:
            id: o9trzt2y251mw
          items:
            $ref: '#/components/schemas/CutOffTime'
    TransportCall:
      title: Transport Call
      x-stoplight:
        id: 5yngetqks8kzg
      type: object
      x-internal: false
      required:
        - transportCallReference
        - carrierImportVoyageNumber
        - timestamps
      properties:
        portVisitReference:
          type: string
          x-stoplight:
            id: cd5lalxkwxmp2
          description: The unique reference that can be used to link different `transportCallReferences` to the same port visit. The reference is provided by the port to uniquely identify a port call.
          maxLength: 50
          example: NLRTM1234589
        transportCallReference:
          type: string
          x-stoplight:
            id: qcmcz7jjht5mh
          maxLength: 100
          description: 'The unique reference for a transport call. It’s the vessel operator’s responsibility to provide the Transport Call Reference, other parties are obliged to pick it up and use it. It can take the form of Port Call References as defined in OVS Definitions Document, or alternatively a reference as defined by the vessel operator.'
          example: SR11111X-9321483-2107W-NLRTM-HPD2-1-1
        carrierImportVoyageNumber:
          type: string
          x-stoplight:
            id: 4x4hvlsau7ue4
          maxLength: 50
          example: 2103N
          description: The identifier of an import voyage. The carrier-specific identifier of the import Voyage.
        carrierExportVoyageNumber:
          type: string
          x-stoplight:
            id: jvibcpyoy1a3i
          maxLength: 50
          example: 2103S
          description: The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
        universalImportVoyageReference:
          type: string
          x-stoplight:
            id: gxutqo82oej8i
          pattern: '^\d{2}[0-9A-Z]{2}[NEWSR]$'
          example: 2103N
          description: 'A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage.'
          maxLength: 5
        universalExportVoyageReference:
          type: string
          x-stoplight:
            id: qi9m0kpgyredl
          pattern: '^\d{2}[0-9A-Z]{2}[NEWSR]$'
          example: 2103N
          maxLength: 5
        location:
          x-stoplight:
            id: d7jg2e23zhjnb
          oneOf:
            - $ref: '#/components/schemas/UNLocationLocation'
            - $ref: '#/components/schemas/FacilitySMDGLocation'
            - $ref: '#/components/schemas/AddressLocation'
          description: 'General purpose object to capture location-related data, the location can be specified in one of the following ways: `UN Location Code`, a `Facility` or an `Address`.'
          discriminator:
            propertyName: locationType
            mapping:
              ADDR: '#/components/schemas/AddressLocation'
              FACS: '#/components/schemas/FacilitySMDGLocation'
              UNLO: '#/components/schemas/UNLocationLocation'
        timestamps:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Timestamp'
    Timestamp:
      title: Timestamp
      x-stoplight:
        id: e4yk36lhezhkc
      type: object
      properties:
        eventTypeCode:
          x-stoplight:
            id: 1wp4wgtbaiqrs
          enum:
            - ARRI
            - DEPA
          description: "Identifier for type of transportEvent\r\n\r\n- ARRI (Arrived)\r\n- DEPA (Departed)"
        eventClassifierCode:
          x-stoplight:
            id: 7zogujur5x685
          enum:
            - PLN
            - EST
            - ACT
          description: |
            Code for the event classifier. Values can vary depending on eventType.

            Possible values are:
            - ACT (Actual)
            - EST (Estimated)
            - PLN (Planned)
        eventDateTime:
          type: string
          x-stoplight:
            id: 8o5gse4ovp1ah
          format: date-time
          description: Time in the timestamp
          example: '2025-01-14T09:21:00+01:00'
      required:
        - eventTypeCode
        - eventClassifierCode
        - eventDateTime
    VesselSchedule:
      title: Vessel Schedule
      x-stoplight:
        id: vr44dj2pekyyg
      type: object
      properties:
        vesselOperatorCarrierCode:
          type: string
          x-stoplight:
            id: vsirzc1w4gbqt
          description: The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists.
          example: MAEU
          maxLength: 10
        vesselOperatorCarrierCodeListProvider:
          type: string
          x-stoplight:
            id: vj9suv2w0l5j4
          description: Identifies the code list provider used for the operator and partner carriercodes.
          example: NMFTA
          enum:
            - SMDG
            - NMFTA
        vesselIMONumber:
          type: string
          x-stoplight:
            id: o2ovfknig1oap
          description: 'The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel.'
          example: '9321483'
          pattern: '^\d{7,8}$'
          minLength: 7
          maxLength: 8
        vesselName:
          type: string
          x-stoplight:
            id: sjxoamy8akix5
          description: The name of the Vessel given by the Vessel Operator and registered with IMO.
          maxLength: 50
          pattern: '^\S(?:.*\S)?$'
          example: King of the Seas
        vesselCallSign:
          type: string
          x-stoplight:
            id: 4vw8dszljv2x7
          maxLength: 10
          example: NCVV
          description: 'A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a threeletter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.'
        isDummyVessel:
          type: boolean
          x-stoplight:
            id: furrqtk4xkza1
          description: Is this a dummy vessel. In case no vessel has been asigned yet - this property can be set to `true` indicating that the vesselIMONumber does not exist.
        transportCalls:
          type: array
          x-stoplight:
            id: bf4cuvo4d89vq
          items:
            $ref: '#/components/schemas/TransportCall'
      required:
        - isDummyVessel
    ServiceSchedule:
      title: Service Schedule
      x-stoplight:
        id: 6vm6xmsvjsk2r
      type: object
      properties:
        carrierServiceName:
          type: string
          x-stoplight:
            id: 2b1m51pfjlvu6
          description: The name of the service.
          maxLength: 50
          example: Great Lion Service
        carrierServiceCode:
          type: string
          x-stoplight:
            id: 6iw2bwqz9fi1y
          maxLength: 11
          example: FE1
          description: The carrier-specific code of the service for which the schedule details are published.
        universalServiceReference:
          type: string
          x-stoplight:
            id: l8yh5dy09liba
          pattern: '^SR\d{5}[A-Z]$'
          maxLength: 8
          example: SR12345A
          description: 'A global unique service reference, as per DCSA standard, agreed by VSA partners for the service.'
        vesselSchedules:
          type: array
          x-stoplight:
            id: lrom88da9uo6f
          items:
            $ref: '#/components/schemas/VesselSchedule'
      required:
        - carrierServiceName
        - vesselSchedules
    CutOffTime:
      title: CutOffTime
      x-stoplight:
        id: 0s6yu6v21mabq
      type: object
      description: Cut Off Times.
      required:
        - cutOffDateTimeCode
        - cutOffDateTime
      properties:
        cutOffDateTimeCode:
          type: string
          x-stoplight:
            id: 6kxo2zw6m656u
          description: "Code for the cut-off time. Possible values are:\r\n- `DCO` (Documentation cut-off)\r\n- `VCO` (VGM cut-off)\r\n- `FCO` (FCL delivery cut-off)\r\n- `LCO` (LCL delivery cut-off)\r\n- `PCO` (Port cut-off)\r\n- `ECP` (Empty container pick-up date and time)\r\n- `EFC` (Earliest full-container delivery date)\r\n- `RCO` (Reefer cut-off)\r\n- `DGC` (Dangerous Goods cut-off)\r\n- `OBC` (OOG/BB cut-off)\r\n- `TCO` (Transhipment cut-off)\r\n- `STA` (Standard booking acceptance)\r\n- `SPA` (Special booking acceptance)\r\n- `CUA` (Customs Acceptance)\r\n- `AFC` (Advanced filling cut-off)\r\n\r\n**LCL Condition** : Only applicable when the `Receipt Type at Origin` is `CFS`.\r\n\r\nMore details can be found on [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/reference-data/CutOffDateTimeCodeList-CS_v1.0.0.csv)"
          maxLength: 3
          example: DCO
        cutOffDateTime:
          type: string
          x-stoplight:
            id: ovjrw1tb3wbdx
          format: date-time
          description: Actual cut-off time.
          example: '2019-11-12T07:41:00-08:30'
    AddressLocation:
      title: AddressLocation
      x-stoplight:
        id: m8siaz93if4cf
      type: object
      description: An interface used to express a location using an `Address` object.
      required:
        - locationType
        - address
      properties:
        locationName:
          type: string
          x-stoplight:
            id: 1qntskkr8v0h5
          example: Port of Amsterdam
          pattern: '^\S(?:.*\S)?$'
          description: The name of the location.
          maxLength: 100
        locationType:
          type: string
          maxLength: 4
          description: Discriminator used to identify this as an `Address` location interface.
          example: ADDR
        address:
          type: object
          description: An object for storing address related information.
          properties:
            street:
              type: string
              x-stoplight:
                id: ba6frq15mh2t8
              example: Ruijggoordweg
              maxLength: 100
            streetNumber:
              type: string
              x-stoplight:
                id: 1jiv2010jnttw
              example: '100'
              maxLength: 50
            floor:
              type: string
              x-stoplight:
                id: gcvknia354jrg
              example: N/A
              maxLength: 50
            postCode:
              type: string
              x-stoplight:
                id: 4wlkf4w5um9j3
              example: 1047 HM
              maxLength: 50
            city:
              type: string
              x-stoplight:
                id: snavpzoxpl48e
              example: Amsterdam
              maxLength: 65
            stateRegion:
              type: string
              x-stoplight:
                id: 3k7wb2fib7401
              example: North Holland
              maxLength: 65
            countryCode:
              type: string
              pattern: '^[A-Z]{2}$'
              minLength: 2
              maxLength: 2
              description: |
                The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
              example: NL
    FacilitySMDGLocation:
      title: Facility SMDG Location
      x-stoplight:
        id: wjfsbdac9a7nz
      type: object
      description: An interface used to express a location using a `Facility` by the `SMDG` code list. The `facilitySMDGCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
      required:
        - locationType
        - UNLocationCode
        - facilitySMDGCode
      properties:
        locationName:
          type: string
          x-stoplight:
            id: p82efb2odh99y
          description: The name of the location.
          example: Port of Amsterdam
          pattern: '^\S(?:.*\S)?$'
          maxLength: 100
        locationType:
          type: string
          x-stoplight:
            id: wvrz1c6visndu
          example: FACS
          description: Discriminator used to identify this as a `Facility Location` interface only using `SMDG` code list.
          maxLength: 4
        UNLocationCode:
          type: string
          x-stoplight:
            id: 7kpvxrrdljsb5
          example: NLAMS
          pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
          minLength: 5
          maxLength: 5
          description: "The UN Location code specifying where the place is located. The pattern used must be\r\n\r\n - 2 characters for the country code using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\r\n - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\r\n\r\nMore info can be found here: [UN/LOCODE](https://en.wikipedia.org/wiki/UN/LOCODE)"
        facilitySMDGCode:
          type: string
          x-stoplight:
            id: yndr8amfy18nr
          example: ACT
          description: "The code used for identifying the specific facility. This code does not include the UN Location Code.\r\n\r\nThe codeList used by SMDG is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)"
          maxLength: 6
    UNLocationLocation:
      title: UNLocation Location
      x-stoplight:
        id: inxjf3adrpkge
      type: object
      description: An interface used to express a location using a `Un Location Code`.
      additionalProperties: false
      required:
        - locationType
        - UNLocationCode
      properties:
        locationName:
          type: string
          x-stoplight:
            id: uwy2d1d9tkdku
          description: The name of the location.
          example: Port of Amsterdam
          pattern: '^\S(?:.*\S)?$'
        locationType:
          type: string
          x-stoplight:
            id: 9gk73d2za4g0r
          description: Discriminator used to identify this as a `UNLocation` location interface.
          example: UNLO
          maxLength: 4
        UNLocationCode:
          type: string
          x-stoplight:
            id: bnpig7p7mrk8l
          description: "The UN Location code specifying where the place is located. The pattern used must be\r\n\r\n - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\r\n - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\r\n\r\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)"
          pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
          example: NLAMS
          minLength: 5
          maxLength: 5
    ErrorResponse:
      title: Error Response
      x-stoplight:
        id: ecq5zj4a4hkgf
      type: object
      required:
        - httpMethod
        - requestUri
        - statusCode
        - statusCodeText
        - errorDateTime
        - errors
      properties:
        httpMethod:
          type: string
          example: POST
          x-stoplight:
            id: nqesjdkli0n88
          enum:
            - GET
            - HEAD
            - POST
            - PUT
            - DELETE
            - OPTION
            - PATCH
          description: 'The HTTP method used to make the request e.g. `GET`, `POST`, etc'
        requestUri:
          type: string
          x-stoplight:
            id: cq9morjalvdbp
          description: The URI that was requested.
          example: /v1/events
        statusCode:
          type: integer
          x-stoplight:
            id: g4hqmafsodfk2
          description: The HTTP status code returned.
          format: int32
          example: 400
        statusCodeText:
          type: string
          x-stoplight:
            id: 4g9ee4lnm8ndr
          description: A standard short description corresponding to the HTTP status code.
          example: Bad Request
        statusCodeMessage:
          type: string
          x-stoplight:
            id: y37oiw30a34xl
          description: A long description corresponding to the HTTP status code with additional information.
          example: The supplied data could not be accepted
        providerCorrelationReference:
          type: string
          x-stoplight:
            id: cpmumeeur0y7q
          description: A unique identifier to the HTTP request within the scope of the API provider.
          example: 4426d965-0dd8-4005-8c63-dc68b01c4962
        errorDateTime:
          type: string
          x-stoplight:
            id: agsssg0w9gjxz
          description: 'The DateTime corresponding to the error occuring. Must be formatted using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.'
          example: '2019-11-12T07:41:00+08:30'
          format: date-time
        errors:
          type: array
          x-stoplight:
            id: co6hcjekwf6np
          description: An array of errors provding more detail about the root cause.
          minItems: 1
          items:
            x-stoplight:
              id: dxtftzqn6ycvr
            type: object
            required:
              - errorCodeText
              - errorCodeMessage
            properties:
              errorCode:
                type: integer
                x-stoplight:
                  id: is3ylfiqln8p3
                format: int32
                description: "The detailed error code returned.\r\n\r\n  - `7000-7999` Technical error codes\r\n  - `8000-8999` Functional error codes\r\n  - `9000-9999` API provider-specific error codes            \r\n\r\n[Error codes as specified by DCSA](https://dcsa.atlassian.net/wiki/spaces/DTG/pages/197132308/Standard+Error+Codes)."
                example: 7003
                minimum: 7000
                maximum: 9999
              property:
                type: string
                x-stoplight:
                  id: s9a1zlfgp6om9
                description: The name of the property causing the error.
                example: facilityCode
                maxLength: 100
              value:
                type: string
                x-stoplight:
                  id: 36k41nfzpwgml
                description: The value of the property causing the error serialised as a string exactly as in the original request.
                example: SG SIN WHS
                maxLength: 500
              jsonPath:
                type: string
                x-stoplight:
                  id: ycejgchx3nykr
                description: 'A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).'
                example: $.location.facilityCode
                maxLength: 500
              errorCodeText:
                type: string
                x-stoplight:
                  id: 6ls1lmfv1s7pt
                description: A standard short description corresponding to the `errorCode`.
                example: invalidData
                maxLength: 100
              errorCodeMessage:
                type: string
                x-stoplight:
                  id: nxpiv3cjm85pa
                description: A long description corresponding to the `errorCode` with additional information.
                example: Spaces not allowed in facility code
                maxLength: 200
    Vessel:
      title: Vessel
      x-stoplight:
        id: tt806i006zzws
      type: object
      properties:
        vesselIMONumber:
          type: string
          x-stoplight:
            id: fjb48b1pidv2f
          description: 'The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel.'
          example: '9321483'
          pattern: '^\d{7,8}$'
          minLength: 7
          maxLength: 8
        name:
          type: string
          x-stoplight:
            id: wlbieahe635gh
          description: The name of the Vessel given by the Vessel Operator and registered with IMO.
          example: King of the Seas
          maxLength: 50
          pattern: '^\S(?:.*\S)?$'
        flag:
          type: string
          x-stoplight:
            id: 2c0eed5qm8kfl
          description: The flag of the nation whose laws the vessel is registered under. This is the ISO 3166 two-letter country code.
          pattern: ^\S+$
          maxLength: 2
          example: DE
        callSign:
          type: string
          x-stoplight:
            id: 5e5uf8amgm69h
          description: 'A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a threeletter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.'
          pattern: ^\S+(\s+\S+)*$
          example: NCVV
          maxLength: 10
        operatorCarrierCode:
          type: string
          x-stoplight:
            id: gt79tns823d8t
          description: The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists.
          example: MAEU
          maxLength: 10
        operatorCarrierCodeListProvider:
          type: string
          x-stoplight:
            id: q8osthxexfjaz
          description: Identifies the code list provider used for the operator and partner carriercodes.
          example: NMFTA
          enum:
            - SMDG
            - NMFTA
    Barge:
      title: Barge
      x-stoplight:
        id: gvyiv98c0lpg0
      type: object
      properties:
        vesselIMONumber:
          type: string
          description: 'The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel.'
          example: '9321483'
          pattern: '^\d{7,8}$'
          minLength: 7
          maxLength: 8
        name:
          type: string
          description: The name of the Vessel given by the Vessel Operator and registered with IMO.
          example: King of the Seas
          maxLength: 50
          pattern: '^\S(?:.*\S)?$'
        flag:
          type: string
          description: The flag of the nation whose laws the vessel is registered under. This is the ISO 3166 two-letter country code.
          pattern: ^\S+$
          maxLength: 2
          example: DE
        callSign:
          type: string
          description: 'A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a threeletter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.'
          pattern: ^\S+(\s+\S+)*$
          example: NCVV
          maxLength: 10
        operatorCarrierCode:
          type: string
          description: The carrier who is in charge of the vessel operation based on either the SMDG or SCAC code lists.
          example: MAEU
          maxLength: 10
        operatorCarrierCodeListProvider:
          type: string
          description: Identifies the code list provider used for the operator and partner carriercodes.
          example: NMFTA
          enum:
            - SMDG
            - NMFTA
    RailTransport:
      title: Rail Transport
      x-stoplight:
        id: 1i5n35w6cdkbh
      type: object
      description: Transport mode Rail.
      required:
        - modeOfTransportType
      properties:
        modeOfTransportType:
          x-stoplight:
            id: 1xzl152c5xhau
          enum:
            - RAIL
          description: The mode of transport as defined by DCSA. For the Rail Transport mode this needs to be RAIL.
        railCar:
          type: string
          x-stoplight:
            id: v8mz0l0o5azun
          description: 'A railcar is a type of railway vehicle that is designed to transport freight or passengers on a railway track. They are also known as rail vehicles, railcars, or rolling stock. Railcars can be powered by an on-board locomotive or they can be pulled by a separate locomotive.'
          maxLength: 50
        railService:
          type: string
          x-stoplight:
            id: rfpg5ypsa1xl8
          description: A rail service number is a unique identifying number assigned to a specific rail service or train.
          maxLength: 50
        departureID:
          type: string
          x-stoplight:
            id: jhyomow1zzwnp
          description: A departure ID (also known as a departure reference number) is a unique identifying number or code that is assigned to a specific departure of a rail.
          maxLength: 100
    VesselTransport:
      title: Vessel Transport
      x-stoplight:
        id: ztf6lvsjuqg9r
      type: object
      description: Transport mode Vessel.
      required:
        - modeOfTransportType
      properties:
        modeOfTransportType:
          x-stoplight:
            id: n3xtv20owr5ax
          enum:
            - VESSEL
          description: The mode of transport as defined by DCSA. For the Vessel Transport mode this needs to be VESSEL.
        portVisitReference:
          type: string
          x-stoplight:
            id: sw0d6j8jtkzwu
          example: NLRTM1234589
          maxLength: 50
          pattern: ^\S+(\s+\S+)*$
          description: The unique reference that can be used to link different `transportCallReferences` to the same port visit. The reference is provided by the port to uniquely identify a port call.
        transportCallReference:
          type: string
          x-stoplight:
            id: sebuy5vg09ly5
          example: '987e4567'
          maxLength: 100
          pattern: ^\S+(\s+\S+)*$
          description: A carrier definied reference to a `TransportCall`.\r\n\r\nIn the case the Means of Transport is a `Vessel` and the facility is a `Port/Terminal` - this reference should be considered a Terminal Call Reference.
        carrierServiceName:
          type: string
          x-stoplight:
            id: hu04q8zvlf66f
          description: The name of the service.
          maxLength: 50
          example: Great Lion Service
        carrierServiceCode:
          type: string
          x-stoplight:
            id: f3d7w4eea8clq
          example: FE1
        universalServiceReference:
          type: string
          x-stoplight:
            id: yjaqq2bmymnm1
          description: 'A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: SR\d{5}[A-Z]. The letters SR followed by 5 digits, followed by a checksum-character as a capital letter from A to Z.'
          example: SR12345A
          pattern: '^SR\d{5}[A-Z]$'
          maxLength: 8
        carrierExportVoyageNumber:
          type: string
          x-stoplight:
            id: ah9ausfz1zqnz
          example: 2103N
          maxLength: 50
          description: The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
        universalExportVoyageReference:
          type: string
          x-stoplight:
            id: hxinj5cv4nt6h
          description: 'A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage.'
          pattern: '^\d{2}[0-9A-Z]{2}[NEWSR]$'
          example: 2103N
        carrierImportVoyageNumber:
          type: string
          x-stoplight:
            id: xglpcq7gbmdo8
          maxLength: 50
          example: 2103S
          description: The identifier of an import voyage. The carrier-specific identifier of the import Voyage.
        universalImportVoyageReference:
          type: string
          x-stoplight:
            id: 1nm9llr3napxi
          description: 'A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage.'
          pattern: '^\d{2}[0-9A-Z]{2}[NEWSR]$'
          example: 2103N
        vessel:
          $ref: '#/components/schemas/Vessel'
    BargeTransport:
      title: Barge Transport
      x-stoplight:
        id: i76bnx3fr61wu
      type: object
      description: Transport mode Barge.
      required:
        - modeOfTransportType
      properties:
        modeOfTransportType:
          enum:
            - BARGE
          description: The mode of transport as defined by DCSA. For the Barge Transport mode this needs to be BARGE.
        portVisitReference:
          type: string
          example: NLRTM1234589
          maxLength: 50
          pattern: ^\S+(\s+\S+)*$
          description: The unique reference that can be used to link different `transportCallReferences` to the same port visit. The reference is provided by the port to uniquely identify a port call.
        transportCallReference:
          type: string
          example: '987e4567'
          maxLength: 100
          pattern: ^\S+(\s+\S+)*$
          description: A carrier definied reference to a `TransportCall`.\r\n\r\nIn the case the Means of Transport is a `Vessel` and the facility is a `Port/Terminal` - this reference should be considered a Terminal Call Reference.
        carrierServiceName:
          type: string
          description: The name of the service.
          maxLength: 50
          example: Great Lion Service
        carrierServiceCode:
          type: string
          example: FE1
        universalServiceReference:
          type: string
          description: 'A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: SR\d{5}[A-Z]. The letters SR followed by 5 digits, followed by a checksum-character as a capital letter from A to Z.'
          example: SR12345A
          pattern: '^SR\d{5}[A-Z]$'
          maxLength: 8
        carrierExportVoyageNumber:
          type: string
          example: 2103N
          maxLength: 50
          description: The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
        universalExportVoyageReference:
          type: string
          description: 'A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage.'
          pattern: '^\d{2}[0-9A-Z]{2}[NEWSR]$'
          example: 2103N
        carrierImportVoyageNumber:
          type: string
          maxLength: 50
          example: 2103S
          description: The identifier of an import voyage. The carrier-specific identifier of the import Voyage.
        universalImportVoyageReference:
          type: string
          description: 'A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage.'
          pattern: '^\d{2}[0-9A-Z]{2}[NEWSR]$'
          example: 2103N
        barge:
          $ref: '#/components/schemas/Barge'
    TruckTransport:
      title: Truck Transport
      x-stoplight:
        id: wk5bv2x6qf7r8
      type: object
      description: Transport mode Truck.
      required:
        - modeOfTransportType
      properties:
        modeOfTransportType:
          x-stoplight:
            id: zta37a83ipubo
          enum:
            - TRUCK
          description: The mode of transport as defined by DCSA. For the Truck Transport mode this needs to be TRUCK.
        licensePlate:
          type: string
          x-stoplight:
            id: 70ltreyqhy5tu
          description: 'A license plate is a tag that is attached to a vehicle and displays a unique number or code assigned to the vehicle. The format, design, and issuing authority for license plates vary by country, state, and province.'
          maxLength: 15
        chasisLicensePlate:
          type: string
          x-stoplight:
            id: yl83mtk9qd9j7
          description: A chassis number is a unique identifying number or code assigned to the chassis of a vehicle.It may also be referred to as a "vehicle identification number" (VIN) or "frame number.
          maxLength: 15
    CombinedTransport:
      title: Combined Transport
      x-stoplight:
        id: 9epz3n74vupyr
      type: object
      description: Combined Transport mode.
      required:
        - modeOfTransportType
      properties:
        modeOfTransportType:
          x-stoplight:
            id: qezsxdt0llmco
          enum:
            - RAIL_TRUCK
            - BARGE_TRUCK
            - BARGE_RAIL
            - MULTIMODAL
          description: "The mode of transport as defined by DCSA. For the Combined Transport mode this needs to be one of the below options.\r\n\r\n- `RAIL_TRUCK`\r\n- `BARGE_TRUCK`\r\n- `BARGE_RAIL`\r\n- `MULTIMODAL`"
  parameters:
    Api-Version-Major:
      in: header
      name: API-Version
      required: false
      schema:
        type: string
        example: '1'
      description: |
        An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
tags:
  - name: Point To Point
    description: ' '
  - name: Port Schedule
    description: ' '
  - name: Vessel Schedule
    description: ' '
