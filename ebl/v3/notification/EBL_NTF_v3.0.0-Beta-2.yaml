openapi: 3.0.3
info:
  version: 3.0.0-Beta-2
  title: DCSA OpenAPI specification for Electronic Bill of Lading Notifications
  description: >
    API specification issued by DCSA.org.


    Electronic Bill of Lading Notifications for [DCSA OpenAPI specification for
    Electronic Bill of
    Lading](https://app.swaggerhub.com/apis/dcsaorg/DCSA_EBL/3.0.0-Beta-2) is a
    lightweight notification based on [CloudEvents](https://cloudevents.io/).
    The `POST` endPoint of the consumer is called whenever a `Shipping
    Instructions` or a `Transport Document` that is being subscribed to changes
    state.


    Subscribing to notification is done outside scope of this API.


    ### Stats API

    The Stats API offers crucial statistical information for both API providers
    and consumers to enhance their services and helps DCSA to understand and
    scale the ecosystem. We expect you to invoke the Stats API for every request
    made to the Electronic Bill of Lading Notification API. Further details can
    be found
    [here](https://labs.dcsa.org/#/http/guides/api-guides/stats-api/introduction)


    For a changelog please click
    [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/ebl/notification/v3#v300B2).
    Please also [create a GitHub
    issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any
    questions/comments.
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: 'https://dcsa.org'
    email: info@dcsa.org
tags:
  - name: Notifications
    description: Notification operations
servers:
  - url: 'http://localhost:3000'
paths:
  /v3/shipping-instructions-notifications:
    post:
      tags:
        - Notifications
      summary: Send a new Shipping Instructions Notification
      operationId: shipping-instructions-notifications
      description: >
        Creates a new [`Shipping Instructions
        Notification`](#/ShippingInstructionsNotification). This endPoint is
        called whenever a `Shipping Instructions` that a cosumer has subscribed
        to changes state or is updated.
      parameters:
        - name: API-Version
          in: header
          description: >
            An API-Version header **MUST** be provided to the request
            (mandatory). The header **MUST** be a [SemVer](https://semver.org/)
            specifying the provider (the calling party) API version.
          required: true
          schema:
            type: string
            example: 3.0.0-Beta-2
      requestBody:
        description: >
          The payload used to create a [`Shipping Instructions
          Notification`](#/ShippingInstructionsNotification)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingInstructionsNotification'
            examples:
              receivedExample:
                summary: |
                  Shipping Instructions request received
                description: >
                  A notification explaining that a new `Shipping Instructions`
                  has been received and stored in provider system
                  (`shippingInstructionsStatus='RECEIVED'`).
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.shipping-instructions-notification.v3
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  data:
                    shippingInstructionsStatus: RECEIVED
                    shippingInstructionsReference: e0559d83-00e2-438e-afd9-fdd610c1a008
              declinedExample:
                summary: |
                  Shipping Instructions update declined
                description: >
                  A notification explaining that an update to a `Shipping
                  Instructions`, that was pending an update by the consumer
                  (`shippingInstructionsStatus='PENDING UPDATE'`), has been
                  declined (`updatedShippingInstructionsStatus='UPDATE
                  DECLINED'`)
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.shipping-instructions-notification.v3
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  data:
                    shippingInstructionsStatus: PENDING UPDATE
                    updatedShippingInstructionsStatus: UPDATE DECLINED
                    shippingInstructionsReference: e0559d83-00e2-438e-afd9-fdd610c1a008
      responses:
        '204':
          description: |
            No Content
          headers:
            API-Version:
              description: >
                [SemVer](https://semver.org/) used to indicate the version of
                the consumer (the responding party). This is optional to
                provide.
              schema:
                type: string
                example: 3.0.0-Beta-2
  /v3/transport-document-notifications:
    post:
      tags:
        - Notifications
      summary: Send a new Transport Document Notification
      operationId: transport-document-notifications
      description: >
        Creates a new [`Transport Document
        Notification`](#/TransportDocumentNotification). This endPoint is called
        whenever a `Transport Document` that a cosumer has subscribed to changes
        state or is updated.
      parameters:
        - name: API-Version
          in: header
          description: >
            An API-Version header **MUST** be provided to the request
            (mandatory). The header **MUST** be a [SemVer](https://semver.org/)
            specifying the provider (the calling party) API version.
          required: true
          schema:
            type: string
            example: 3.0.0-Beta-2
      requestBody:
        description: >
          The payload used to create a [`Transport Document
          Notification`](#/TransportDocumentNotification)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransportDocumentNotification'
            examples:
              draftExample:
                summary: |
                  Transport Document Draft created
                description: >
                  A notification explaining that a new `Draft Transport
                  Document` has been created and stored in provider system
                  (`transportDocumentStatus='DRAFT'`).
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.transport-document-notification.v3
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  data:
                    transportDocumentStatus: DRAFT
                    transportDocumentReference: HHL71800000
              issuedExample:
                summary: |
                  Transport Document has been issued
                description: >
                  A notification explaining that a `Transport Document` has been
                  issued (`transportDocumentStatus='ISSUED'`)
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.transport-document-notification.v3
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  data:
                    transportDocumentStatus: ISSUED
                    transportDocumentReference: HHL71800000
      responses:
        '204':
          description: |
            No Content
          headers:
            API-Version:
              description: >
                [SemVer](https://semver.org/) used to indicate the version of
                the consumer (the responding party). This is optional to
                provide.
              schema:
                type: string
                example: 3.0.0-Beta-2
components:
  schemas:
    ShippingInstructionsNotification:
      type: object
      title: Shipping Instructions Notification
      description: |
        `CloudEvent` specific properties for the `Notification`.
      properties:
        specversion:
          type: string
          description: >
            The version of the CloudEvents specification which the event uses.
            This enables the interpretation of the context. Compliant event
            producers MUST use a value of `1.0` when referring to this version
            of the specification.


            Currently, this attribute will only have the 'major' and 'minor'
            version numbers included in it. This allows for 'patch' changes to
            the specification to be made without changing this property's value
            in the serialization. Note: for 'release candidate' releases a
            suffix might be used for testing purposes.
          enum:
            - '1.0'
          example: '1.0'
        id:
          type: string
          maxLength: 100
          description: >
            Identifies the event. Producers MUST ensure that `source` + `id` is
            unique for each distinct event. If a duplicate event is re-sent
            (e.g. due to a network error) it MAY have the same `id`. Consumers
            MAY assume that Events with identical `source` and `id` are
            duplicates.
          example: 3cecb101-7a1a-43a4-9d62-e88a131651e2
        source:
          type: string
          maxLength: 4096
          description: >
            Identifies the context in which an event happened. Often this will
            include information such as the type of the event source, the
            organization publishing the event or the process that produced the
            event. The exact syntax and semantics behind the data encoded in the
            URI is defined by the event producer.


            Producers MUST ensure that `source` + `id` is unique for each
            distinct event.


            An application MAY assign a unique `source` to each distinct
            producer, which makes it easy to produce unique IDs since no other
            producer will have the same source. The application MAY use UUIDs,
            URNs, DNS authorities or an application-specific scheme to create
            unique `source` identifiers.


            A source MAY include more than one producer. In that case the
            producers MUST collaborate to ensure that `source` + `id` is unique
            for each distinct event.
          example: 'https://member.com/'
        type:
          type: string
          description: >
            This attribute contains a value describing the type of event related
            to the originating occurrence. Often this attribute is used for
            routing, observability, policy enforcement, etc. The format of this
            is producer defined and might include information such as the
            version of the type - see [Versioning of CloudEvents in the
            Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents)
            for more information.
          enum:
            - org.dcsa.shipping-instructions-notification.v3
          example: org.dcsa.shipping-instructions-notification.v3
        time:
          type: string
          format: date-time
          description: >
            Timestamp of when the occurrence happened. If the time of the
            occurrence cannot be determined then this attribute MAY be set to
            some other time (such as the current time) by the CloudEvents
            producer, however all producers for the same `source` MUST be
            consistent in this respect. In other words, either they all use the
            actual time of the occurrence or they all use the same algorithm to
            determine the value used.
          example: '2018-04-05T17:31:00Z'
        datacontenttype:
          type: string
          description: >
            Content type of `data` value. This attribute enables `data` to carry
            any type of content, whereby format and encoding might differ from
            that of the chosen event format. For example, an event rendered
            using the [JSON envelope](formats/json-format.md#3-envelope) format
            might carry an XML payload in `data`, and the consumer is informed
            by this attribute being set to "application/xml". The rules for how
            `data` content is rendered for different `datacontenttype` values
            are defined in the event format specifications; for example, the
            JSON event format defines the relationship in [section
            3.1](formats/json-format.md#31-handling-of-data).


            For some binary mode protocol bindings, this field is directly
            mapped to the respective protocol's content-type metadata property.
            Normative rules for the binary mode and the content-type metadata
            mapping can be found in the respective protocol.


            In some event formats the `datacontenttype` attribute MAY be
            omitted. For example, if a JSON format event has no
            `datacontenttype` attribute, then it is implied that the `data` is a
            JSON value conforming to the "application/json" media type. In other
            words: a JSON-format event with no `datacontenttype` is exactly
            equivalent to one with `datacontenttype="application/json"`.


            When translating an event message with no `datacontenttype`
            attribute to a different format or protocol binding, the target
            `datacontenttype` SHOULD be set explicitly to the implied
            `datacontenttype` of the source.
          enum:
            - application/json
          example: application/json
        data:
          type: object
          description: |
            `Shipping Instructions` specific properties for the `Notification`
          properties:
            shippingInstructionsStatus:
              type: string
              maxLength: 50
              description: >
                The status of the `Shipping Instructions`. Possible values are:

                - `RECEIVED` (Shipping Instructions has been received)

                - `PENDING UPDATE` (An update is required to the Shipping
                Instructions)

                - `COMPLETED` (The Shipping Instructions can no longer be
                modified - the related Transport Document has been surrendered
                for delivery)


                More details can be found on
                [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/eblstatuses.csv).
              example: RECEIVED
            updatedShippingInstructionsStatus:
              type: string
              maxLength: 50
              description: >
                The status of latest update to the `Shipping Instructions`. If
                no update has been requested - then this property is empty.
                Possible values are:

                - `UPDATE RECEIVED` (An update to a Shipping Instructions has
                been recieved and is awaiting to be processed)

                - `UPDATE CONFIRMED` (Update is confirmed)

                - `UPDATE CANCELLED` (An update to a Shipping Instructions is
                discontinued by consumer)

                - `UPDATE DECLINED` (An update to a Shipping Instructions is
                discontinued by provider)


                More details can be found on
                [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/eblstatuses.csv).
              example: UPDATE RECEIVED
            shippingInstructionsReference:
              type: string
              pattern: ^\S+(\s+\S+)*$
              maxLength: 100
              description: >
                The identifier for a `Shipping Instruction` provided by the
                carrier for system purposes.


                **Conditional:** `shippingInstructionReference` and/or
                `transportDocumentReference` is required to provide
              example: e0559d83-00e2-438e-afd9-fdd610c1a008
            transportDocumentReference:
              type: string
              pattern: ^\S+(\s+\S+)*$
              maxLength: 20
              description: >
                A unique number allocated by the shipping line to the transport
                document and the main number used for the tracking of the status
                of the shipment.


                **Conditional:** `shippingInstructionReference` and/or
                `transportDocumentReference` is required to provide
              example: HHL71800000
            reason:
              type: string
              maxLength: 5000
              description: >
                This property can be used to explain
                `shippingInstructionStatus`.
              example: Selected vessel is overbooked - please update VesselName
          required:
            - shippingInstructionsStatus
      required:
        - specversion
        - id
        - source
        - type
        - time
        - datacontenttype
        - data
    TransportDocumentNotification:
      type: object
      title: Transport Document Notification
      description: |
        `CloudEvent` specific properties for the `Notification`.
      properties:
        specversion:
          type: string
          description: >
            The version of the CloudEvents specification which the event uses.
            This enables the interpretation of the context. Compliant event
            producers MUST use a value of `1.0` when referring to this version
            of the specification.


            Currently, this attribute will only have the 'major' and 'minor'
            version numbers included in it. This allows for 'patch' changes to
            the specification to be made without changing this property's value
            in the serialization. Note: for 'release candidate' releases a
            suffix might be used for testing purposes.
          enum:
            - '1.0'
          example: '1.0'
        id:
          type: string
          maxLength: 100
          description: >
            Identifies the event. Producers MUST ensure that `source` + `id` is
            unique for each distinct event. If a duplicate event is re-sent
            (e.g. due to a network error) it MAY have the same `id`. Consumers
            MAY assume that Events with identical `source` and `id` are
            duplicates.
          example: 3cecb101-7a1a-43a4-9d62-e88a131651e2
        source:
          type: string
          maxLength: 4096
          description: >
            Identifies the context in which an event happened. Often this will
            include information such as the type of the event source, the
            organization publishing the event or the process that produced the
            event. The exact syntax and semantics behind the data encoded in the
            URI is defined by the event producer.


            Producers MUST ensure that `source` + `id` is unique for each
            distinct event.


            An application MAY assign a unique `source` to each distinct
            producer, which makes it easy to produce unique IDs since no other
            producer will have the same source. The application MAY use UUIDs,
            URNs, DNS authorities or an application-specific scheme to create
            unique `source` identifiers.


            A source MAY include more than one producer. In that case the
            producers MUST collaborate to ensure that `source` + `id` is unique
            for each distinct event.
          example: 'https://member.com/'
        type:
          type: string
          description: >
            This attribute contains a value describing the type of event related
            to the originating occurrence. Often this attribute is used for
            routing, observability, policy enforcement, etc. The format of this
            is producer defined and might include information such as the
            version of the type - see [Versioning of CloudEvents in the
            Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents)
            for more information.
          enum:
            - org.dcsa.transport-document-notification.v3
          example: org.dcsa.transport-document-notification.v3
        time:
          type: string
          format: date-time
          description: >
            Timestamp of when the occurrence happened. If the time of the
            occurrence cannot be determined then this attribute MAY be set to
            some other time (such as the current time) by the CloudEvents
            producer, however all producers for the same `source` MUST be
            consistent in this respect. In other words, either they all use the
            actual time of the occurrence or they all use the same algorithm to
            determine the value used.
          example: '2018-04-05T17:31:00Z'
        datacontenttype:
          type: string
          description: >
            Content type of `data` value. This attribute enables `data` to carry
            any type of content, whereby format and encoding might differ from
            that of the chosen event format. For example, an event rendered
            using the [JSON envelope](formats/json-format.md#3-envelope) format
            might carry an XML payload in `data`, and the consumer is informed
            by this attribute being set to "application/xml". The rules for how
            `data` content is rendered for different `datacontenttype` values
            are defined in the event format specifications; for example, the
            JSON event format defines the relationship in [section
            3.1](formats/json-format.md#31-handling-of-data).


            For some binary mode protocol bindings, this field is directly
            mapped to the respective protocol's content-type metadata property.
            Normative rules for the binary mode and the content-type metadata
            mapping can be found in the respective protocol.


            In some event formats the `datacontenttype` attribute MAY be
            omitted. For example, if a JSON format event has no
            `datacontenttype` attribute, then it is implied that the `data` is a
            JSON value conforming to the "application/json" media type. In other
            words: a JSON-format event with no `datacontenttype` is exactly
            equivalent to one with `datacontenttype="application/json"`.


            When translating an event message with no `datacontenttype`
            attribute to a different format or protocol binding, the target
            `datacontenttype` SHOULD be set explicitly to the implied
            `datacontenttype` of the source.
          enum:
            - application/json
          example: application/json
        data:
          type: object
          description: |
            `Transport Document` specific properties for the `Notification`
          properties:
            transportDocumentStatus:
              type: string
              maxLength: 50
              description: >
                The status of the `Transport Document`. Possible values are:

                - `DRAFT` (Transport Document is Drafted)

                - `APPROVED` (Transport Document has been Approved by consumer)

                - `ISSUED` (Transport Document has been Issued by provider)

                - `PENDING SURRENDER FOR AMENDMENT` (Transport Document is
                Pending for Surrender for an Amendment)

                - `SURRENDER FOR AMENDMENT` (Transport Document Surrendered for
                an Amendment)

                - `VOID` (the Transport Document has been Voided)

                - `PENDING SURRENDER FOR DELIVERY` (Transport Document pending
                surrender for Delivery)

                - `SURRENDERED FOR DELIVERY` (Transport Document surrendered for
                Delivery)


                More details can be found on
                [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/eblstatuses.csv).
              example: DRAFT
            shippingInstructionsReference:
              type: string
              pattern: ^\S+(\s+\S+)*$
              maxLength: 100
              description: >
                The identifier for a `Shipping Instruction` provided by the
                carrier for system purposes.
              example: e0559d83-00e2-438e-afd9-fdd610c1a008
            transportDocumentReference:
              type: string
              pattern: ^\S+(\s+\S+)*$
              maxLength: 20
              description: >
                A unique number allocated by the shipping line to the transport
                document and the main number used for the tracking of the status
                of the shipment.
              example: HHL71800000
            reason:
              type: string
              maxLength: 5000
              description: |
                This property can be used to explain Transport Document Status.
              example: Voided because a new Transport Document has been issued
          required:
            - transportDocumentStatus
            - transportDocumentReference
      required:
        - specversion
        - id
        - source
        - type
        - time
        - datacontenttype
        - data
