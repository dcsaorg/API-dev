openapi: 3.0.3
info:
  version: 3.0.0-Beta-2
  title: DCSA OpenAPI specification for Electronic Bill of Lading
  description: |
    API specification issued by DCSA.org.

    For explanation of specific values or objects please refer to the [Information Model v2024.Q1](https://dcsa-website.cdn.prismic.io/dcsa-website/ZhlC9TjCgu4jzyW5_20240402-DCSA-Information-Model-2024.Q1-ReleaseCandidate_01.pdf). This API specification does not define the allowable updates and their timing in accordance with the established business rules. Refer to the [DCSA Interface Standard for the Bill of Lading 3.0 Beta 2](https://dcsa.org/standards/bill-of-lading/documentation-bill-of-lading-3-beta-2) to address this. **All use cases mentioned in this API specification refer to use cases defined in the eBL IFS**.

    All other documents related to the Electronic Bill of Lading publication can be found [here](https://dcsa.org/standards/ebill-of-lading/)

    It is possible to use the eBL API as a standalone API. In that case use one of the poll endPoints:

        GET /v3/shipping-instructions/{documentReference}  # For Shipping Instructions status
        GET /v3/transport-documents/{transportDocumentReference}  # For Transport Document status

    in order to poll information about status changes.

    ### Notifications
    It is possible to have notifications pushed to you whenever the provider needs input and/or a state change. The format of the notification is defined by the [Electronic Bill of Lading Notification API](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_EBL_NTF/3.0.0-Beta-2). Signing up for notifications is defined outside the scope of this API specification.

    ### Stats API
    The Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to the Electronic Bill of Lading API. Further details can be found [here](https://labs.dcsa.org/#/http/guides/api-guides/stats-api/introduction)

    For a changelog, please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/ebl/v3#v300B2). Please [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: 'https://dcsa.org'
    email: info@dcsa.org
tags:
  - name: Shipping Instructions
    description: |
      The Shipping Instructions
  - name: Transport Document
    description: |
      The Transport Document
paths:
  ##############################
  # Shipping Instructions Request
  ##############################
  /v3/shipping-instructions:
    post:
      tags:
        - Shipping Instructions
      summary: |
        Creates a Shipping Instructions
      operationId: create-shipping-instructions
      description: |
        Creates a new `Shipping Instructions`. This endPoint corresponds with **UseCase 1 - Submit Shipping Instructions**.

        ## Precondition
        The consumer has information for a `Shipping Instructions`. The empty equipment has been released to the shipper. The `Booking` is in state `CONFIRMED`.

        ## Postcondition
        The provider has received the `Shipping Instructions`.

        The consumer will receive a `201` (Created) if the payload schema validates or a `400` (Bad Request) if it does not.

        ## Flow
        The following occurs when a provider receives a `Shipping Instructions`:
        1. The payload (`Shipping Instructions`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.

           **The process stops here!**

        2. The payload is schema-valid which means:
            - all required properties are provided.
            - all values provided have correct data type.

           A `shippingInstructionsReference` (as a reference to the `Shipping Instructions`) is created and stored along with the payload in the provider system.
          
           **For the rest of this description and in all examples the value `si-123` will be used as `shippingInstructionsReference`**

        3. A `201` (Created) response is returned with the following payload:
            ```
            {
              shippingInstructionsReference: 'si-123',
              shippingInstructionsStatus: 'RECEIVED'
            }
            ```
        4. All '_relevant_' subscribers will be notified via a [Shipping Instructions Notification](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_EBL_NTF/3.0.0-Beta-2#/Notifications/shipping-instructions-notifications).

        For `POST` `Shipping Instructions` the process ends here. The `Shipping Instructions`

          - is now stored in the provider system
          - has status `RECEIVED`
          - awaits further processing by the provider
          - a `201` (Created) response is sent to the consumer with a payload containing `documentStatus=RECEIVED`
          - '_relevant_' subscribers have been notified.

        The provider wil now start asynchronous processing. Once processed, the new status of the `Shipping Instructions` will be communicated via a `Shipping Instructions Notification`. In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the

            GET /v3/shipping-instructions/{documentReference}
            
          endPoint to check if the `shippingInstructionsStatus` of the `Shipping Instructions` has changed.
      parameters:
        - $ref: '#/components/parameters/Api-Version-Major'
      requestBody:
        description: |
          Parameters used to create the `Shipping Instructions`
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateShippingInstructions'
            examples:
              regularSTDExample:
                summary: |
                  Create a Shipping Instructions
                description: |
                  A new `Shipping Instructions` with standard Dry cargo: `Black shoes`. The shoes are packed in 400 `Fibreboard boxes` and stuffed inside a single container (`NARU3472484`). The shipment has been booked via `carrierBookingReference` = `CBR_123_REGULAR`

                  The `Shipping Instructions` now awaits the provider to `DRAFT` a `Transport Document`.
                value:
                  transportDocumentTypeCode: BOL
                  isShippedOnBoardType: true
                  freightPaymentTermCode: PRE
                  isElectronic: true
                  isToOrder: true
                  invoicePayableAt:
                    UNLocationCode: DKAAR
                  partyContactDetails:
                    - name: DCSA test person
                      email: no-reply@dcsa.example.org
                  documentParties:
                    shipper:
                      partyName: DCSA CTK
                      displayedAddress:
                        - Strawinskylaan 4117
                      partyContactDetails:
                        - name: DCSA test person
                          email: no-reply@dcsa.example.org
                  consignmentItems:
                    - carrierBookingReference: CBR_123_REGULAR
                      descriptionOfGoods: 'Shoes - black'
                      HSCodes:
                        - '640510'
                      commoditySubreference: RegSubRef001
                      cargoItems:
                        - equipmentReference: NARU3472484
                          weight: 12000
                          weightUnit: KGM
                          outerPackaging:
                            numberOfPackages: 400
                            packageCode: 4G
                            description: Fibreboard boxes
                  utilizedTransportEquipments:
                    - isShipperOwned: false
                      seals:
                        - number: DCSA-CTK-1234
                      equipmentReference: NARU3472484
      responses:
        '201':
          description: |
            The `Shipping Instructions` has been successfully created in the provider system. The status of the `Shipping Instructions` is now `RECEIVED`. The consumer is now awaiting provider to process the `Shipping Instructions` asynchronously.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingInstructionsRefStatus'
              examples:
                receExample:
                  summary: |
                    Shipping Instructions received
                  description: |
                    A `Shipping Instructions` has been received (`shippingInstructionsStatus='RECEIVED'`), schema validated and stored in provider system
                  value:
                    shippingInstructionsReference: si-123
                    shippingInstructionsStatus: RECEIVED
        '400':
          description: |
            In case the `Shipping Instructions` does not schema validate a `400` (Bad Request) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Shipping Instructions missing isElectronic
                  description: |
                    `isElectronic` is a mandatory property in the `Shipping Instructions`. In case this property is missing an error objet is created.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: POST
                    requestUri: /v3/shipping-instructions
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: isElectronic not found - it is a mandatory property in Shipping Instructions
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-10-03T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        property: isElectronic
                        errorCodeText: mandatory property missing
                        errorCodeMessage: isElectronic must be provided as part of a Shipping Instructions
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Shipping Instructions
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: POST
                    requestUri: /v3/shipping-instructions
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Booking request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Shipping Instructions
                  description: |
                    Calling the endPoint

                        POST /v3/shipping-instructions
                        
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: POST
                    requestUri: /v3/shipping-instructions
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    statusCodeMessage: Too many request to create a Shipping Instructions has been requested. Please try again in 1 hour
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Max Shipping Instructions reached
                        errorCodeMessage: A maximum of 10 Shipping Instructions can be created per hour
  '/v3/shipping-instructions/{documentReference}':
    put:
      tags:
        - Shipping Instructions
      summary: |
        Updates the Shipping Instructions
      operationId: update-shipping-instructions
      parameters:
        - $ref: '#/components/parameters/documentReference'
        - $ref: '#/components/parameters/Api-Version-Major'
      description: |
        Updates the `Shipping Instructions` with the `documentReference`. The path can contain either a `shippingInstructionsReference` or a `transportDocumentReference`. This endPoint corresponds with **UseCase 3 - Submit updated Shipping Instructions**

        ### Precondition
        In order to update a `Shipping Instructions`, the status of the `Shipping Instructions` needs to be in state:

        - `RECEIVED` in case the consumer has updated information for the `Shipping Instructions`
        - `PENDING UPDATE` in case the provider has requested the consumer to update the `Shipping Instructions` (a result of **UseCase 2 - Request to update Shipping Instructions**)

        ## Postcondition
        The provider has received an update to the `Shipping Instructions` (**UseCase 3 - Submit updated Shipping Instructions**), from now on called the `Updated Shipping Instructions`.

        The `Updated Shipping Instructions` and the "original" `Shipping Instructions` **co-exist** until a new update is submitted by the consumer (via **UseCase 3: Submit updated Shipping Instructions**) or until the provider requests an update (sets the `shippingInstructionsStatus='PENDING UPDATE'` via **UseCase 2: Request to update Shipping Instructions**). The `Updated Shipping Instructions` always represents the latest version of an update received by the provider.

        The consumer will receive a `200` (OK) if the payload schema-validates or a `400` (Bad Request) if it does not.

        ## Flow
        The following occurs when a provider receives an **update** to a `Shipping Instructions`
        1. The payload (`Updated Shipping Instructions`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.

           **The process stops here!**
        2. The payload is schema-valid which means:
            - all required properties are provided
            - all values provided have correct data type.
          
            The `Updated Shipping Instructions` is stored in the provider system alongside the "original" `Shipping Instructions`.

           **For the rest of this description and in all examples the value `si-123` will be used as `shippingInstructionsReference`**

        3. The response depends on which use case is the reason for calling this endPoint (what the `shippingInstructionsStatus` is):

            - If `shippingInstructionsStatus` **is** `RECEIVED`, then this endPoint is being used in addition to **UseCase 1 - Submit Shipping Instructions**. In this case the consumer would like to make an update to an already sent `Shipping Instructions`. This is done via **UseCase 3 - Submit updated Shipping Instructions**. The `shippingInstructionsStatus` stays as `RECEIVED`, `updatedShippingInstructionsStatus` is set to `UPDATE RECEIVED`
            
              A `200` (OK) response corresponding to the following payload is returned:
              ```
              {
                shippingInstructionsReference: 'si-123',
                shippingInstructionsStatus: 'RECEIVED',
                updatedShippingInstructionsStatus: 'UPDATE RECEIVED'
              }
              ```

            - If `shippingInstructionsStatus` is `PENDING UPDATE`, then this endPoint is being used as a response to **UseCase 2 - Request to update Shipping Instructions** in this case the provider has requested an update to a `Shipping Instructions`. The `shippingInstructionsStatus` remains `PENDING UPDATE`, `updatedShippingInstructionsStatus` is set to `UPDATE RECEIVED`.
              
              A `200` (OK) response corresponding to the following payload is returned:
              ```
              {
                shippingInstructionsReference: 'si-123',
                shippingInstructionsStatus: 'PENDING UPDATE',
                updateShippingInstructionsStatus: 'UPDATE RECEIVED'
              }
              ```
        4. All '_relevant_' subscribers will be notified via a [Shipping Instructions Notification](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_EBL_NTF/3.0.0-Beta-2#/Notifications/shipping-instructions-notifications).

        For `PUT` `Shipping Instructions` the process ends here. The `Updated Shipping Instructions`

          - is now stored in the provider system
          - a `200` (OK) response is sent to the consumer with the status of the `Shipping Instructions` and the `Updated Shipping Instructions` with one of the following combinations (depending on the use case):
            - `shippingInstructionsStatus='RECEIVED'` and `updateShippingInstructionsStatus='UPDATE RECEIVED'` (if endPoint used to make an update to a Submitted Shipping Instructions - **UseCase 1 - Submit Shipping Instructions**)
            - `shippingInstructionsStatus='PENDING UPDATE'` and `updatedShippingInstructionsStatus='UPDATE RECEIVED'` (if endPoint used as a response to **UseCase 2 - Request to update Shipping Instructions**)
          - awaits further processing by the provider
          - '_relevant_' subscribers have been notified.

        The provider wil now start asynchronous processing. Once processed, the new status of the `Shipping Instructions` and `Updated Shipping Instructions` will be communicated via a `Shipping Instructions Notification`. In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the

            GET /v3/shipping-instructions/{documentReference}
            
          endPoint to check if the `shippingInstructionsStatus` and `updatedShippingInstructionsStatus` of the `Shipping Instructions` has changed.
          
          If the consumer wants to get the content of the `Update Shipping Instructions` provided via this `PUT` endPoint,  the `GET` endPoint needs to be used in combination with the `?updatedContent=true` queryParameter:
          
            GET /v3/shipping-instructions/{documentReference}?updatedContent=true
            
          It is possible to `GET` the content of the `Updated Shipping Instructions` via the example above until either:
          - the provider requests for a new update (**UseCase 2: Request to update Shipping Instructions**) in which case the "old update" is no longer accessible
          - the consumer submits a new update (**UseCase 3: Submit updated Shipping Instructions**) in which case the "new update" provided **replaces** the "old update".
      requestBody:
        description: |
          Parameters used to update the `Shipping Instructions`
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateShippingInstructions'
            examples:
              regularSTDExample:
                summary: |
                  Update Shipping Instructions
                description: |
                  An update for a `Shipping Instructions` with standard Dry cargo. The `Shipping Instructions` update now wait to be confirmed by the provider.
                value:
                  shippingInstructionsReference: fc5009a7-25ad-4bb0-9892-4e2dea6bcdd9
                  transportDocumentTypeCode: BOL
                  isShippedOnBoardType: true
                  freightPaymentTermCode: PRE
                  isElectronic: true
                  isToOrder: true
                  invoicePayableAt:
                    UNLocationCode: DKAAR
                  partyContactDetails:
                    - name: DCSA test person
                      email: no-reply@dcsa.example.org
                  documentParties:
                    shipper:
                      partyName: DCSA CTK
                      displayedAddress:
                        - Strawinskylaan 4117
                      partyContactDetails:
                        - name: DCSA test person
                          email: no-reply@dcsa.example.org
                  consignmentItems:
                    - carrierBookingReference: CBR_123_REGULAR
                      descriptionOfGoods: 'Shoes - black'
                      HSCodes:
                        - '640510'
                      commoditySubreference: RegSubRef001
                      cargoItems:
                        - equipmentReference: NARU3472484
                          weight: 12000
                          weightUnit: KGM
                          outerPackaging:
                            numberOfPackages: 400
                            packageCode: 4G
                            description: Fibreboard boxes
                  utilizedTransportEquipments:
                    - isShipperOwned: false
                      seals:
                        - number: DCSA-CTK-1234
                      equipmentReference: NARU3472484
      responses:
        '200':
          description: |
            The `Updated Shipping Instructions` has been successfully stored in the provider system with one of the following combinations (depending on the use case):
            - `shippingInstructionsStatus='RECEIVED'` and `updateShippingInstructionsStatus='UPDATE RECEIVED'` (if endPoint is used to make an update to a Submitted Shipping Instructions - **UseCase 1 - Submit Shipping Instructions**)
            - `shippingInstructionsStatus='PENDING UPDATE'` and `updatedShippingInstructionsStatus='UPDATE RECEIVED'` (if endPoint is used as a response to **UseCase 2 - Request to update Shipping Instructions**)

            The status of the `Updated Shipping Instructions` can be monitored on the

                GET /v3/shipping-instructions/{documentReference}

            endPoint where the "original" `Shipping Instructions` is returned by the consumer.

            If the consumer wants to get the content of the `Update Shipping Instructions`  the `GET` endPoint needs to be used in combination with the `?updatedContent=true` queryParameter:

                GET /v3/shipping-instructions/{documentReference}?updatedContent=true
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingInstructionsRefStatus'
              examples:
                receivedExample:
                  summary: |
                    Shipping Instructions updated by consumer
                  description: |
                    An `Updated Shipping Instructions` is received and stored in provider system, the `Updated Shipping Instructions` now awaits provider action.

                        shippingInstructionsStatus='RECEIVED'
                        updatedShippingInstructionsStatus='UPDATE RECEIVED'
                  value:
                    shippingInstructionsReference: si-123
                    shippingInstructionsStatus: RECEIVED
                    updatedShippingInstructionsStatus: UPDATE RECEIVED
                pendingUpdateExample:
                  summary: |
                    Shipping Instructions updated because of consumer requirement
                  description: |
                    An updated `Shipping Instructions` received and stored in provider system as a response to a provider initiated update request (a response to **UseCase 2 - Request to update Shipping Instructions**). The `Updated Shipping Instructions` now awaits provider action

                        shippingInstructionsStatus='PENDING UPDATE'
                        updatedShippingInstructionsStatus='UPDATE RECEIVED'
                  value:
                    shippingInstructionsReference: si-123
                    shippingInstructionsStatus: PENDING UPDATE
                    updatedShippingInstructionsStatus: UPDATE RECEIVED
                amendmentExample:
                  summary: |
                    Request amendment to Transport Document
                  description: |
                    An `Updated Shipping Instructions` received and stored in provider system as an amendment to a `Transport Document` with `transportDocumentReference='td-987'`. The `Updated Shipping Instructions` now awaits provider action

                        shippingInstructionsStatus='RECEIVED'
                        updatedShippingInstructionsStatus='UPDATE RECEIVED'
                  value:
                    shippingInstructionsReference: si-123
                    transportDocumentReference: td-987
                    shippingInstructionsStatus: RECEIVED
                    updatedShippingInstructionsStatus: UPDATE RECEIVED
        '400':
          description: |
            In case the updated `Shipping Instructions` does not schema validate a `400` (Bad Request) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Shipping Instructions missing isElectronic
                  description: |
                    `isElectronic` is a mandatory property in the `Shipping Instructions`. In case this property is missing an error object is created.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: PUT
                    requestUri: /v3/shipping-instructions/si-123
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: isElectronic not found - it is a mandatory property in Shipping Instructions
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        property: isElectronic
                        errorCodeText: mandatory property missing
                        errorCodeMessage: isElectronic must be provided as part of a Shipping Instructions
        '409':
          description: |
            In case the provider is already processing the `Shipping Instructions` matching `shippingInstructionsReference='si-123'` or for any other reason cannot process the request, it is possible to reject the `PUT` request with a `409` (Conflict) response
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflictExample:
                  summary: |
                    Conflicting Shipping Instructions update
                  description: |
                    The `Shipping Instructions` referenced in the `PUT` request is being processed by the provider. The provider does not support breaking this processing and must complete the processing of the `Shipping Instructions` prior to receiving a new request to update.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: PUT
                    requestUri: /v3/shipping-instructions/si-123
                    statusCode: 409
                    statusCodeText: Conflict
                    statusCodeMessage: Is being processed
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Shipping Instructions is being processed
                        errorCodeMessage: The Shipping Instructions cannot be updated while it is being processed. Please try again later
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing `Shipping Instructions`
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: PUT
                    requestUri: /v3/shipping-instructions/si-123
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Shipping Instructions
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            For other errors the error object should be populated with relevant information
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Updating too many Shipping Instructions
                  description: |
                    Calling the endPoint

                        PUT /v3/shipping-instructions/si-123
                      
                    too many times within a time period.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: PUT
                    requestUri: /v3/shipping-instructions/si-123
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    statusCodeMessage: Too many request to update a Shipping Instructions has been requested. Please try again in 1 hour
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Max Shipping Instructions requests reached
                        errorCodeMessage: A maximum of 10 Shipping Instructions can be updated per hour
    get:
      tags:
        - Shipping Instructions
      summary: |
        Gets the Shipping Instructions
      operationId: get-shipping-instructions
      parameters:
        - $ref: '#/components/parameters/documentReference'
        - $ref: '#/components/parameters/updatedContent'
        - $ref: '#/components/parameters/Api-Version-Major'
      description: |
        Retrieves the `Shipping Instructions` with the `documentReference`. The path can contain a `shippingInstructionsReference` or a `transportDocumentReference`. It is recommended to use this endPoint to `GET` data before an update is made to make sure latest version is being updated.

        The default payload when calling this endPoint is the "original" `Shipping Instructions`. It is also possible to get the latest update to a `Shipping Instructions` called the `Updated Shipping Instructions`. In order to get the `Update Shipping Instructions`, it is necessary to use the query parameter `updatedContent` and set it to `true`.

            GET /v3/shipping-instructions/{documentReference}?updatedContent=true

        The `status` of the "original" `Shipping Instructions` is included in both payloads as `shippingInstructionsStatus`. `updatedShippingInstructionsStatus` and related content is only available after a consumer has requested an update via **UseCase 3: Submit updated Shipping Instructions** and until:
        - the provider requests for a new update (**UseCase 2: Request to update Shipping Instructions**) in which case the "old update" is no longer accessable.
        - the consumer submits a new update (**UseCase 3: Submit updated Shipping Instructions**) in which case the "new update" provided **replaces** the "old update".

        If `updatedContent=true` is requested but no update has yet been provided by the consumer **or** the state of the "original" `Shipping Instructions` is `PENDING UPDATE`, then a `404` (Not Found) is returned.

        If the provider is requesting some changes to the `Shipping Instructions` this will also be part of the "original" `Shipping Instructions` payload in the `requestedChanges` property. This property is **conditional** on the `shippingInstructionsStatus='PENDING UPDATE'`.

        In case no subscription (`Notification`) has been set up - it is possible to use this endPoint to poll on in order to detect if `shippingInstructionsStatus` and/or `updatedShippingInstructionsStatus` has changed.
      responses:
        '200':
          description: |
            Fetching the content of either the "original" `Shipping Instructions` or the `Updated Shipping Instructions`
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingInstructions'
              examples:
                regularSTDExample:
                  summary: |
                    Fetch Shipping Instructions with standard Dry cargo
                  description: |
                    A `RECEIVED` `Shipping Instructions` with standard Dry cargo waiting for the provider to `DRAFT` a `Transport Document`.
                  value:
                    shippingInstructionsReference: fc5009a7-25ad-4bb0-9892-4e2dea6bcdd9
                    shippingInstructionsStatus: RECEIVED
                    transportDocumentTypeCode: BOL
                    isShippedOnBoardType: true
                    freightPaymentTermCode: PRE
                    isElectronic: true
                    isToOrder: true
                    invoicePayableAt:
                      UNLocationCode: DKAAR
                    partyContactDetails:
                      - name: DCSA test person
                        email: no-reply@dcsa.example.org
                    documentParties:
                      shipper:
                        partyName: DCSA CTK
                        displayedAddress:
                          - Strawinskylaan 4117
                        partyContactDetails:
                          - name: DCSA test person
                            email: no-reply@dcsa.example.org
                    consignmentItems:
                      - carrierBookingReference: CBR_123_REGULAR
                        weight: 12000
                        weightUnit: KGM
                        descriptionOfGoods: 'Shoes - black'
                        HSCodes:
                          - '640510'
                        commoditySubreference: RegSubRef001
                        cargoItems:
                          - equipmentReference: NARU3472484
                            weight: 12000
                            weightUnit: KGM
                            outerPackaging:
                              numberOfPackages: 400
                              packageCode: 4G
                              description: Fibreboard boxes
                    utilizedTransportEquipments:
                      - isShipperOwned: false
                        seals:
                          - number: DCSA-CTK-1234
                        equipmentReference: NARU3472484
                reeferExample:
                  summary: |
                    Shipping Instructions with reefer cargo
                  description: |
                    A `Shipping Instructions` with reefer cargo (`Diary products`) with US as destination. The provider requests that the `Advance Manifest Filing` be updated by the consumer.

                    **Notice** that there are no Reefer info in the `Shipping Instructions`. If any reefer info need to be modified - then a `Booking` amendment must be applied to booking: `CBR_123_REEFER`.
                  value:
                    transportDocumentReference: D8931B95625E4B339F2A
                    shippingInstructionsReference: 9051da7d-4099-4930-af35-7add4e68c635
                    shippingInstructionsStatus: PENDING UPDATE
                    transportDocumentTypeCode: BOL
                    isShippedOnBoardType: true
                    freightPaymentTermCode: PRE
                    isElectronic: true
                    isToOrder: true
                    invoicePayableAt:
                      UNLocationCode: DKAAR
                    partyContactDetails:
                      - name: DCSA test person
                        email: no-reply@dcsa.example.org
                    documentParties:
                      shipper:
                        partyName: DCSA CTK
                        displayedAddress:
                          - Strawinskylaan 4117
                        partyContactDetails:
                          - name: DCSA test person
                            email: no-reply@dcsa.example.org
                    consignmentItems:
                      - carrierBookingReference: CBR_123_REEFER
                        descriptionOfGoods: Dairy products
                        HSCodes:
                          - '04052090'
                        commoditySubreference: ReeferSubRef002
                        cargoItems:
                          - equipmentReference: KKFU6671914
                            weight: 12000
                            weightUnit: KGM
                            outerPackaging:
                              numberOfPackages: 400
                              packageCode: BQ
                              description: Bottles
                    utilizedTransportEquipments:
                      - isShipperOwned: false
                        seals:
                          - number: DCSA-CTK-1234
                        equipmentReference: KKFU6671914
                    advanceManifestFilings:
                      - manifestTypeCode: AFR
                        countryCode: US
                        advanceManifestFilingsHouseBLPerformedBy: SHIPPER
                        selfFilerCode: HHL007
                    requestedChanges:
                      - jsonPath: '$.advanceManifestFilings[0]'
                        message: Not a legal combination of "manifestTypeCode" (AFR) and "countryCode" (US)
                      - jsonPath: '$.advanceManifestFilings'
                        message: Missing "ACI" filing required for import to US
                dgExample:
                  summary: |
                    Updated Shipping Instructions with DG cargo
                  description: |
                    A `Shipping Instructions` with `Environmentally hazardous substance, liquid, N.O.S (Propiconazole)` which is transported in steel Jarricans.

                    The `Shipping Instructions` has already been applied an update which has been confirmed by the provider (`updatedShippingInstructions='UPDATE CONFIRMED'`). The `Shipping Instructions` is now waiting for the provider to `DRAFT` a `Transport Document`.

                    **Notice** that there are no DG (Dangerous Goods) info in the `Shipping Instructions`. If any DG info need to be modified - then a `Booking` amendment must be applied to booking: `RTM1234567`.
                  value:
                    transportDocumentReference: 4AD3FA470BB541B980CE
                    shippingInstructionsReference: b36484d0-1115-43c2-93e4-a378823a8386
                    shippingInstructionsStatus: RECEIVED
                    updatedShippingInstructionsStatus: UPDATE CONFIRMED
                    transportDocumentTypeCode: BOL
                    isShippedOnBoardType: true
                    freightPaymentTermCode: PRE
                    isElectronic: true
                    isToOrder: true
                    invoicePayableAt:
                      UNLocationCode: DKAAR
                    partyContactDetails:
                      - name: DCSA test person
                        email: no-reply@dcsa.example.org
                    documentParties:
                      shipper:
                        partyName: DCSA CTK
                        displayedAddress:
                          - Strawinskylaan 4117
                        partyContactDetails:
                          - name: DCSA test person
                            email: no-reply@dcsa.example.org
                    consignmentItems:
                      - carrierBookingReference: RTM1234567
                        descriptionOfGoods: 'Environmentally hazardous substance, liquid, N.O.S (Propiconazole)'
                        HSCodes:
                          - '293499'
                        commoditySubreference: DGSubRef003
                        cargoItems:
                          - equipmentReference: HLXU1234567
                            weight: 12000
                            weightUnit: KGM
                            outerPackaging:
                              numberOfPackages: 400
                              description: 'Jerrican, steel'
                    utilizedTransportEquipments:
                      - isShipperOwned: false
                        seals:
                          - number: DCSA-CTK-1234
                        equipment:
                          ISOEquipmentCode: 22GP
                          equipmentReference: HLXU1234567
                          tareWeight: 2370
                          weightUnit: KGM
        '404':
          description: |
            In case the consumer is requesting the content of the `UpdatedShipping Instructions`, and no update has yet been requested.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    Shipping Instructions update not found
                  description: |
                    The `Update Shipping Instructions` does not exist. No updates have been requested by the consumer.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: GET
                    requestUri: /v3/shipping-instructions/si-123?updatedContent=true
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: No update accessable
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Shipping Instructions does not contain an update
                        errorCodeMessage: The Shipping Instructions has not yet been updated - no update exists
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while fetching the Shipping Instructions
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: GET
                    requestUri: /v3/shipping-instructions/si-123
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while fetching the Shipping Instructions
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getError:
                  summary: |
                    GET non-existing Shipping Instructions
                  description: |
                    Calling

                        GET /v3/shipping-instructions/si-123
                        
                    results in an error as `Shipping Instructions` `si-123` does not exist.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: GET
                    requestUri: /v3/shipping-instructions/si-123
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: The requested shippingInstructionsReference does not exist
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Non existent shippingInstructionsReference
                        errorCodeMessage: shippingInstructionsReference `si-123` does not exist
    patch:
      tags:
        - Shipping Instructions
      summary: |
        Cancels an update to a Shipping Instructions
      operationId: patch-shipping-instructions
      parameters:
        - $ref: '#/components/parameters/documentReference'
        - $ref: '#/components/parameters/Api-Version-Major'
      description: |
        A way for the consumer to Cancel an `Updated Shipping Instructions`. This endPoint corresponds with **UseCase 5 - Cancel update to Shipping Instructions**.

        ## Precondition
        In order to cancel an `Updated Shipping Instructions`, the status of the `Updated Shipping Instructions` must be in in status `UPDATE RECEIVED`. The status of the `Shipping Instructions` can be either `RECEIVED` or `PENDING UPDATE`.

        ## Postcondition
        The provider has received a cancellation from the consumer for an `Updated Shipping Instructions` that is in state `UPDATE RECEIVED`.

        The consumer will receive a `200` (OK) if the payload schema-validates or a `400` (Bad Request) if it does not.

        ## Flow
        The following occurs when a provider receives a cancellation:
        1. The payload is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.

           **The process stops here!**
        2. The payload is schema-valid
        3. The `updatedShippingInstructionsStatus` is set to `UPDATE CANCELLED`.
        4. All '_relevant_' subscribers will be notified via a [Shipping Instructions Notification](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_EBL_NTF/3.0.0-Beta-2#/Notifications/shipping-instructions-notifications).
      requestBody:
        description: |
          Cancel the `Update Shipping Instructions`
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                updatedShippingInstructionsStatus:
                  type: string
                  maxLength: 50
                  description: |
                    The status of the `Updated Shipping Instructions`. It can only be `UPDATE CANCELLED`
                  example: UPDATE CANCELLED
              required:
                - updatedShippingInstructionsStatus
            examples:
              cancelUpdateExample:
                summary: |
                  Cancel a Shipping Instructions update
                description: |
                  Consumer wants to cancel an update provided to a `Shipping Instructions`. The `updatedShippingInstructionsStatus` is set to `UPDATE CANCELLED`
                value:
                  updatedShippingInstructionsStatus: UPDATE CANCELLED
      responses:
        '200':
          description: |
            The `Updated Shipping Instructions` is now cancelled. The `updatedShippingInstructionsStatus` is now `UPDATE CANCELLED`. The `shippingInstructionsStatus` is left unchanged.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingInstructionsRefCancelStatus'
              examples:
                cancelUpdateExample:
                  summary: |
                    Cancel a Shipping Instructions update
                  description: |
                    Consumer wants to cancel an update provided to a `Shipping Instructions`. In this case the `shippingInstructionsStatus` stays as `RECEIVED` and the `updatedShippingInstructionsStatus` is set to `UPDATE CANCELLED`. An optional `reason` can be provided.
                  value:
                    shippingInstructionsReference: si-123
                    shippingInstructionsStatus: RECEIVED
                    updatedShippingInstructionsStatus: UPDATE CANCELLED
                cancelRequestedUpdateExample:
                  summary: |
                    Cancel a Shipping Instructions update requested by provider
                  description: |
                    Consumer wants to cancel an update provided to a `Shipping Instructions`. The update was requested by the provider. The `shippingInstructionsStatus` stays as `PENDING UPDATE` and the `updatedShippingInstructionsStatus` is set to `UPDATE CANCELLED`. An optional `reason` can be provided.
                  value:
                    shippingInstructionsReference: si-123
                    shippingInstructionsStatus: PENDING UPDATE
                    updatedShippingInstructionsStatus: UPDATE CANCELLED
                    reason: Wrong update provided
        '400':
          description: |
            In case the Cancel payload does not schema validate a `400` (Bad Request) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Wrong Update Shipping Instructions status
                  description: |
                    `APPROVE` is not a possible value when PATCHING an `Updated Shipping Instructions`.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: PATCH
                    requestUri: /v3/shipping-instructions/si-123
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: APPROVE is not a valid status to set
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-10-03T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        property: updatedShippingInstructionsStatus
                        value: APPROVE
                        errorCodeText: incorrect value
                        errorCodeMessage: 'Only UPDATE CANCELLED is an allowed value: APPROVE was inserted'
        '404':
          description: |
            In case the consumer is trying to cancel a `Shipping Instructions` that does not have an ongoing update request, an `Updated Shipping Instructions` that is in state `UPDATE RECEIVED`.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notUpdateFoundExample:
                  summary: |
                    Shipping Instructions update not found
                  description: |
                    The `Update Shipping Instructions` does not exist. No updates have been requested by the consumer.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: PATCH
                    requestUri: /v3/shipping-instructions/si-123
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: No update exists
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Shipping Instructions does not contain an update
                        errorCodeMessage: The Shipping Instructions has no update request - nothing to cancel
        '409':
          description: |
            In case the provider is already processing the `Updated Shipping Instructions` matching `shippingInstructionsReference='si-123'` it is possible to reject the `PATCH` request with a `409` (Conflict) response
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflictExample:
                  summary: |
                    Conflicting Shipping Instructions cancellation
                  description: |
                    The `Updated Shipping Instructions` referenced in the `PATCH` request is being processed by the provider. The provider does not support breaking this processing and must complete the processing of the `Updated Shipping Instructions`. The cancellation will not be possible.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: PATCH
                    requestUri: /v3/shipping-instructions/si-123
                    statusCode: 409
                    statusCodeText: Conflict
                    statusCodeMessage: Is being processed
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Shipping Instructions is being processed
                        errorCodeMessage: The Shipping Instructions cannot be cancelled while it is being processed
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while cancelling the `Shipping Instructions`
                  description: |
                    An Internal Server Error has occurred, the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: PATCH
                    requestUri: /v3/shipping-instructions/si-123
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while cancelling the Shipping Instructions
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getError:
                  summary: |
                    GET non-existing Shipping Instructions
                  description: |
                    Calling

                        PATCH /v3/shipping-instructions/si-123
                        
                    results in an error as `Shipping Instructions` `si-123` does not exist.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: PATCH
                    requestUri: /v3/shipping-instructions/si-123
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: The requested shippingInstructionsReference does not exist
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Non existent shippingInstructionsReference
                        errorCodeMessage: shippingInstructionsReference `si-123` does not exist
  '/v3/transport-documents/{transportDocumentReference}':
    get:
      tags:
        - Transport Document
      summary: |
        Gets the Transport Document
      operationId: get-transport-document
      description: |
        Retrieves the `Transport Document` with the `transportDocumentReference` in the path.
      parameters:
        - in: path
          name: transportDocumentReference
          description: |
            The `transportDocumentReference` of the `Transport Document`
          required: true
          schema:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 20
            description: |
              A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
            example: HHL71800000
        - $ref: '#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: |
            The `Transport Document`
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransportDocument'
              examples:
                regularSTDExample:
                  summary: |
                    Draft Transport Document with regular Dry cargo
                  description: |
                    A `DRAFT` Transport Document waiting for consumer approval.
                  value:
                    transportDocumentReference: 62CD536BA8D34C469AFD
                    shippingInstructionsReference: fc5009a7-25ad-4bb0-9892-4e2dea6bcdd9
                    transportDocumentStatus: DRAFT
                    transportDocumentTypeCode: BOL
                    isShippedOnBoardType: true
                    freightPaymentTermCode: PRE
                    isElectronic: true
                    isToOrder: true
                    shippedOnBoardDate: '2023-12-20'
                    termsAndConditions: |
                      You agree that this transport document exist is name only for the sake of
                      testing your conformance with the DCSA EBL API. This transport document is NOT backed
                      by a real shipment with ANY carrier and NONE of the requested services will be
                      carried out in real life.

                      Unless required by applicable law or agreed to in writing, DCSA provides
                      this JSON data on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
                      ANY KIND, either express or implied, including, without limitation, any
                      warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY,
                      or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for
                      determining the appropriateness of using or redistributing this JSON
                      data and assume any risks associated with Your usage of this data.

                      In no event and under no legal theory, whether in tort (including negligence),
                      contract, or otherwise, unless required by applicable law (such as deliberate
                      and grossly negligent acts) or agreed to in writing, shall DCSA be liable to
                      You for damages, including any direct, indirect, special, incidental, or
                      consequential damages of any character arising as a result of this terms or conditions
                      or out of the use or inability to use the provided JSON data (including but not limited
                      to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any
                      and all other commercial damages or losses), even if DCSA has been advised of the
                      possibility of such damages.
                    receiptTypeAtOrigin: CY
                    deliveryTypeAtDestination: CY
                    cargoMovementTypeAtOrigin: FCL
                    cargoMovementTypeAtDestination: FCL
                    serviceContractReference: SCR-1234-REGULAR
                    carrierCode: MSC
                    carrierCodeListProvider: SMDG
                    issuingParty:
                      partyName: Mediterranean Shipping Company
                      address:
                        street: Chemin Rieu
                        streetNumber: 12-14
                        city: Geneva
                        countryCode: CH
                      identifyingCodes:
                        - codeListProvider: SMDG
                          codeListName: LCL
                          partyCode: MSC
                    transports:
                      plannedDepartureDate: '2023-12-20'
                      plannedArrivalDate: '2023-12-22'
                      portOfLoading:
                        locationType: UNLO
                        UNLocationCode: DKAAR
                      portOfDischarge:
                        locationType: UNLO
                        UNLocationCode: DEBRV
                      vesselVoyage:
                        - vesselName: MSC Gülsün
                          carrierExportVoyageNumber: 402E
                    charges:
                      - chargeName: Fictive transport document fee
                        currencyAmount: 1
                        currencyCode: EUR
                        paymentTermCode: COL
                        calculationBasis: Per transport document
                        unitPrice: 1
                        quantity: 1
                    invoicePayableAt:
                      UNLocationCode: DKAAR
                    partyContactDetails:
                      - name: DCSA test person
                        email: no-reply@dcsa.example.org
                    documentParties:
                      shipper:
                        partyName: DCSA CTK
                        displayedAddress:
                          - Strawinskylaan 4117
                        partyContactDetails:
                          - name: DCSA test person
                            email: no-reply@dcsa.example.org
                    consignmentItems:
                      - carrierBookingReference: CBR_123_REGULAR
                        descriptionOfGoods: 'Shoes - black'
                        HSCodes:
                          - '640510'
                        cargoItems:
                          - equipmentReference: NARU3472484
                            weight: 12000
                            weightUnit: KGM
                            outerPackaging:
                              numberOfPackages: 400
                              packageCode: 4G
                              description: Fibreboard boxes
                    utilizedTransportEquipments:
                      - isShipperOwned: false
                        seals:
                          - number: DCSA-CTK-1234
                        equipment:
                          ISOEquipmentCode: 22G1
                          equipmentReference: NARU3472484
                reeferExample:
                  summary: |
                    Approved Transport Document with reefer cargo
                  description: |
                    An `APPROVED` Transport Document by the consumer waiting to be Issued by the provider. The cargo is `Diary products` which need to be transported using a `Reefer` container at -18° CEL.
                  value:
                    transportDocumentReference: D8931B95625E4B339F2A
                    shippingInstructionsReference: 9051da7d-4099-4930-af35-7add4e68c635
                    transportDocumentStatus: APPROVED
                    transportDocumentTypeCode: BOL
                    isShippedOnBoardType: true
                    freightPaymentTermCode: PRE
                    isElectronic: true
                    isToOrder: true
                    shippedOnBoardDate: '2023-12-20'
                    termsAndConditions: |
                      You agree that this transport document exist is name only for the sake of
                      testing your conformance with the DCSA EBL API. This transport document is NOT backed
                      by a real shipment with ANY carrier and NONE of the requested services will be
                      carried out in real life.

                      Unless required by applicable law or agreed to in writing, DCSA provides
                      this JSON data on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
                      ANY KIND, either express or implied, including, without limitation, any
                      warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY,
                      or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for
                      determining the appropriateness of using or redistributing this JSON
                      data and assume any risks associated with Your usage of this data.

                      In no event and under no legal theory, whether in tort (including negligence),
                      contract, or otherwise, unless required by applicable law (such as deliberate
                      and grossly negligent acts) or agreed to in writing, shall DCSA be liable to
                      You for damages, including any direct, indirect, special, incidental, or
                      consequential damages of any character arising as a result of this terms or conditions
                      or out of the use or inability to use the provided JSON data (including but not limited
                      to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any
                      and all other commercial damages or losses), even if DCSA has been advised of the
                      possibility of such damages.
                    receiptTypeAtOrigin: CY
                    deliveryTypeAtDestination: CY
                    cargoMovementTypeAtOrigin: FCL
                    cargoMovementTypeAtDestination: FCL
                    serviceContractReference: SCR-1234-REEFER
                    carrierCode: MSC
                    carrierCodeListProvider: SMDG
                    issuingParty:
                      partyName: Mediterranean Shipping Company
                      address:
                        street: Chemin Rieu
                        streetNumber: 12-14
                        city: Geneva
                        countryCode: CH
                      identifyingCodes:
                        - codeListProvider: SMDG
                          codeListName: LCL
                          partyCode: MSC
                    transports:
                      plannedDepartureDate: '2023-12-20'
                      plannedArrivalDate: '2023-12-22'
                      portOfLoading:
                        locationType: UNLO
                        UNLocationCode: DKAAR
                      portOfDischarge:
                        locationType: UNLO
                        UNLocationCode: DEBRV
                      vesselVoyage:
                        - vesselName: Ever Ace
                          carrierExportVoyageNumber: 402E
                    charges:
                      - chargeName: Fictive transport document fee
                        currencyAmount: 1
                        currencyCode: EUR
                        paymentTermCode: COL
                        calculationBasis: Per transport document
                        unitPrice: 1
                        quantity: 1
                    invoicePayableAt:
                      UNLocationCode: DKAAR
                    partyContactDetails:
                      - name: DCSA test person
                        email: no-reply@dcsa.example.org
                    documentParties:
                      shipper:
                        partyName: DCSA CTK
                        displayedAddress:
                          - Strawinskylaan 4117
                        partyContactDetails:
                          - name: DCSA test person
                            email: no-reply@dcsa.example.org
                    consignmentItems:
                      - carrierBookingReference: CBR_123_REEFER
                        descriptionOfGoods: Dairy products
                        HSCodes:
                          - '04052090'
                        cargoItems:
                          - equipmentReference: KKFU6671914
                            weight: 12000
                            weightUnit: KGM
                            outerPackaging:
                              numberOfPackages: 400
                              packageCode: BQ
                              description: Bottles
                    utilizedTransportEquipments:
                      - isShipperOwned: false
                        seals:
                          - number: DCSA-CTK-1234
                        equipment:
                          ISOEquipmentCode: 45R1
                          equipmentReference: KKFU6671914
                        isNonOperatingReefer: false
                        activeReeferSettings:
                          temperatureSetpoint: -18
                          temperatureUnit: CEL
                dgExample:
                  summary: |
                    Issued Transport Document with DG (Dangerous Goods) cargo
                  description: |
                    An `ISSUED` Transport Document by the provider containing DG (Dangerous Goods). The cargo is `Environmentally hazardous substance, liquid, N.O.S (Propiconazole)` which is transported in steel Jarricans.
                  value:
                    transportDocumentReference: 4AD3FA470BB541B980CE
                    shippingInstructionsReference: b36484d0-1115-43c2-93e4-a378823a8386
                    transportDocumentStatus: ISSUED
                    transportDocumentTypeCode: BOL
                    isShippedOnBoardType: true
                    freightPaymentTermCode: PRE
                    isElectronic: true
                    isToOrder: true
                    shippedOnBoardDate: '2023-12-20'
                    termsAndConditions: |
                      You agree that this transport document exist is name only for the sake of
                      testing your conformance with the DCSA EBL API. This transport document is NOT backed
                      by a real shipment with ANY carrier and NONE of the requested services will be
                      carried out in real life.

                      Unless required by applicable law or agreed to in writing, DCSA provides
                      this JSON data on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
                      ANY KIND, either express or implied, including, without limitation, any
                      warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY,
                      or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for
                      determining the appropriateness of using or redistributing this JSON
                      data and assume any risks associated with Your usage of this data.

                      In no event and under no legal theory, whether in tort (including negligence),
                      contract, or otherwise, unless required by applicable law (such as deliberate
                      and grossly negligent acts) or agreed to in writing, shall DCSA be liable to
                      You for damages, including any direct, indirect, special, incidental, or
                      consequential damages of any character arising as a result of this terms or conditions
                      or out of the use or inability to use the provided JSON data (including but not limited
                      to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any
                      and all other commercial damages or losses), even if DCSA has been advised of the
                      possibility of such damages.
                    receiptTypeAtOrigin: CY
                    deliveryTypeAtDestination: CY
                    cargoMovementTypeAtOrigin: FCL
                    cargoMovementTypeAtDestination: FCL
                    serviceContractReference: SCR-1234-DG
                    carrierCode: HLC
                    carrierCodeListProvider: SMDG
                    issuingParty:
                      partyName: Hapag Lloyd
                      address:
                        street: Ballindamm
                        streetNumber: '25'
                        postCode: D-20095
                        city: Hamburg
                        countryCode: DE
                      identifyingCodes:
                        - codeListProvider: SMDG
                          codeListName: LCL
                          partyCode: HLC
                    transports:
                      plannedDepartureDate: '2023-12-20'
                      plannedArrivalDate: '2023-12-22'
                      portOfLoading:
                        locationType: UNLO
                        UNLocationCode: DKAAR
                      portOfDischarge:
                        locationType: UNLO
                        UNLocationCode: DEBRV
                      vesselVoyage:
                        - vesselName: Berlin Express
                          carrierExportVoyageNumber: 402E
                    charges:
                      - chargeName: Fictive transport document fee
                        currencyAmount: 1
                        currencyCode: EUR
                        paymentTermCode: COL
                        calculationBasis: Per transport document
                        unitPrice: 1
                        quantity: 1
                    invoicePayableAt:
                      UNLocationCode: DKAAR
                    partyContactDetails:
                      - name: DCSA test person
                        email: no-reply@dcsa.example.org
                    documentParties:
                      shipper:
                        partyName: DCSA CTK
                        displayedAddress:
                          - Strawinskylaan 4117
                        partyContactDetails:
                          - name: DCSA test person
                            email: no-reply@dcsa.example.org
                    consignmentItems:
                      - carrierBookingReference: RTM1234567
                        descriptionOfGoods: 'Environmentally hazardous substance, liquid, N.O.S (Propiconazole)'
                        HSCodes:
                          - '293499'
                        cargoItems:
                          - equipmentReference: HLXU1234567
                            weight: 12000
                            weightUnit: KGM
                            outerPackaging:
                              numberOfPackages: 400
                              imoPackagingCode: 3A1
                              description: 'Jerrican, steel'
                              dangerousGoods:
                                - unNumber: '3082'
                                  properShippingName: 'Environmentally hazardous substance, liquid, N.O.S'
                                  imoClass: '9'
                                  packingGroup: 3
                                  EMSNumber: F-A S-F
                    utilizedTransportEquipments:
                      - isShipperOwned: false
                        seals:
                          - number: DCSA-CTK-1234
                        cargoGrossWeight: 12000
                        cargoGrossWeightUnit: KGM
                        equipment:
                          ISOEquipmentCode: 22GP
                          equipmentReference: HLXU1234567
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while fetching the Transport Document
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: GET
                    requestUri: /v3/transport-documents/td-987
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while fetching the Transport Document
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getError:
                  summary: |
                    GET non-existing Transport Document
                  description: |
                    Calling

                        GET /v3/transport-documents/td-987
                        
                    results in an error as `Transport Document` `td-987` does not exist.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: GET
                    requestUri: /v3/transport-documents/td-987
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: The requested transportDocumentReference does not exist
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Non existent transportDocumentReference
                        errorCodeMessage: transportDocumentReference `td-987` does not exist
    patch:
      tags:
        - Transport Document
      summary: |
        Approve a Transport Document
      operationId: approve-transport-document
      description: |
        A way for the consumer to Approve the `Draft Transport Document`. This endPoint corresponds with **UseCase 7 - Approve Draft Transport Document**.

        ## Precondition
        In order to approve a `Draft Transport Document`, the status of the `Transport Document` needs to be in status `DRAFT`

        ## Postcondition
        The provider has received an approval from the consumer for a `Transport Document` that is in state `DRAFT`.

        The consumer will receive a `200` (OK) if the payload schema-validates or a `400` (Bad Request) if it does not.

        ## Flow
        The following occurs when a provider receives an approval:
        1. The payload is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.

           **The process stops here!**
        2. The payload is schema-valid
        3. The `transportDocumentStatus` is set to `APPROVED`.
        4. All '_relevant_' subscribers will be notified via a [Transport Document Notification](https://app.swaggerhub.com/apis/dcsaorg/DCSA_EBL_NTF/3.0.0-Beta-2#/Notifications/transport-document-notifications).

        The provider wil now start asynchronous processing. Once processed, the new status of the `Transport Document` (`ISSUED`) will be communicated via a `Transport Document Notification`. In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the

            GET /v3/transport-documents/{transportDocumentReference}

        endPoint to check if the `transportDocumentStatus` in the `Transport Document` has changed.
      parameters:
        - in: path
          name: transportDocumentReference
          description: |
            The `transportDocumentReference` of the `Transport Document`
          required: true
          schema:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 20
            description: |
              A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
            example: HHL71800000
        - $ref: '#/components/parameters/Api-Version-Major'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                transportDocumentStatus:
                  type: string
                  maxLength: 50
                  description: |
                    The status of the `Transport Document`. It can only be `APPROVED`
                  example: APPROVED
              required:
                - transportDocumentStatus
      responses:
        '200':
          description: |
            The `Transport Document` has been successfully `APPROVED`
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransportDocumentRefStatus'
              examples:
                approveExample:
                  summary: |
                    Approve Draft Transport Document
                  description: |
                    Consumer approves the drafted `Transport Document`.
                  value:
                    transportDocumentReference: td-987
                    transportDocumentStatus: APPROVED
        '400':
          description: |
            In case the Approve payload does not schema validate a `400` (Bad Request) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Wrong Transport Document status
                  description: |
                    `ISSUE` is not a possible value when PATCHING a `Transport Document`.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: PATCH
                    requestUri: /v3/transport-documents/td-987
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: ISSUE is not a valid status to set
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-10-03T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        property: transportDocumentStatus
                        value: ISSUE
                        errorCodeText: incorrect value
                        errorCodeMessage: 'Only APPROVED is an allowed value: ISSUE was inserted'
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while approving the `Draft Transport Document`
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: PATCH
                    requestUri: /v3/transport-documents/td-987
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while approving the Transport Document
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getError:
                  summary: |
                    GET non-existing Transport Document
                  description: |
                    Calling

                        PATCH /v3/transport-documents/td-987
                        
                    results in an error as `Transport Document` `td-987` does not exist.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: PATCH
                    requestUri: /v3/transport-documents/td-987
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: The requested transportDocumentReference does not exist
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2023-04-13T07:41:00+08:30'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Non existent transportDocumentReference
                        errorCodeMessage: transportDocumentReference `td-987` does not exist
components:
  headers:
    API-Version:
      schema:
        type: string
        example: 3.0.0-Beta-2
      description: |
        SemVer used to indicate the version of the contract (API version) returned.
  parameters:
    Api-Version-Major:
      in: header
      name: API-Version
      required: false
      schema:
        type: string
        example: '3'
      description: |
        An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
    #############
    # Path params
    #############
    documentReference:
      in: path
      name: documentReference
      description: |
        An identifier for a `Shipping Instructions`. It can either be a `shippingInstructionsReference` or a `transportDocumentReference`.
      schema:
        type: string
        pattern: ^\S(?:.*\S)?$
        maxLength: 100
        example: e0559d83-00e2-438e-afd9-fdd610c1a008
      required: true
    updatedContent:
      in: query
      name: updatedContent
      description: |
        If set to `true`, the payload returned is the content of the `Updated Shipping Instructions`.

        Default value is `false` in which case the content of the "original" `Shipping Instructions` is returned.

        **Condition:** Can only be used if an update has been made by the consumer (via **UseCase 3: Submit updated Shipping Instructions**) and **until** a new updated is requested by the provider. If no updates have been made a `404` (Not Found) response will be returned
      schema:
        type: boolean
        default: false
        example: false
  schemas:
    ##############################
    # Create Shipping Instructions    
    ##############################
    CreateShippingInstructions:
      type: object
      description: |
        The `Shipping Instructions` is an enrichment to the original booking shared by the Shipper to the Carrier. The information given by the Shipper through the `Shipping Instructions` is the information required to create a `Draft Transport Document`.
      title: Create Shipping Instructions
      properties:
        transportDocumentTypeCode:
          type: string
          description: |
            Specifies the type of the transport document
            - `BOL` (Bill of Lading)
            - `SWB` (Sea Waybill)
          enum:
            - BOL
            - SWB
          example: SWB
        isShippedOnBoardType:
          type: boolean
          description: |
            Specifies whether the Transport Document is a received for shipment, or shipped on board.
          example: true
        freightPaymentTermCode:
          type: string
          description: |
            An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).

            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        originChargesPaymentTerm:
          type: object
          description: |
            An indicator of whether origin charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
          properties:
            haulageChargesPaymentTermCode:
              type: string
              description: |
                An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              enum:
                - PRE
                - COL
              example: PRE
            portChargesPaymentTermCode:
              type: string
              description: |
                An indicator of whether the origin port charges are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              enum:
                - PRE
                - COL
              example: PRE
            otherChargesPaymentTermCode:
              type: string
              enum:
                - PRE
                - COL
              description: |
                An indicator of whether origin charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              example: PRE
        destinationChargesPaymentTerm:
          type: object
          description: |
            An indicator of whether destination charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
          properties:
            haulageChargesPaymentTermCode:
              type: string
              description: |
                An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              enum:
                - PRE
                - COL
              example: PRE
            portChargesPaymentTermCode:
              type: string
              description: |
                An indicator of whether the destination port charges are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              enum:
                - PRE
                - COL
              example: PRE
            otherChargesPaymentTermCode:
              type: string
              enum:
                - PRE
                - COL
              description: |
                An indicator of whether destination charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              example: PRE
        isElectronic:
          type: boolean
          description: |
            An indicator whether the transport document is electronically transferred.
          example: true
        sendToPlatform:
          type: string
          maxLength: 4
          description: |
            Indicates the shipper’s platform on which the eBL should be issued. The value **MUST** be one of:
            - `WAVE` (Wave)
            - `CARX` (CargoX)
            - `ESSD` (EssDOCS)
            - `IDT` (ICE Digital Trade)
            - `BOLE` (Bolero)
            - `EDOX` (EdoxOnline)
            - `IQAX` (IQAX)
            - `SECR` (Secro)
            - `TRGO` (TradeGO)
            - `ETEU` (eTEU)
            - `TRAC` (TRACE Origional)
            - `BRIT` (BRITC eBL)

            **Condition:** Mandatory for electronic Bill of Lading (`isElectronic=true`).
            
            Must be a code this list [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/reference-data/eblsolutionproviders-v3.0.0-Beta-2.csv).
          example: WAVE
        isToOrder:
          type: boolean
          description: |
            Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).

            `isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).
          example: false
        numberOfCopiesWithCharges:
          type: integer
          format: int32
          minimum: 0
          description: The requested number of copies of the Transport document to be issued by the carrier including charges. Only applicable for physical (paper) documents
          example: 2
        numberOfCopiesWithoutCharges:
          type: integer
          format: int32
          minimum: 0
          description: The requested number of copies of the Transport document to be issued by the carrier **NOT** including charges. Only applicable for physical (paper) documents
          example: 2
        numberOfOriginalsWithCharges:
          type: integer
          format: int32
          minimum: 0
          description: |
            Number of originals of the bill of lading that has been requested by the customer with charges. Only applicable for physical documents.
          example: 1
        numberOfOriginalsWithoutCharges:
          type: integer
          format: int32
          minimum: 0
          description: |
            Number of originals of the bill of lading that has been requested by the customer without charges. Only applicable for physical documents.
          example: 1
        displayedNameForPlaceOfReceipt:
          description: |
            The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        displayedNameForPortOfLoad:
          description: |
            The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        displayedNameForPortOfDischarge:
          description: |
            The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        displayedNameForPlaceOfDelivery:
          description: |
            The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        placeOfIssue:
          type: object
          description: |
            An object to capture where the original Transport Document (`Bill of Lading`) will be issued.

            The location can be specified either as a `UN Location Code` or as a `CountryCode`.
          oneOf:
            - type: object
              title: UN Location Code
              properties:
                UNLocationCode:
                  type: string
                  pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
                  minLength: 5
                  maxLength: 5
                  description: |-
                    The UN Location code specifying where the place is located. The pattern used must be
                    
                    - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                    - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
                    
                    More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
                  example: NLAMS
              required:
                - UNLocationCode
            - type: object
              title: Country Code
              properties:
                countryCode:
                  type: string
                  pattern: '^[A-Z]{2}$'
                  minLength: 2
                  maxLength: 2
                  description: |
                    The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                  example: NL
              required:
                - countryCode
        invoicePayableAt:
          type: object
          description: |
            Location where payment of ocean freight and charges for the main transport will take place by the customer.

            The location must be provided as a `UN Location Code`
          properties:
            UNLocationCode:
              type: string
              pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
              minLength: 5
              maxLength: 5
              description: |-
                The UN Location code specifying where the place is located. The pattern used must be
                
                - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
                
                More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
              example: NLAMS
          required:
            - UNLocationCode
        partyContactDetails:
          type: array
          minItems: 1
          description: |
            The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) 
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        documentParties:
          type: object
          description: |
            All `Parties` with associated roles.
          properties:
            shipper:
              $ref: '#/components/schemas/Shipper'
            consignee:
              $ref: '#/components/schemas/Consignee'
            endorsee:
              $ref: '#/components/schemas/Endorsee'
            other:
              type: array
              description: A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.
              items:
                $ref: '#/components/schemas/OtherDocumentParty'
          required:
            - shipper
        consignmentItems:
          type: array
          minItems: 1
          description: |
            A list of `ConsignmentItems`
          items:
            $ref: '#/components/schemas/ConsignmentItemShipper'
        utilizedTransportEquipments:
          type: array
          minItems: 1
          description: |
            A list of `Utilized Transport Equipments` describing the equipment being used.
          items:
            $ref: '#/components/schemas/UtilizedTransportEquipmentShipper'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
        advanceManifestFilings:
          type: array
          description: |
            A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing
          items:
            $ref: '#/components/schemas/AdvanceManifestFiling'
        requestedCarrierCertificates:
          type: array
          description: |
            Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack
          items:
            $ref: '#/components/schemas/RequestedCarrierCertificate'
        requestedCarrierClauses:
          type: array
          description: |
            Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`
          items:
            $ref: '#/components/schemas/RequestedCarrierClause'
      required:
        - transportDocumentTypeCode
        - isShippedOnBoardType
        - isElectronic
        - isToOrder
        - freightPaymentTermCode
        - partyContactDetails
        - documentParties
        - consignmentItems
        - utilizedTransportEquipments
    UpdateShippingInstructions:
      description: |
        The `Shipping Instructions` to update.
      type: object
      title: Update Shipping Instructions
      properties:
        shippingInstructionsReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            The identifier for a `Shipping Istructions` provided by the carrier for system purposes.
          example: e0559d83-00e2-438e-afd9-fdd610c1a008
        transportDocumentTypeCode:
          type: string
          description: |
            Specifies the type of the transport document
            - `BOL` (Bill of Lading)
            - `SWB` (Sea Waybill)
          enum:
            - BOL
            - SWB
          example: SWB
        isShippedOnBoardType:
          type: boolean
          description: |
            Specifies whether the Transport Document is a received for shipment, or shipped on board.
          example: true
        freightPaymentTermCode:
          type: string
          description: |
            An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).

            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        originChargesPaymentTerm:
          type: object
          description: |
            An indicator of whether origin charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
          properties:
            haulageChargesPaymentTermCode:
              type: string
              description: |
                An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              enum:
                - PRE
                - COL
              example: PRE
            portChargesPaymentTermCode:
              type: string
              description: |
                An indicator of whether the origin port charges are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              enum:
                - PRE
                - COL
              example: PRE
            otherChargesPaymentTermCode:
              type: string
              enum:
                - PRE
                - COL
              description: |
                An indicator of whether origin charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              example: PRE
        destinationChargesPaymentTerm:
          type: object
          description: |
            An indicator of whether destination charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
          properties:
            haulageChargesPaymentTermCode:
              type: string
              description: |
                An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              enum:
                - PRE
                - COL
              example: PRE
            portChargesPaymentTermCode:
              type: string
              description: |
                An indicator of whether the destination port charges are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              enum:
                - PRE
                - COL
              example: PRE
            otherChargesPaymentTermCode:
              type: string
              enum:
                - PRE
                - COL
              description: |
                An indicator of whether destination charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              example: PRE
        isElectronic:
          type: boolean
          description: |
            An indicator whether the transport document is electronically transferred.
          example: true
        sendToPlatform:
          type: string
          maxLength: 4
          description: |
            Indicates the shipper’s platform on which the eBL should be issued. The value **MUST** be one of:
            - `WAVE` (Wave)
            - `CARX` (CargoX)
            - `ESSD` (EssDOCS)
            - `IDT` (ICE Digital Trade)
            - `BOLE` (Bolero)
            - `EDOX` (EdoxOnline)
            - `IQAX` (IQAX)
            - `SECR` (Secro)
            - `TRGO` (TradeGO)
            - `ETEU` (eTEU)
            - `TRAC` (TRACE Origional)
            - `BRIT` (BRITC eBL)

            **Condition:** Mandatory for electronic Bill of Lading (`isElectronic=true`).
            
            Must be a code this list [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/reference-data/eblsolutionproviders-v3.0.0-Beta-2.csv).
          example: WAVE
        isToOrder:
          type: boolean
          description: |
            Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).

            `isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).
          example: false
        numberOfCopiesWithCharges:
          type: integer
          format: int32
          minimum: 0
          description: The requested number of copies of the Transport document to be issued by the carrier including charges. Only applicable for physical (paper) documents
          example: 2
        numberOfCopiesWithoutCharges:
          type: integer
          format: int32
          minimum: 0
          description: The requested number of copies of the Transport document to be issued by the carrier **NOT** including charges. Only applicable for physical (paper) documents
          example: 2
        numberOfOriginalsWithCharges:
          type: integer
          format: int32
          minimum: 0
          description: |
            Number of originals of the bill of lading that has been requested by the customer with charges. Only applicable for physical documents.
          example: 1
        numberOfOriginalsWithoutCharges:
          type: integer
          format: int32
          minimum: 0
          description: |
            Number of originals of the bill of lading that has been requested by the customer without charges. Only applicable for physical documents.
          example: 1
        displayedNameForPlaceOfReceipt:
          description: |
            The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        displayedNameForPortOfLoad:
          description: |
            The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        displayedNameForPortOfDischarge:
          description: |
            The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        displayedNameForPlaceOfDelivery:
          description: |
            The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        placeOfIssue:
          type: object
          description: |
            An object to capture where the original Transport Document (`Bill of Lading`) will be issued.

            The location can be specified either as a `UN Location Code` or as a `CountryCode`.
          oneOf:
            - type: object
              title: UN Location Code
              properties:
                UNLocationCode:
                  type: string
                  pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
                  minLength: 5
                  maxLength: 5
                  description: |-
                    The UN Location code specifying where the place is located. The pattern used must be
                    
                    - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                    - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
                    
                    More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
                  example: NLAMS
              required:
                - UNLocationCode
            - type: object
              title: Country Code
              properties:
                countryCode:
                  type: string
                  pattern: '^[A-Z]{2}$'
                  minLength: 2
                  maxLength: 2
                  description: |
                    The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                  example: NL
              required:
                - countryCode
        invoicePayableAt:
          type: object
          description: |
            Location where payment of ocean freight and charges for the main transport will take place by the customer.

            The location must be provided as a `UN Location Code`
          properties:
            UNLocationCode:
              type: string
              pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
              minLength: 5
              maxLength: 5
              description: |-
                The UN Location code specifying where the place is located. The pattern used must be
                
                - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
                
                More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
              example: NLAMS
          required:
            - UNLocationCode
        partyContactDetails:
          type: array
          minItems: 1
          description: |
            The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) 
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        documentParties:
          type: object
          description: |
            All `Parties` with associated roles.
          properties:
            shipper:
              $ref: '#/components/schemas/Shipper'
            consignee:
              $ref: '#/components/schemas/Consignee'
            endorsee:
              $ref: '#/components/schemas/Endorsee'
            other:
              type: array
              description: A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.
              items:
                $ref: '#/components/schemas/OtherDocumentParty'
          required:
            - shipper
        consignmentItems:
          type: array
          minItems: 1
          description: |
            A list of `ConsignmentItems`
          items:
            $ref: '#/components/schemas/ConsignmentItemShipper'
        utilizedTransportEquipments:
          type: array
          minItems: 1
          description: |
            A list of `Utilized Transport Equipments` describing the equipment being used.
          items:
            $ref: '#/components/schemas/UtilizedTransportEquipmentShipper'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
        advanceManifestFilings:
          type: array
          description: |
            A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing
          items:
            $ref: '#/components/schemas/AdvanceManifestFiling'
        requestedCarrierCertificates:
          type: array
          description: |
            Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack
          items:
            $ref: '#/components/schemas/RequestedCarrierCertificate'
        requestedCarrierClauses:
          type: array
          description: |
            Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`
          items:
            $ref: '#/components/schemas/RequestedCarrierClause'
      required:
        - shippingInstructionsReference
        - transportDocumentTypeCode
        - isShippedOnBoardType
        - isElectronic
        - isToOrder
        - freightPaymentTermCode
        - partyContactDetails
        - documentParties
        - consignmentItems
        - utilizedTransportEquipments
    ShippingInstructions:
      description: |
        The `Shipping Instructions` as provided by the Shipper.
      type: object
      title: Shipping Instructions
      properties:
        shippingInstructionsReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            The identifier for a `Shipping Istructions` provided by the carrier for system purposes.
          example: e0559d83-00e2-438e-afd9-fdd610c1a008
        transportDocumentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 20
          description: |
            A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
          example: HHL71800000
        shippingInstructionsStatus:
          type: string
          maxLength: 50
          description: |
            The status of the `Shipping Instructions`. Possible values are:
            - `RECEIVED` (Shipping Instructions has been received)
            - `PENDING UPDATE` (An update is required to the Shipping Instructions)
            - `COMPLETED` (The Shipping Instructions can no longer be modified - the related Transport Document has been surrendered for delivery)
          example: RECEIVED
        updatedShippingInstructionsStatus:
          type: string
          maxLength: 50
          description: |
            The status of the latest update to the `Shipping Instructions`. If no update has been requested - then this field is empty. Possible values are:
            - `UPDATE RECEIVED` (An update to a Shipping Instructions is waiting to be processed)
            - `UPDATE CONFIRMED` (An update to a Shipping Instructions has been confirmed)
            - `UPDATE CANCELLED` (An update to a Shipping Instructions is discontinued by consumer)
            - `UPDATE DECLINED` (An update to a Shipping Instructions is discontinued by provider)
          example: UPDATE RECEIVED
        transportDocumentTypeCode:
          type: string
          description: |
            Specifies the type of the transport document
            - `BOL` (Bill of Lading)
            - `SWB` (Sea Waybill)
          enum:
            - BOL
            - SWB
          example: SWB
        isShippedOnBoardType:
          type: boolean
          description: |
            Specifies whether the Transport Document is a received for shipment, or shipped on board.
          example: true
        freightPaymentTermCode:
          type: string
          description: |
            An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).

            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        originChargesPaymentTerm:
          type: object
          description: |
            An indicator of whether origin charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
          properties:
            haulageChargesPaymentTermCode:
              type: string
              description: |
                An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              enum:
                - PRE
                - COL
              example: PRE
            portChargesPaymentTermCode:
              type: string
              description: |
                An indicator of whether the origin port charges are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              enum:
                - PRE
                - COL
              example: PRE
            otherChargesPaymentTermCode:
              type: string
              enum:
                - PRE
                - COL
              description: |
                An indicator of whether origin charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              example: PRE
        destinationChargesPaymentTerm:
          type: object
          description: |
            An indicator of whether destination charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
          properties:
            haulageChargesPaymentTermCode:
              type: string
              description: |
                An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              enum:
                - PRE
                - COL
              example: PRE
            portChargesPaymentTermCode:
              type: string
              description: |
                An indicator of whether the destination port charges are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              enum:
                - PRE
                - COL
              example: PRE
            otherChargesPaymentTermCode:
              type: string
              enum:
                - PRE
                - COL
              description: |
                An indicator of whether destination charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).

                - `PRE` (Prepaid)
                - `COL` (Collect)
              example: PRE
        isElectronic:
          type: boolean
          description: |
            An indicator whether the transport document is electronically transferred.
          example: true
        sendToPlatform:
          type: string
          maxLength: 4
          description: |
            Indicates the shipper’s platform on which the eBL should be issued. The value **MUST** be one of:
            - `WAVE` (Wave)
            - `CARX` (CargoX)
            - `ESSD` (EssDOCS)
            - `IDT` (ICE Digital Trade)
            - `BOLE` (Bolero)
            - `EDOX` (EdoxOnline)
            - `IQAX` (IQAX)
            - `SECR` (Secro)
            - `TRGO` (TradeGO)
            - `ETEU` (eTEU)
            - `TRAC` (TRACE Origional)
            - `BRIT` (BRITC eBL)

            **Condition:** Mandatory for electronic Bill of Lading (`isElectronic=true`).
            
            Must be a code this list [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/reference-data/eblsolutionproviders-v3.0.0-Beta-2.csv).
          example: WAVE
        isToOrder:
          type: boolean
          description: |
            Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).

            `isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).
          example: false
        numberOfCopiesWithCharges:
          type: integer
          format: int32
          minimum: 0
          description: The requested number of copies of the Transport document to be issued by the carrier including charges. Only applicable for physical (paper) documents
          example: 2
        numberOfCopiesWithoutCharges:
          type: integer
          format: int32
          minimum: 0
          description: The requested number of copies of the Transport document to be issued by the carrier **NOT** including charges. Only applicable for physical (paper) documents
          example: 2
        numberOfOriginalsWithCharges:
          type: integer
          format: int32
          minimum: 0
          description: |
            Number of originals of the bill of lading that has been requested by the customer with charges. Only applicable for physical documents.
          example: 1
        numberOfOriginalsWithoutCharges:
          type: integer
          format: int32
          minimum: 0
          description: |
            Number of originals of the bill of lading that has been requested by the customer without charges. Only applicable for physical documents.
          example: 1
        displayedNameForPlaceOfReceipt:
          description: |
            The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        displayedNameForPortOfLoad:
          description: |
            The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        displayedNameForPortOfDischarge:
          description: |
            The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        displayedNameForPlaceOfDelivery:
          description: |
            The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        placeOfIssue:
          type: object
          description: |
            An object to capture where the original Transport Document (`Bill of Lading`) will be issued.

            The location can be specified either as a `UN Location Code` or as a `CountryCode`.
          oneOf:
            - type: object
              title: UN Location Code
              properties:
                UNLocationCode:
                  type: string
                  pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
                  minLength: 5
                  maxLength: 5
                  description: |-
                    The UN Location code specifying where the place is located. The pattern used must be
                    
                    - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                    - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
                    
                    More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
                  example: NLAMS
              required:
                - UNLocationCode
            - type: object
              title: Country Code
              properties:
                countryCode:
                  type: string
                  pattern: '^[A-Z]{2}$'
                  minLength: 2
                  maxLength: 2
                  description: |
                    The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                  example: NL
              required:
                - countryCode
        invoicePayableAt:
          type: object
          description: |
            Location where payment of ocean freight and charges for the main transport will take place by the customer.

            The location must be provided as a `UN Location Code`
          properties:
            UNLocationCode:
              type: string
              pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
              minLength: 5
              maxLength: 5
              description: |-
                The UN Location code specifying where the place is located. The pattern used must be
                
                - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
                
                More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
              example: NLAMS
          required:
            - UNLocationCode
        partyContactDetails:
          type: array
          minItems: 1
          description: |
            The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) 
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        documentParties:
          type: object
          description: |
            All `Parties` with associated roles.
          properties:
            shipper:
              $ref: '#/components/schemas/Shipper'
            consignee:
              $ref: '#/components/schemas/Consignee'
            endorsee:
              $ref: '#/components/schemas/Endorsee'
            other:
              type: array
              description: A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.
              items:
                $ref: '#/components/schemas/OtherDocumentParty'
          required:
            - shipper
        consignmentItems:
          type: array
          minItems: 1
          description: |
            A list of `ConsignmentItems`
          items:
            $ref: '#/components/schemas/ConsignmentItemShipper'
        utilizedTransportEquipments:
          type: array
          minItems: 1
          description: |
            A list of `Utilized Transport Equipments` describing the equipment being used.
          items:
            $ref: '#/components/schemas/UtilizedTransportEquipmentShipper'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
        advanceManifestFilings:
          type: array
          description: |
            A list of `Advance Manifest Filings` specified by the Shipper to indicate whom is to do the Filing
          items:
            $ref: '#/components/schemas/AdvanceManifestFiling'
        requestedCarrierCertificates:
          type: array
          description: |
            Certificate(s) requested by the Shipper for the Carrier to include as part of the shipment documentation pack
          items:
            $ref: '#/components/schemas/RequestedCarrierCertificate'
        requestedCarrierClauses:
          type: array
          description: |
            Clauses requested by the Shipper for the Carrier to include in the `Transport Document` `Carrier clauses`
          items:
            $ref: '#/components/schemas/RequestedCarrierClause'
        requestedChanges:
          type: array
          description: |
            A list of changes requirested by the carrier to the document in order for it to be accepted.
          items:
            $ref: '#/components/schemas/RequestedChange'
        reason:
          type: string
          title: reason
          maxLength: 5000
          description: |
            This field can be used to explain `shippingInstructionsStatus` and/or `updatedShippingInstructionsStatus`.
          example: Rejected because of of wrong equipmentReference
      required:
        - shippingInstructionsStatus
        - transportDocumentTypeCode
        - isShippedOnBoardType
        - isElectronic
        - isToOrder
        - freightPaymentTermCode
        - partyContactDetails
        - documentParties
        - consignmentItems
        - utilizedTransportEquipments
    ShippingInstructionsRefStatus:
      type: object
      title: Shipping Instructions Response
      description: |
        The `shippingInstructionsReference`, possibly the `transportDocumentReference` along with the `shippingInstructionsStatus` and `updatedShippingInstructionsStatus`, an optional list of `requestedChanges` to be applied to the `Shipping Instructions` and and optional `reason`field is returned.
      properties:
        shippingInstructionsReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            The identifier for a `Shipping Istructions` provided by the carrier for system purposes.
          example: e0559d83-00e2-438e-afd9-fdd610c1a008
        transportDocumentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 20
          description: |
            A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
          example: HHL71800000
        shippingInstructionsStatus:
          type: string
          maxLength: 50
          description: |
            The status of the `Shipping Instructions`. Possible values are:
            - `RECEIVED` (Shipping Instructions has been received)
            - `PENDING UPDATE` (An update is required to the Shipping Instructions)
            - `COMPLETED` (The Shipping Instructions can no longer be modified - the related Transport Document has been surrendered for delivery)
          example: RECEIVED
        updatedShippingInstructionsStatus:
          type: string
          maxLength: 50
          description: |
            The status of the latest update to the `Shipping Instructions`. If no update has been requested - then this field is empty. Possible values are:
            - `UPDATE RECEIVED` (An update to a Shipping Instructions is waiting to be processed)
            - `UPDATE CONFIRMED` (An update to a Shipping Instructions has been confirmed)
            - `UPDATE CANCELLED` (An update to a Shipping Instructions is discontinued by consumer)
            - `UPDATE DECLINED` (An update to a Shipping Instructions is discontinued by provider)
          example: UPDATE RECEIVED
        requestedChanges:
          type: array
          description: |
            A list of changes requirested by the carrier to the document in order for it to be accepted.
          items:
            $ref: '#/components/schemas/RequestedChange'
        reason:
          type: string
          title: reason
          maxLength: 5000
          description: |
            This field can be used to explain `shippingInstructionsStatus` and/or `updatedShippingInstructionsStatus`.
          example: Rejected because of of wrong equipmentReference
      required:
        - shippingInstructionsStatus
    ShippingInstructionsRefCancelStatus:
      type: object
      title: Shipping Instructions Cancel Response
      description: |
        The `shippingInstructionsReference`, possibly the `transportDocumentReference` along with the `shippingInstructionsStatus` and `updatedShippingInstructionsStatus` and and optional `reason`field is returned.
      properties:
        shippingInstructionsReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            The identifier for a `Shipping Istructions` provided by the carrier for system purposes.
          example: e0559d83-00e2-438e-afd9-fdd610c1a008
        transportDocumentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 20
          description: |
            A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
          example: HHL71800000
        shippingInstructionsStatus:
          type: string
          maxLength: 50
          description: |
            The status of the `Shipping Instructions`. Possible values are:
            - `RECEIVED` (Shipping Instructions has been received)
            - `PENDING UPDATE` (An update is required to the Shipping Instructions)
            - `COMPLETED` (The Shipping Instructions can no longer be modified - the related Transport Document has been surrendered for delivery)
          example: RECEIVED
        updatedShippingInstructionsStatus:
          type: string
          maxLength: 50
          description: |
            The status of the `Updated Shipping Instructions`. It can only be `UPDATE CANCELLED`
          example: UPDATE CANCELLED
        reason:
          type: string
          title: reason
          maxLength: 5000
          description: |
            This field can be used to explain `shippingInstructionsStatus` and/or `updatedShippingInstructionsStatus`.
          example: Rejected because of of wrong equipmentReference
      required:
        - shippingInstructionsStatus

    ##################
    # Requested Change
    ##################
    RequestedChange:
      type: object
      title: Requested Change
      description: |
        A change required to the document in order for the carrier to accepted it
      properties:
        #field:
        #  type: string
        #  maxLength: 500
        #  description: |
        #    The field that caused the error, e.g. a failed validation. The field can be expressed as a [JSONpath](https://github.com/json-path/JsonPath) using either the [DOT] Notation or the [Bracket] Notation.
        #  example: $.location.facilityCode
        property:
          type: string
          maxLength: 100
          description: |
            The name of the property causing the error.
          example: 'facilityCode'
        jsonPath:
          type: string
          maxLength: 500
          description: |
            A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).
          example: '$.location.facilityCode'
        message:
          type: string
          maxLength: 500
          description: |
            A description of the problem that needs attention.
          example: Spaces not allowed in facility code
      required:
        - message

    #################
    # Error Responses
    #################
    ErrorResponse:
      title: Error Response
      type: object
      description: Unexpected error
      properties:
        httpMethod:
          description: |
            The HTTP method used to make the request e.g. `GET`, `POST`, etc
          type: string
          example: POST
          enum:
            - GET
            - HEAD
            - POST
            - PUT
            - DELETE
            - OPTION
            - PATCH
        requestUri:
          description: |
            The URI that was requested.
          type: string
          example: /v1/events
        statusCode:
          description: |
            The HTTP status code returned.
          type: integer
          format: int32
          example: 400
        statusCodeText:
          description: |
            A standard short description corresponding to the HTTP status code.
          type: string
          maxLength: 50
          example: Bad Request
        statusCodeMessage:
          description: |
            A long description corresponding to the HTTP status code with additional information.
          type: string
          maxLength: 200
          example: The supplied data could not be accepted
        providerCorrelationReference:
          description: |
            A unique identifier to the HTTP request within the scope of the API provider.
          type: string
          maxLength: 100
          example: 4426d965-0dd8-4005-8c63-dc68b01c4962
        errorDateTime:
          description: |
            The DateTime corresponding to the error occurring. Must be formatted using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
          type: string
          format: date-time
          example: '2019-11-12T07:41:00+08:30'
        errors:
          type: array
          description: |
            An array of errors providing more detail about the root cause.
          minItems: 1
          items:
            type: object
            title: Detailed Error
            properties:
              errorCode:
                type: integer
                format: int32
                description: |
                  The detailed error code returned.

                    - `7000-7999` Technical error codes
                    - `8000-8999` Functional error codes
                    - `9000-9999` API provider-specific error codes            

                  [Error codes as specified by DCSA](https://dcsa.atlassian.net/wiki/spaces/DTG/pages/197132308/Standard+Error+Codes).
                minimum: 7000
                maximum: 9999
                example: 7003
              property:
                type: string
                maxLength: 100
                description: |
                  The name of the property causing the error.
                example: facilityCode
              value:
                type: string
                maxLength: 500
                description: |
                  The value of the property causing the error serialised as a string exactly as in the original request.
                example: SG SIN WHS
              jsonPath:
                type: string
                maxLength: 500
                description: |
                  A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).
                example: $.location.facilityCode
              errorCodeText:
                description: |
                  A standard short description corresponding to the `errorCode`.
                type: string
                maxLength: 100
                example: invalidData
              errorCodeMessage:
                type: string
                maxLength: 200
                description: |
                  A long description corresponding to the `errorCode` with additional information.
                example: Spaces not allowed in facility code
            required:
              - errorCodeText
              - errorCodeMessage
      required:
        - httpMethod
        - requestUri
        - statusCode
        - statusCodeText
        - errorDateTime
        - errors

    ############################
    # Address Location Interface
    ############################
    AddressLocation:
      title: Address Location
      type: object
      description: An interface used to express a location using an `Address` object.
      properties:
        locationName:
          type: string
          description: The name of the location.
          example: Port of Amsterdam
          maxLength: 100
        locationType:
          type: string
          maxLength: 4
          description: Discriminator used to identify this as an `Address` location interface.
          example: ADDR
        address:
          $ref: '#/components/schemas/Address'
      required:
        - locationType
        - address
    Address:
      type: object
      title: Address
      description: |
        An object for storing address related information
      properties:
        name:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            Name of the address
          example: Henrik
        street:
          type: string
          maxLength: 100
          description: The name of the street of the party’s address.
          example: Ruijggoordweg
        streetNumber:
          type: string
          maxLength: 50
          description: The number of the street of the party’s address.
          example: '100'
        floor:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The floor of the party’s street number.
          example: N/A
        postCode:
          type: string
          maxLength: 10
          description: The post code of the party’s address.
          example: 1047 HM
        city:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 65
          description: |
            The city name of the party’s address.
          example: Amsterdam
        stateRegion:
          type: string
          maxLength: 65
          description: The state/region of the party’s address.
          example: North Holland
        countryCode:
          type: string
          pattern: '^[A-Z]{2}$'
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: NL
      required:
        - name
        - countryCode

    #########################
    # City Location Interface
    #########################
    CityLocation:
      type: object
      title: City Location
      description: |
        An interface used to express a location using a `City`, `state/region` and `country`
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        locationType:
          type: string
          description: |
            Discriminator used to identify this as a `City Location` interface
          example: CITY
        city:
          type: object
          description: |
            An object for storing city, state/region and coutry related information
          properties:
            city:
              type: string
              pattern: ^\S(?:.*\S)?$
              maxLength: 65
              description: |
                The city name of the party’s address.
              example: Amsterdam
            stateRegion:
              type: string
              maxLength: 65
              description: |
                The state/region of the party’s address.
              example: North Holland
            countryCode:
              type: string
              pattern: '^[A-Z]{2}$'
              minLength: 2
              maxLength: 2
              description: |
                The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
              example: NL
          required:
            - city
            - country
      required:
        - locationType
        - city

    #############################
    # Facility Location Interface
    #############################
    FacilityLocation:
      type: object
      title: Facility Location
      description: |
        An interface used to express a location using a `Facility`. The facility can either be expressed using a `BIC` code or a `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        locationType:
          type: string
          maxLength: 4
          description: |
            Discriminator used to identify this as a `Facility Location` interface
          example: FACI
        UNLocationCode:
          type: string
          pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
          minLength: 5
          maxLength: 5
          example: NLAMS
          description: |-
            The UN Location code specifying where the place is located. The pattern used must be
            
            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
            
            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
            
            This field is **conditionally mandatory** depending on the value of the `facilityCodeListProvider` field.
        facilityCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 6
          description: |-
            The code used for identifying the specific facility. This code does not include the UN Location Code.
            The definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:
            - for `SMDG` - the codeList used is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)  - for `BIC` - the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/)
          nullable: false
          example: ADT
        facilityCodeListProvider:
          type: string
          description: |
            The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`
            - `BIC` (Requires a UN Location Code) - `SMDG` (Requires a UN Location Code)
          enum:
            - BIC
            - SMDG
          example: SMDG
      required:
        - locationType
        - facilityCode
        - facilityCodeListProvider

    ###############################
    # UNLocation Location Interface
    ###############################
    UNLocationLocation:
      title: UNLocation Location
      type: object
      description: An interface used to express a location using a `Un Location Code`.
      additionalProperties: false
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        locationType:
          type: string
          maxLength: 4
          description: Discriminator used to identify this as a `UNLocation` location interface.
          example: UNLO
        UNLocationCode:
          type: string
          pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
          minLength: 5
          maxLength: 5
          example: NLAMS
          description: |-
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
      required:
        - locationType
        - UNLocationCode

    ################
    # Document Party
    ################
    OtherDocumentParty:
      type: object
      title: Other Document Party
      description: |
        A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.
      properties:
        party:
          $ref: '#/components/schemas/Party'
        partyFunction:
          type: string
          maxLength: 3
          description: |
            Specifies the role of the party in a given context. Possible values are:

            - `SCO` (Service Contract Owner)
            - `DDR` (Consignor's freight forwarder)
            - `DDS` (Consignee's freight forwarder)
            - `COW` (Invoice payer on behalf of the consignor (shipper))
            - `COX` (Invoice payer on behalf of the consignee)
            - `N1` (First Notify Party)
            - `N2` (Second Notify Party)
            - `NI` (Other Notify Party)
          example: DDS
      required:
        - party
        - partyFunction

    PartyAddress:
      type: object
      title: Party Address
      description: |
        An object for storing address related information
      properties:
        street:
          type: string
          description: The name of the street of the party’s address.
          maxLength: 100
          example: Ruijggoordweg
        streetNumber:
          type: string
          description: The number of the street of the party’s address.
          maxLength: 50
          example: '100'
        floor:
          type: string
          description: |
            The floor of the party’s street number.
          pattern: '^\S(?:.*\S)?$'
          maxLength: 50
          example: 2nd
        postCode:
          type: string
          description: The post code of the party’s address.
          maxLength: 10
          example: 1047 HM
        city:
          type: string
          description: |
            The city name of the party’s address.
          pattern: '^\S(?:.*\S)?$'
          maxLength: 65
          example: Amsterdam
        UNLocationCode:
          type: string
          description: |
            The UN Location code specifying where the carrier booking office is located. The pattern used must be
            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
          minLength: 5
          maxLength: 5
          example: NLAMS
        stateRegion:
          type: string
          description: The state/region of the party’s address.
          maxLength: 65
          example: North Holland
        countryCode:
          type: string
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          pattern: '^[A-Z]{2}$'
          minLength: 2
          maxLength: 2
          example: NL
      required:
        - street
        - streetNumber
        - city
        - countryCode

    Shipper:
      type: object
      title: Shipper
      description: |
        The party by whom or in whose name or on whose behalf a contract of carriage of goods by sea has been concluded with a carrier, or the party by whom or in whose name, or on whose behalf, the goods are actually delivered to the carrier in relation to the contract of carriage by sea.

        **Condition:** Either the `address` or the `displayedAddress` must be included in the `Transport Document`.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            Name of the party.
          example: IKEA Denmark
        address:
          $ref: '#/components/schemas/PartyAddress'
        displayedAddress:
          type: array
          minItems: 1
          maxItems: 999
          description: |
            The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`. For physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters. No limit for electronic BL (`isElectronic=true`).
            
            **Condition:** if provided, the displayed address must be included in the Transport Document.
          items:
            type: string
            maxLength: 35
            description: |
              A single address line
            example: Strawinskylaan 4117
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        partyContactDetails:
          type: array
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
      required:
        - partyName

    Consignee:
      type: object
      title: Consignee
      description: |
        The party to which goods are consigned in the `Master Bill of Lading`.
        
        **Condition:** Mandatory for non-negotiable BL (`isToOrder=false`)
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            Name of the party.
          example: IKEA Denmark
        address:
          $ref: '#/components/schemas/PartyAddress'
        displayedAddress:
          type: array
          minItems: 1
          maxItems: 999
          description: |
            The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`. For physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters. No limit for electronic BL (`isElectronic=true`).
            
            **Condition:** if provided, the displayed address must be included in the Transport Document.
          items:
            type: string
            maxLength: 35
            description: |
              A single address line
            example: Strawinskylaan 4117
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        partyContactDetails:
          type: array
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
      required:
        - partyName

    Endorsee:
      type: object
      title: Endorsee
      description: |
        The party to whom the title to the goods is transferred by means of endorsement.
        
        **Condition:** Can only be provided for negotiable BLs (`isToOrder=true`). If a negotiable BL does not have an `Endorsee`, the BL is said to be "blank endorsed". Note `Consignee` and `Endorsee` are mutually exclusive.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            Name of the party.
          example: IKEA Denmark
        address:
          $ref: '#/components/schemas/PartyAddress'
        displayedAddress:
          type: array
          minItems: 1
          maxItems: 999
          description: |
            The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`. For physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters. No limit for electronic BL (`isElectronic=true`).
            
            **Condition:** if provided, the displayed address must be included in the Transport Document.
          items:
            type: string
            maxLength: 35
            description: |
              A single address line
            example: Strawinskylaan 4117
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        partyContactDetails:
          type: array
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
      required:
        - partyName

    Party:
      type: object
      title: Party
      description: |
        Refers to a company or a legal entity.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            Name of the party.
          example: Asseco Denmark
        address:
          $ref: '#/components/schemas/PartyAddress'
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        partyContactDetails:
          type: array
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
      required:
        - partyName

    IssuingParty:
      type: object
      title: Issuing Party
      description: |
        Refers to a company or a legal entity.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            Name of the party.
          example: Asseco Denmark
        address:
          $ref: '#/components/schemas/PartyAddress'
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        partyContactDetails:
          type: array
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
      required:
        - partyName
        - address

    PartyContactDetail:
      type: object
      title: Party Contact Detail
      description: |
        The contact details of the person to contact. It is mandatory to provide either `phone` and/or `email` along with the `name`.
      example:
        name: Henrik
        phone: +45 51801234
      properties:
        name:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            Name of the contact
          example: Henrik
      anyOf:
        - type: object
          title: Phone required
          description: |
            `Phone` is mandatory to provide
          properties:
            phone:
              type: string
              pattern: ^\S(?:.*\S)?$
              maxLength: 30
              description: |
                Phone number for the contact
              example: +45 70262970
          required:
            - phone
        - type: object
          title: Email required
          description: |
            `Email` is mandatory to provide
          properties:
            email:
              type: string
              pattern: ^.+@\S+$
              maxLength: 100
              description: |
                `E-mail` address to be used
              example: info@dcsa.org
          required:
            - email
      required:
        - name
    IdentifyingCode:
      type: object
      title: Identifying Code
      properties:
        codeListProvider:
          type: string
          maxLength: 100
          description: |
            A list of codes identifying a party. Possible values are:
            - `WAVE` (Wave)
            - `CARX` (CargoX)
            - `ESSD` (EssDOCS)
            - `IDT` (ICE Digital Trade)
            - `BOLE` (Bolero)
            - `EDOX` (EdoxOnline)
            - `IQAX` (IQAX)
            - `SECR` (Secro)
            - `TRGO` (TradeGO)
            - `ETEU` (eTEU)
            - `TRAC` (TRACE Origional)
            - `BRIT` (BRITC eBL)
            - `GSBN` (Global Shipping Business Network)
            - `WISE` (WiseTech)
            - `GLEIF` (Global Legal Entity Identifier Foundation)
            - `W3C` (World Wide Web Consortium)
            - `DNB` (Dun and Bradstreet)
            - `FMC` (Federal Maritime Commission)
            - `DCSA` (Digitial Container Shipping Association)
            - `ZZZ` (Mutually defined)
          example: W3C
        partyCode:
          type: string
          maxLength: 100
          description: |
            Code to identify the party as provided by the code list provider
          example: MSK
        codeListName:
          type: string
          maxLength: 100
          description: |
            The name of the code list, code generation mechanism or code authority for the `partyCode`. Example values could be:
            - `DID` (Decenbtralized Identifier) for `codeListProvider` `W3C`
            - `LEI` (Legal Entity Identifier) for `codeListProvider` `GLEIF`
            - `DUNS` (Data Universal Numbering System) for `codeListProvider` `DNB`
          example: DID
      required:
        - codeListProvider
        - partyCode
    TaxLegalReference:
      type: object
      title: Tax & Legal Reference
      description: |
        Reference that uniquely identifies a party for tax and/or legal purposes in accordance with the relevant jurisdiction.
        A list of examples:
        | Type  | Country | Description | |-------|:-------:|-------------| |PAN|IN|Goods and Services Tax Identification Number in India| |GSTIN|IN|Goods and Services Tax Identification Number in India| |IEC|IN|Importer-Exported Code in India| |RUC|EC|Registro Único del Contribuyente in Ecuador| |RUC|PE|Registro Único del Contribuyente in Peru| |NIF|MG|Numéro d’Identification Fiscal in Madagascar| |NIF|DZ|Numéro d’Identification Fiscal in Algeria|
        Allowed combinations of `type` and `country` are maintained in [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/documentation/reference-data/taxandlegalreferences-v300.csv).
      properties:
        type:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The reference type code as defined by the relevant tax and/or legal authority.
          example: PAN
        countryCode:
          type: string
          pattern: '^[A-Z]{2}$'
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: NL
        value:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            The value of the `taxLegalReference`
          example: AAAAA0000A
      required:
        - type
        - countryCode
        - value

    ###########
    # Reference
    ###########
    Reference:
      type: object
      title: Reference
      description: |
        References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
      properties:
        type:
          type: string
          maxLength: 3
          description: |
            The reference type codes defined by DCSA. Possible values are:
            - `FF` (Freight Forwarder’s Reference)
            - `SI` (Shipper’s Reference)
            - `SPO` (Shippers Purchase Order Reference)
            - `CPO` (Consignees Purchase Order Reference)
            - `CR` (Customer’s Reference)
            - `AAO` (Consignee’s Reference)
            - `ECR` (Empty container release reference)
            - `CSI` (Customer shipment ID)
            - `BPR` (Booking party reference number)
            - `BID` (Booking Request ID)
            - `SAC` (Shipping Agency Code)
          example: FF
        value:
          type: string
          maxLength: 100
          description: |
            The value of the reference. 
          example: HHL00103004
      required:
        - type
        - value

    ##################
    # Consignment Item
    ##################
    ConsignmentItem:
      type: object
      title: Consignment Item
      description: |
        Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`
      properties:
        carrierBookingReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          # Extended description of carrierBookingReference compared to DCSA_DOMAIN description
          description: |
            The associated booking number provided by the carrier for this `Consignment Item`.

            When multiple `carrierBookingReferences` are used then the bookings referred to must all contain the same:
            - transportPlan
            - shipmentLocations
            - receiptTypeAtOrigin
            - deliveryTypeAtDestination
            - cargoMovementTypeAtOrigin
            - cargoMovementTypeAtDestination
            - serviceContractReference
            - termsAndConditions
            - Place of B/L Issue (if provided)
          example: ABC709951
        descriptionOfGoods:
          type: string
          maxLength: 5000
          pattern: ^\S(?:.*\S)?$
          description: The cargo description are details which accurately and properly describe the cargo being shipped in the container(s) as provided by the shipper.
          example: blue shoes size 47
        HSCodes:
          type: array
          minItems: 1
          description: |
            A list of `HS Codes` that apply to this `consignmentItem`
          items:
            type: string
            pattern: '^\d{6,10}$'
            minLength: 6
            maxLength: 10
            description: |
              Used by customs to classify the product being shipped. The type of HS code depends on country and customs requirements. The code must be at least 6 and at most 10 digits.

              More information can be found here: [HS Nomenclature 2022 edition](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools/hs-nomenclature-2022-edition/hs-nomenclature-2022-edition.aspx ).

              This standard is based on the 2022 revision.
            example: '851713'
        shippingMarks:
          type: array
          description: |
            A list of the `ShippingMarks` applicable to this `consignmentItem`
          items:
            type: string
            maxLength: 500
            description: |
              The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the customer.
            example: Made in China
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
      required:
        - carrierBookingReference
        - descriptionOfGoods
        - HSCodes
    ConsignmentItemCarrier:
      type: object
      title: Consignment Item (Carrier)
      description: |
        Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`
      properties:
        cargoItems:
          type: array
          minItems: 1
          description: |
            A list of all `cargoItems`
          items:
            $ref: '#/components/schemas/CargoItemCarrier'
      allOf:
        - $ref: '#/components/schemas/ConsignmentItem'
      required:
        - cargoItems
    ConsignmentItemShipper:
      type: object
      title: Consignment Item (Shipper)
      description: |
        Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`
      properties:
        commoditySubreference:
          type: string
          maxLength: 100
          pattern: ^\S(?:.*\S)?$
          description: |
            A unique reference to the commodity object assigned by the carrier in the booking confirmation. The reference must be provided by the shipper as part of the `Shipping Instructions` for the carrier to link this consignment item to the commodity. A commodity reference is only unique in the context of a booking.
          example: COM-001
        cargoItems:
          type: array
          minItems: 1
          description: |
            A list of all `cargoItems`
          items:
            $ref: '#/components/schemas/CargoItemShipper'
      allOf:
        - $ref: '#/components/schemas/ConsignmentItem'
      required:
        - cargoItems
        - commoditySubreference

    ##################
    # Customs Reference
    ##################
    CustomsReference:
      type: object
      title: Customs Reference
      description: |
        Reference associated with customs and/or excise purposes required by the relevant authorities for the import, export, or transit of the goods.

        A (small) list of examples:

        | Type  | Country | Description |
        |-------|:-------:|-------------|
        |ACID|EG|Advance Cargo Information Declaration in Egypt|
        |CERS|CA|Canadian Export Reporting System|
        |ITN|US|Internal Transaction Number in US|
        |PEB|ID|PEB reference number|
        |CSN|IN|Cargo Summary Notification (CSN)|

        Allowed combinations of `type` and `country` are maintained in [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/documentation/reference-data/customsreferences-v300.csv).
      properties:
        type:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The reference type code as defined in the relevant customs jurisdiction.
          example: ACID
        countryCode:
          type: string
          pattern: '^[A-Z]{2}$'
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: NL
        value:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            The value of the `customsReference`
          example: '4988470982020120017'
      required:
        - type
        - countryCode
        - value

    ############
    # Cargo Item
    ############
    CargoItemCarrier:
      type: object
      title: Cargo Item (Carrier)
      description: |
        A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.
      properties:
        equipmentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 11
          description: |
            The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
            According to [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).

            If a container does not comply with [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
          example: APZU4812090
        weight:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The total weight of the cargo including packaging items being carried in the container(s). Excludes the tare weight of the container(s).
          example: 13000.3
        weightUnit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: KGM
        volume:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            Calculated by multiplying the width, height, and length of the packed cargo.
          example: 12
        volumeUnit:
          type: string
          description: |
            The unit of measure which can be expressed in either imperial or metric terms
            - `FTQ` (Cubic foot)
            - `MTQ` (Cubic meter)

            **Condition:** Mandatory to provide if `volume` is provided
          enum:
            - MTQ
            - FTQ
          example: MTQ
        outerPackaging:
          $ref: '#/components/schemas/OuterPackagingCarrier'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
      required:
        - equipmentReference
        - weight
        - weightUnit
        - outerPackaging

    CargoItemShipper:
      type: object
      title: Cargo Item (Shipper)
      description: |
        A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.
      properties:
        equipmentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 11
          description: |
            The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
            According to [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).

            If a container does not comply with [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
          example: APZU4812090
        weight:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The total weight of the cargo including packaging items being carried in the container(s). Excludes the tare weight of the container(s).
          example: 13000.3
        weightUnit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: KGM
        volume:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            Calculated by multiplying the width, height, and length of the packed cargo.
          example: 12
        volumeUnit:
          type: string
          description: |
            The unit of measure which can be expressed in either imperial or metric terms
            - `FTQ` (Cubic foot)
            - `MTQ` (Cubic meter)

            **Condition:** Mandatory to provide if `volume` is provided
          enum:
            - MTQ
            - FTQ
          example: MTQ
        outerPackaging:
          $ref: '#/components/schemas/OuterPackagingShipper'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
      required:
        - equipmentReference
        - weight
        - weightUnit

    ################
    # Outerpackaging
    ################
    # Object used for the POST Shipping Instructions - here it is **not** possible to modify DG attributes
    # Compared to the outerPackaging of the Booking - this object also contains the `packageCode`
    OuterPackagingShipper:
      type: object
      title: Outer Packaging (Shipper)
      description: |
        Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.

        **Condition:** Mandatory for non-dangerous goods cargo.
      properties:
        packageCode:
          type: string
          pattern: '^[A-Z0-9]{2}$'
          minLength: 2
          maxLength: 2
          description: |
            A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation N°21 - Revision 12  Annexes V and VI](https://unece.org/sites/default/files/2021-06/rec21_Rev12e_Annex-V-VI_2021.xls)

            **Condition:** only applicable to dangerous goods if the `IMO packaging code` is not available.
          example: 5H
        numberOfPackages:
          type: integer
          format: int32
          minimum: 1
          # Extended description of numberOfPackages compared to DCSA_DOMAIN description
          description: |
            Specifies the number of outer packagings/overpacks associated with this `Cargo Item`.
          example: 18
        description:
          type: string
          maxLength: 100
          description: |
            Description of the outer packaging/overpack.
          example: 'Drum, steel'
      required:
        - numberOfPackages
        - description
    OuterPackagingCarrier:
      type: object
      title: Outer Packaging (Carrier)
      description: |
        Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.
      properties:
        imoPackagingCode:
          type: string
          pattern: '^[A-Z0-9]{1,5}$'
          minLength: 1
          maxLength: 5
          description: |
            The code of the packaging as per IMO.

            **Condition:** only applicable to dangerous goods if specified in the IMO IMDG code amendment version 41-22. If not available, the package code as per UN recommendation 21 should be used.
          example: 1A2
        dangerousGoods:
          type: array
          description: |
            A list of `Dangerous Goods`
          items:
            $ref: '#/components/schemas/DangerousGoods'
      allOf:
        - $ref: '#/components/schemas/OuterPackagingShipper'

    #################
    # Dangerous Goods
    #################
    DangerousGoods:
      type: object
      title: Dangerous Goods
      description: |
        Specification for `Dangerous Goods`. It is mandatory to either provide the `unNumber` or the `naNumber`. Dangerous Goods is based on **IMDG Amendment Version 41-22**.
      oneOf:
        - type: object
          title: UN Number
          properties:
            unNumber:
              type: string
              pattern: '^\d{4}$'
              minLength: 4
              maxLength: 4
              description: |
                United Nations Dangerous Goods Identifier (UNDG) assigned by the UN Sub-Committee of Experts on the Transport of Dangerous Goods and shown in the IMO IMDG.
              example: '1463'
          required:
            - unNumber
        - type: object
          title: NA Number
          properties:
            naNumber:
              type: string
              pattern: '^\d{4}$'
              minLength: 4
              maxLength: 4
              description: |
                Four-digit number that is assigned to dangerous, hazardous, and harmful substances by the United States Department of Transportation.
              example: '9037'
          required:
            - naNumber
      properties:
        codedVariantList:
          type: string
          pattern: '^[0-3][0-9A-Z]{3}$'
          minLength: 4
          maxLength: 4
          description: |
            Four-character code supplied by Exis Technologies that assists to remove ambiguities when identifying a variant within a single UN number or NA number that may occur when two companies exchange DG information.

            Character | Valid Characters | Description
            :--------:|------------------|------------
            1| 0, 1, 2, 3|The packing group. Code 0 indicates there is no packing group
            2|0 to 9 and A to Z|A sequence letter for the PSN, or 0 if there were no alternative PSNs
            3 and 4|0 to 9 and A to Z|Two sequence letters for other information, for the cases where the variant is required because of different in subrisks, packing instruction etc.
          example: '2200'
        properShippingName:
          type: string
          maxLength: 250
          description: |
            The proper shipping name for goods under IMDG Code, or the product name for goods under IBC Code and IGC Code, or the bulk cargo shipping name for goods under IMSBC Code, or the name of oil for goods under Annex I to the MARPOL Convention.
          example: 'Chromium Trioxide, anhydrous'
        technicalName:
          type: string
          maxLength: 250
          description: |
            The recognized chemical or biological name or other name currently used for the referenced dangerous goods as described in chapter 3.1.2.8 of the IMDG Code.
        imoClass:
          type: string
          maxLength: 4
          description: |
            The hazard class code of the referenced dangerous goods according to the specified regulation. Examples of possible values are:

            - `1.1A` (Substances and articles which have a mass explosion hazard)
            - `1.6N` (Extremely insensitive articles which do not have a mass explosion hazard)
            - `2.1` (Flammable gases)
            - `8` (Corrosive substances)

            The value must comply with one of the values in the [DG IMO Class value table](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/dcsa/reference-data/imoclasses-v3.1.0.csv)
          example: 1.4S
        subsidiaryRisk1:
          type: string
          pattern: '^[0-9](\.[0-9])?$'
          minLength: 1
          maxLength: 3
          description: |
            Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.
          example: '1.2'
        subsidiaryRisk2:
          type: string
          pattern: '^[0-9](\.[0-9])?$'
          minLength: 1
          maxLength: 3
          description: |
            Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.
          example: '1.2'
        isMarinePollutant:
          type: boolean
          description: |
            Indicates if the goods belong to the classification of Marine Pollutant.
          example: false
        packingGroup:
          type: integer
          format: int32
          minimum: 1
          maximum: 3
          description: |
            The packing group according to the UN Recommendations on the Transport of Dangerous Goods and IMO IMDG Code.
          example: 3
        isLimitedQuantity:
          type: boolean
          description: |
            Indicates if the dangerous goods can be transported as limited quantity in accordance with Chapter 3.4 of the IMO IMDG Code.
          example: false
        isExceptedQuantity:
          type: boolean
          description: |
            Indicates if the dangerous goods can be transported as excepted quantity in accordance with Chapter 3.5 of the IMO IMDG Code.
          example: false
        isSalvagePackings:
          type: boolean
          description: |
            Indicates if the cargo has special packaging for the transport, recovery or disposal of damaged, defective, leaking or nonconforming hazardous materials packages, or hazardous materials that have spilled or leaked.
          example: false
        isEmptyUncleanedResidue:
          type: boolean
          description: |
            Indicates if the cargo is residue.
          example: false
        isWaste:
          type: boolean
          description: |
            Indicates if waste is being shipped
          example: false
        isHot:
          type: boolean
          description: |
            Indicates if high temperature cargo is shipped.
          example: false
        isCompetentAuthorityApprovalProvided:
          type: boolean
          description: |
            Indicates if the cargo require approval from authorities
          example: false
        competentAuthorityApproval:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name and reference number of the competent authority providing the approval.
          example: '{Name and reference...}'
        segregationGroups:
          type: array
          description: |
            List of the segregation groups applicable to specific hazardous goods according to the IMO IMDG Code.

            **Condition:** only applicable to specific hazardous goods.
          items:
            type: string
            maxLength: 2
            description: |
              Grouping of Dangerous Goods having certain similar chemical properties. Possible values are:

              - `1` (Acids)
              - `2` (Ammonium Compounds)
              - `3` (Bromates)
              - `4` (Chlorates)
              - `5` (Chlorites)
              - `6` (Cyanides)
              - `7` (Heavy metals and their salts)
              - `8` (Hypochlorites)
              - `9` (Lead and its compounds)
              - `10` (Liquid halogenated hydrocarbons)
              - `11` (Mercury and mercury compounds)
              - `12` (Nitrites and their mixtures)
              - `13` (Perchlorates)
              - `14` (Permanganates)
              - `15` (Powdered metals)
              - `16` (Peroxides),
              - `17` (Azides)
              - `18` (Alkalis)
            example: '12'
        innerPackagings:
          type: array
          description: |
            A list of `Inner Packings` contained inside this `outer packaging/overpack`.
          items:
            $ref: '#/components/schemas/InnerPackaging'
        emergencyContactDetails:
          $ref: '#/components/schemas/EmergencyContactDetails'
        EMSNumber:
          type: string
          maxLength: 7
          description: |
            The emergency schedule identified in the IMO EmS Guide – Emergency Response Procedures for Ships Carrying Dangerous Goods. Comprises 2 values; 1 for spillage and 1 for fire. Possible values spillage: S-A to S-Z. Possible values fire: F-A to F-Z.
          example: F-A S-Q
        endOfHoldingTime:
          type: string
          format: date
          description: |
            Date by when the refrigerated liquid needs to be delivered.
          example: '2021-09-03'
        fumigationDateTime:
          type: string
          format: date-time
          description: |
            Date & time when the container was fumigated
          example: '2021-09-03T09:03:00-02:00'
        isReportableQuantity:
          type: boolean
          description: |
            Indicates if a container of hazardous material is at the reportable quantity level. If `true`, a report to the relevant authority must be made in case of spill.
          example: false
        inhalationZone:
          type: string
          maxLength: 1
          minLength: 1
          description: |
            The zone classification of the toxicity of the inhalant. Possible values are:

            - `A` (Hazard Zone A) can be assigned to specific gases and liquids
            - `B` (Hazard Zone B) can be assigned to specific gases and liquids
            - `C` (Hazard Zone C) can **only** be assigned to specific gases
            - `D` (Hazard Zone D) can **only** be assigned to specific gases
          example: A
        grossWeight:
          type: object
          description: |
            Total weight of the goods carried, including packaging.
          properties:
            value:
              type: number
              format: float
              example: 12000.3
              minimum: 0
              exclusiveMinimum: true
              description: |
                The grand total weight of the DG cargo and weight per `UNNumber`/`NANumber` including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.
            unit:
              type: string
              description: |
                The unit of measure which can be expressed in imperial or metric terms

                - `KGM` (Kilograms)
                - `LBR` (Pounds)
              enum:
                - KGM
                - LBR
              example: KGM
          required:
            - value
            - unit
        netWeight:
          type: object
          description: |
            Total weight of the goods carried, excluding packaging.
          properties:
            value:
              type: number
              format: float
              description: |
                Total weight of the goods carried, excluding packaging.
              example: 2.4
            unit:
              type: string
              description: |
                Unit of measure used to describe the `netWeight`. Possible values are

                - `KGM` (Kilograms)
                - `LBR` (Pounds)
              enum:
                - KGM
                - LBR
              example: KGM
          required:
            - value
            - unit
        netExplosiveContent:
          type: object
          description: |
            The total weight of the explosive substances, without the packaging’s, casings, etc.
          properties:
            value:
              type: number
              format: float
              description: |
                The total weight of the explosive substances, without the packaging’s, casings, etc.
              example: 2.4
            unit:
              type: string
              description: |
                Unit of measure used to describe the `netExplosiveWeight`. Possible values are

                - `KGM` (Kilograms)
                - `GRM` (Grams)
              enum:
                - KGM
                - GRM
              example: KGM
          required:
            - value
            - unit
        volume:
          type: object
          description: |
            The volume of the referenced dangerous goods.

            **Condition:** only applicable to liquids and gas.
          properties:
            value:
              type: number
              format: float
              description: |
                The volume of the referenced dangerous goods.
              example: 2.4
            unit:
              type: string
              description: |
                The unit of measure which can be expressed in either imperial or metric terms

                - `FTQ` (Cubic foot)
                - `MTQ` (Cubic meter)
                - `LTR` (Litre)
              enum:
                - MTQ
                - FTQ
                - LTR
              example: MTQ
          required:
            - value
            - unit
        limits:
          $ref: '#/components/schemas/Limits'
      required:
        - properShippingName
        - imoClass
    InnerPackaging:
      type: object
      title: Inner Packaging
      description: |
        Object for inner packaging specification
      properties:
        quantity:
          type: integer
          format: int32
          description: |
            Count of `Inner Packagings` of the referenced `Dangerous Goods`.
          example: 20
        material:
          type: string
          maxLength: 100
          description: |
            The `material` used for the `Inner Packaging` of the referenced `Dangerous Goods`.
          example: Plastic
        description:
          type: string
          maxLength: 100
          description: |
            Description of the packaging.
          example: Wowen plastic water resistant Bag
      required:
        - quantity
        - material
        - description
    EmergencyContactDetails:
      type: object
      title: Emergency Contact Details
      description: |
        24 hr emergency contact details
      properties:
        contact:
          type: string
          maxLength: 255
          description: |
            Name of the Contact person during an emergency.
          example: Henrik Larsen
        provider:
          type: string
          maxLength: 255
          description: |
            Name of the third party vendor providing emergency support
          example: GlobeTeam
        phone:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 30
          description: |
            Phone number for the contact
          example: +45 70262970
        referenceNumber:
          type: string
          maxLength: 255
          description: |
            Contract reference for the emergency support provided by an external third party vendor.
          example: '12234'
      required:
        - contact
        - phone
    Limits:
      type: object
      description: |
        Limits for the `Dangerous Goods`. The same `Temperature Unit` needs to apply to all attributes in this structure.
      properties:
        temperatureUnit:
          type: string
          description: |
            The unit for **all attributes in the limits structure** in Celsius or Fahrenheit

            - `CEL` (Celsius)
            - `FAH` (Fahrenheit)
          enum:
            - CEL
            - FAH
          example: CEL
        flashPoint:
          type: number
          format: float
          description: |
            Lowest temperature at which a chemical can vaporize to form an ignitable mixture in air. Condition: only applicable to specific hazardous goods according to the IMO IMDG Code amendment version 41-22.
          example: 42
        transportControlTemperature:
          type: number
          format: float
          description: |
            Maximum temperature at which certain substance (such as organic peroxides and self-reactive and related substances) can be safely transported for a prolonged period.
          example: 24.1
        transportEmergencyTemperature:
          type: number
          format: float
          description: |
            Temperature at which emergency procedures shall be implemented
          example: 74.1
        SADT:
          type: number
          format: float
          description: |
            Lowest temperature in which self-accelerating decomposition may occur in a substance
          example: 54.1
        SAPT:
          type: number
          format: float
          description: |
            Lowest temperature in which self-accelerating polymerization may occur in a substance
          example: 70
      required:
        - temperatureUnit

    ##############################
    # Utilized Transport Equipment
    ##############################
    # Calculated fields have been removed
    UtilizedTransportEquipmentCarrier:
      type: object
      title: Utilized Transport Equipment (Carrier)
      description: |
        Specifies the container (`equipment`), the total `weight`, total `volume`, possible `ActiveReeferSettings`, `seals` and `references`
      properties:
        equipment:
          $ref: '#/components/schemas/Equipment'
        isShipperOwned:
          type: boolean
          description: |
            Indicates whether the container is shipper owned (SOC).
          example: true
        isNonOperatingReefer:
          type: boolean
          description: |
            If the equipment is a Reefer Container then setting this attribute will indicate that the container should be treated as a `DRY` container.

            **Condition:** Only applicable if `ISOEquipmentCode` shows a Reefer type.
          example: false
        activeReeferSettings:
          $ref: '#/components/schemas/ActiveReeferSettings'
        seals:
          type: array
          minItems: 1
          description: |
            A list of `Seals`
          items:
            $ref: '#/components/schemas/Seal'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
      required:
        - equipment
        - isShipperOwned
        - seals
    UtilizedTransportEquipmentShipper:
      type: object
      title: Utilized Transport Equipment (Shipper)
      description: |
        Specifies the container (`Equipment`), `Seals` and `References`
      properties:
        seals:
          type: array
          minItems: 1
          description: |
            A list of `Seals`
          items:
            $ref: '#/components/schemas/Seal'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
      oneOf:
        - $ref: '#/components/schemas/UTEquipment'
        - $ref: '#/components/schemas/UTEquipmentReference'
      discriminator:
        propertyName: isShipperOwned
        mapping:
          'true': '#/components/schemas/UTEquipment'
          'false': '#/components/schemas/UTEquipmentReference'
      required:
        - seals
    UTEquipment:
      type: object
      title: Shipper Owned Equipment (SoC)
      description: |
        To be used for SoC (Shipper owned Containers). If `isShipperOwned` is true then the equipment used needs to be specified
      properties:
        isShipperOwned:
          type: boolean
          description: |
            Indicates whether the container is shipper owned (SOC).
          example: true
        equipment:
          $ref: '#/components/schemas/RequiredEquipment'
      required:
        - isShipperOwned
        - equipment
    UTEquipmentReference:
      type: object
      title: Carrier Owned Equipment
      description: |
        To be used when referring to carrier owned containers (`isShipperOwned` is false). In this case it is only necessary to provide `equipmentReference`
      properties:
        isShipperOwned:
          type: boolean
          description: |
            Indicates whether the container is shipper owned (SOC).
          example: false
        equipmentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 11
          description: |
            The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
            According to [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).

            If a container does not comply with [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
          example: APZU4812090
      required:
        - isShipperOwned
        - equipmentReference

    ###########
    # Equipment
    ###########
    Equipment:
      type: object
      description: |
        Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.
      properties:
        equipmentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 11
          description: |
            The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
            According to [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).

            If a container does not comply with [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
          example: APZU4812090
        ISOEquipmentCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 4
          description: |
            Unique code for the different equipment size and type used to transport commodities. The code can refer to either the ISO size type (e.g. 22G1) or the ISO type group (e.g. 22GP) following the [ISO 6346](https://en.wikipedia.org/wiki/ISO_6346) standard.
          example: 22GP
        tareWeight:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The weight of an empty container (gross container weight).
          example: 4800
        weightUnit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms
            - `KGM` (Kilograms)
            - `LBR` (Pounds)

            **Conditional:** Mandatory to provide if `tareWeight` is provided
          enum:
            - KGM
            - LBR
          example: KGM
      required:
        - equipmentReference
    RequiredEquipment:
      type: object
      title: Equipment (Required Properties)
      description: |
        Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.
      allOf:
        - $ref: '#/components/schemas/Equipment'
      required:
        - equipmentReference
        - ISOEquipmentCode
        - tareWeight
        - weightUnit

    ######
    # Seal
    ######
    Seal:
      type: object
      description: |
        Addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This `Seal` is meant to stay on until the shipment equipment reaches its final destination.
      properties:
        number:
          type: string
          maxLength: 15
          description: 'Identifies a seal affixed to the container.'
          example: VET123
        source:
          type: string
          description: |
            The source of the seal, namely who has affixed the seal. This attribute links to the Seal Source ID defined in the Seal Source reference data entity.
            - `CAR` (Carrier)
            - `SHI` (Shipper)
            - `VET` (Veterinary)
            - `CUS` (Customs)
          enum:
            - CAR
            - SHI
            - VET
            - CUS
          example: 'CUS'
      required:
        - number

    ########################
    # Active Reefer Settings
    ########################
    ActiveReeferSettings:
      type: object
      title: Active Reefer Settings
      description: |
        The specifications for a Reefer equipment.

        **Condition:** Only applicable when `isNonOperatingReefer` is set to `false`
      properties:
        temperatureSetpoint:
          type: number
          format: float
          description: |
            Target value of the temperature for the Reefer based on the cargo requirement.
          example: -15
        temperatureUnit:
          type: string
          description: |
            The unit for temperature in Celsius or Fahrenheit

            - `CEL` (Celsius)
            - `FAH` (Fahrenheit)

            **Condition:** Mandatory to provide if `temperatureSetpoint` is provided
          enum:
            - CEL
            - FAH
          example: CEL
        o2Setpoint:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: |
            The percentage of the controlled atmosphere CO<sub>2</sub> target value
          example: 25
        co2Setpoint:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: |
            The percentage of the controlled atmosphere CO<sub>2</sub> target value
          example: 25
        humiditySetpoint:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: |
            The percentage of the controlled atmosphere humidity target value
          example: 95.6
        airExchangeSetpoint:
          type: number
          format: float
          minimum: 0
          description: |
            Target value for the air exchange rate which is the rate at which outdoor air replaces indoor air within a Reefer container
          example: 15.4
        airExchangeUnit:
          type: string
          description: |
            The unit for `airExchange` in metrics- or imperial- units per hour
            - `MQH` (Cubic metre per hour)
            - `FQH` (Cubic foot per hour)

            **Condition:** Mandatory to provide if `airExchange` is provided
          enum:
            - MQH
            - FQH
          example: MQH
        isVentilationOpen:
          type: boolean
          description: |
            If `true` the ventilation orifice is `Open` - if `false` the ventilation orifice is `closed`
          example: true
        isDrainholesOpen:
          type: boolean
          description: |
            Is drainholes open on the container
          example: true
        isBulbMode:
          type: boolean
          description: |
            Is special container setting for handling flower bulbs active
          example: true
        isColdTreatmentRequired:
          type: boolean
          description: |
            Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD
          example: true
        isControlledAtmosphereRequired:
          type: boolean
          description: |
            Indicator of whether cargo requires Controlled Atmosphere.
          example: true

    ##########################
    # Advance Manifest Filings
    ##########################

    AdvanceManifestFiling:
      type: object
      title: Advance Manifest Filing
      description: |
        An Advance Maifest Filing defined by a Manifest type code in combination with a country code.

        A list of `manifestTypeCodes` together with `countryCode` is maintained in [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/documentation/reference-data/advancemanifestfilings-v300.csv). A (small) subset can be seen here:

        | manifestTypeCode | countryCode | Description |
        |-----------------------|:-------------:|-------------|
        |ACI|EG|Advance Cargo Information in Egypt|
        |ACE|US|Automated Commercial Environment in the United States|
        |AFR|JP|Cargo Summary Notification (CSN)|
      properties:
        manifestTypeCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The Manifest type code as defined by the provider. A list of `manifestTypeCodes` together with `countryCode` is maintained in [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/blob/master/domain/documentation/reference-data/advancemanifestfilings-v300.csv)
          example: ACE
        countryCode:
          type: string
          pattern: '^[A-Z]{2}$'
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: NL
        advanceManifestFilingsHouseBLPerformedBy:
          type: string
          description: |
            Indicates whether the shipper (`SHIPPER`) will perform the advance manifest filing(s) for the House BL directly or if the carrier (`CARRIER`) should file them on their behalf. Allowed values are:

            - `SHIPPER` (the shipper does the filing)
            - `CARRIER` (the carrier does the filing)

            In case of self-filing (`SHIPPER`), the shipper can provide their `selfFilerCode` for each manifest.

            **Condition:** The `selfFilerCode` must be provided when `manifestTypeCode` is either `ACE` (US) or `ACI` (CA) and the `advanceManifestFilingsHouseBLPerformedBy` is set to `SHIPPER`.
          enum:
            - SHIPPER
            - CARRIER
          example: SHIPPER
        selfFilerCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            Code identifying the party who will submit the advance manifest filing(s) for the House BL.

            **Mandatory** if `manifestTypeCode` is either `ACE` (US) or `ACI` (CA) and `advanceManifestFilingsHouseBLPerformedBy` is set to `SHIPPER`.
          example: FLXP
      example:
        manifestTypeCode: ACE
        countryCode: US
        advanceManifestFilingsHouseBLPerformedBy: SHIPPER
        selfFilerCode: FLXP123
      required:
        - manifestTypeCode
        - countryCode
        - advanceManifestFilingsHouseBLPerformedBy

    ################################
    # Requested Carrier Certificates
    ################################
    RequestedCarrierCertificate:
      type: string
      maxLength: 100
      title: Requested Carrier Certificate
      description: |
        Name of the certificate. Detailed information about carrier certificates can be found [here](https://dcsa.org/wp-content/uploads/2023/12/28-12-2023_Carrier-Certificates-shipment-voyage-particulars-and-vessel-particulars.pdf). Possible values are:
        - `SHIPMENT_VOYAGE_PARTICULARS_1` (Shipment-Voyage Particulars 1)
        - `SHIPMENT_VOYAGE_PARTICULARS_2` (Shipment-Voyage Particulars 2)
        - `SHIPMENT_VOYAGE_PARTICULARS_3` (Shipment-Voyage Particulars 3)
        - `SHIPMENT_VOYAGE_PARTICULARS_4` (Shipment-Voyage Particulars 4)
        - `SHIPMENT_VOYAGE_PARTICULARS_5` (Shipment-Voyage Particulars 5)
        - `SHIPMENT_VOYAGE_PARTICULARS_6` (Shipment-Voyage Particulars 6)
        - `SHIPMENT_VOYAGE_PARTICULARS_7` (Shipment-Voyage Particulars 7)
        - `VESSEL_PARTICULARS_1` (Vessel Particulars 1)
        - `VESSEL_PARTICULARS_2` (Vessel Particulars 2)
        - `VESSEL_PARTICULARS_3` (Vessel Particulars 3)
        - `VESSEL_PARTICULARS_4` (Vessel Particulars 4)
        - `VESSEL_PARTICULARS_5` (Vessel Particulars 5)
        - `VESSEL_PARTICULARS_6` (Vessel Particulars 6)
        - `VESSEL_PARTICULARS_7` (Vessel Particulars 7)
        - `VESSEL_PARTICULARS_8` (Vessel Particulars 8)
        - `VESSEL_PARTICULARS_9` (Vessel Particulars 9)
        - `VESSEL_PARTICULARS_10` (Vessel Particulars 10)
        - `VESSEL_PARTICULARS_11` (Vessel Particulars 11)
        - `VESSEL_PARTICULARS_12` (Vessel Particulars 12)
        - `VESSEL_PARTICULARS_13` (Vessel Particulars 13)
        - `VESSEL_PARTICULARS_14` (Vessel Particulars 14)
        - `VESSEL_PARTICULARS_15` (Vessel Particulars 15)
        - `VESSEL_PARTICULARS_16` (Vessel Particulars 16)
        - `VESSEL_PARTICULARS_17` (Vessel Particulars 17)
        - `VESSEL_PARTICULARS_18` (Vessel Particulars 18)

        More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Edocumentation/blob/master/edocumentation-domain/src/main/resources/validations/carriercertificates.csv).
      example: VESSEL_PARTICULARS_1

    ###########################
    # Requested Carrier Clauses
    ###########################
    RequestedCarrierClause:
      type: string
      maxLength: 100
      title: Requested Carrier Clause
      description: |
        A clause to request from the carrier. Detailed information about the carrier clauses can be found [here](https://dcsa.org/wp-content/uploads/2023/12/202312-Standardised-Clauses-BL.pdf). Possible values are:
        - `CARGO_CARGOSPECIFICS` (Cargo/Cargo specifics)
        - `VESSELCONVEYANCE_COUNTRYSPECIFIC` (Vessel conveyance/Country Specific)
        - `CARGO_RETURNOFEMPTYCONTAINER` (Cargo/Return of Empty Container)
        - `CARGO_CARGOVALUE` (Cargo/Cargo value)
        - `CARGO_REEFERTEMPERATURE` (Cargo/Reefer temperature)
        - `CARGO_CONFLICTINGTEMPERATURES_MIXEDLOADS` (Cargo/Conflicting temperatures / Mixed loads)

        More infomation can be read [here](https://dcsa.org/wp-content/uploads/2023/12/202312-Standardised-Clauses-BL.pdf)
      example: CARGO_CARGOSPECIFICS

    ####################
    # Transport Document
    ####################
    TransportDocument:
      type: object
      title: Transport Document
      description: |
        The document that governs the terms of carriage between shipper and carrier for maritime transportation. Two distinct types of transport documents exist:
        - Bill of Lading
        - Sea Waybill. 
      properties:
        transportDocumentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 20
          description: |
            A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
          example: HHL71800000
        shippingInstructionsReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            The identifier for a `Shipping Istructions` provided by the carrier for system purposes.
          example: e0559d83-00e2-438e-afd9-fdd610c1a008
        transportDocumentStatus:
          type: string
          maxLength: 50
          description: |
            The status of the `Transport Document`. Possible values are:
            - DRAFT
            - APPROVED
            - ISSUED
            - PENDING SURRENDER FOR AMENDMENT
            - SURRENDER FOR AMENDMENT
            - PENDING SURRENDER FOR DELIVERY
            - SURRENDER FOR DELIVERY
            - VOIDED
          example: DRAFT
        transportDocumentTypeCode:
          type: string
          description: |
            Specifies the type of the transport document
            - `BOL` (Bill of Lading)
            - `SWB` (Sea Waybill)
          enum:
            - BOL
            - SWB
          example: SWB
        isShippedOnBoardType:
          type: boolean
          description: |
            Specifies whether the Transport Document is a received for shipment, or shipped on board.
          example: true
        freightPaymentTermCode:
          type: string
          description: |
            An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).

            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        isElectronic:
          type: boolean
          description: |
            An indicator whether the transport document is electronically transferred.
          example: true
        isToOrder:
          type: boolean
          description: |
            Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).

            `isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).
          example: false
        numberOfCopiesWithCharges:
          type: integer
          format: int32
          minimum: 0
          description: The requested number of copies of the Transport document to be issued by the carrier including charges. Only applicable for physical (paper) documents
          example: 2
        numberOfCopiesWithoutCharges:
          type: integer
          format: int32
          minimum: 0
          description: The requested number of copies of the Transport document to be issued by the carrier **NOT** including charges. Only applicable for physical (paper) documents
          example: 2
        numberOfOriginalsWithCharges:
          type: integer
          format: int32
          minimum: 0
          description: |
            Number of originals of the bill of lading that has been requested by the customer with charges. Only applicable for physical documents.
          example: 1
        numberOfOriginalsWithoutCharges:
          type: integer
          format: int32
          minimum: 0
          description: |
            Number of originals of the bill of lading that has been requested by the customer without charges. Only applicable for physical documents.
          example: 1
        displayedNameForPlaceOfReceipt:
          description: |
            The name to be used in order to specify how the `Place of Receipt` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        displayedNameForPortOfLoad:
          description: |
            The name to be used in order to specify how the `Port of Load` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        displayedNameForPortOfDischarge:
          description: |
            The name to be used in order to specify how the `Port of Discharge` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        displayedNameForPlaceOfDelivery:
          description: |
            The name to be used in order to specify how the `Place of Delivery` should be displayed on the transport document to match the name and/or address provided on the letter of credit.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
        shippedOnBoardDate:
          type: string
          format: date
          description: |
            Date when the last container that is linked to the transport document is physically loaded onboard the vessel indicated on the transport document.

            When provided on a transport document, the transportDocument is a `Shipped On Board` B/L.

            Exactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.
          example: '2020-12-12'
        termsAndConditions:
          type: string
          maxLength: 50000
          description: |
            Carrier terms and conditions of transport.
        receiptTypeAtOrigin:
          type: string
          maxLength: 3
          description: |
            Indicates the type of service offered at `Origin`. The options are:
            - `CY` (Container yard (incl. rail ramp))
            - `SD` (Store Door)
            - `CFS` (Container Freight Station)
          enum:
            - CY
            - SD
            - CFS
          example: CY
        deliveryTypeAtDestination:
          type: string
          maxLength: 3
          description: |
            Indicates the type of service offered at `Destination`. The options are:

            - `CY` (Container yard (incl. rail ramp))
            - `SD` (Store Door)
            - `CFS` (Container Freight Station)
          enum:
            - CY
            - SD
            - CFS
          example: CY
        cargoMovementTypeAtOrigin:
          type: string
          maxLength: 3
          description: |
            Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:

            - `FCL` (Full Container Load)
            - `LCL` (Less than Container Load)
          example: FCL
        cargoMovementTypeAtDestination:
          type: string
          maxLength: 3
          description: |
            Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:

            - `FCL` (Full Container Load)
            - `LCL` (Less than Container Load)
          example: FCL
        issueDate:
          type: string
          format: date
          description: |
            Local date when the transport document has been issued.

            Can be omitted on draft transport documents, but must be provided when the document has been issued.
          example: '2020-12-12'
        receivedForShipmentDate:
          type: string
          format: date
          description: |
            Date when the last container linked to the transport document is physically in the terminal (customers cleared against the intended vessel).

            When provided on a transport document, the transportDocument is a `Received For Shipment` B/L.

            Exactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.
          example: '2020-12-12'
        serviceContractReference:
          type: string
          maxLength: 30
          description: |
            Reference number for agreement between shipper and carrier through which the shipper commits to provide a certain minimum quantity of cargo over a fixed period, and the carrier commits to a certain rate or rate schedule.
          example: HHL51800000
        contractQuotationReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference. Mandatory if service contract (owner) is not provided.
          example: HHL1401
        declaredValue:
          type: number
          format: float
          minimum: 0
          description: |
            The value of the cargo that the shipper declares to avoid the carrier's limitation of liability and "Ad Valorem" freight, i.e. freight which is calculated based on the value of the goods declared by the shipper.
          example: 1231.1
        declaredValueCurrency:
          type: string
          pattern: '^[A-Z]{3}$'
          minLength: 3
          maxLength: 3
          description: |
            The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
          example: DKK
        carrierCode:
          type: string
          pattern: ^\S+$
          maxLength: 4
          description: |
            The `NMFTA` or `SMDG` code of the issuing carrier of the `Transport Document`
          example: MMCU
        carrierCodeListProvider:
          type: string
          description: |
            The code list provider for the carrier code. Possible values are:
            - `SMDG` (Ship Message Design Group)
            - `NMFTA` (National Motor Freight Traffic Association) _includes SPLC (Standard Point Location Code)_
          enum:
            - SMDG
            - NMFTA
          example: NMFTA
        issuingParty:
          $ref: '#/components/schemas/IssuingParty'
        carrierClauses:
          type: array
          description: |
            Additional clauses for a specific shipment added by the carrier to the Bill of Lading, subject to local rules / guidelines or certain mandatory information required to be shared with the customer.
          items:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 20000
            description: |
              The content of the clause.
            example: It is not allowed to...
        numberOfRiderPages:
          type: integer
          format: int32
          minimum: 0
          description: |
            The number of additional pages required to contain the goods description on a transport document. Only applicable for physical transport documents.
          example: 2
        transports:
          $ref: '#/components/schemas/Transports'
        charges:
          type: array
          description: |
            A list of `Charges`
          items:
            $ref: '#/components/schemas/Charge'
        # New values compared to SI - END
        placeOfIssue:
          type: object
          description: |
            An object to capture where the original Transport Document (`Bill of Lading`) will be issued.

            The location can be specified either as a `UN Location Code` or as a `CountryCode`.
          oneOf:
            - type: object
              title: UN Location Code
              properties:
                UNLocationCode:
                  type: string
                  pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
                  minLength: 5
                  maxLength: 5
                  description: |-
                    The UN Location code specifying where the place is located. The pattern used must be

                    - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                    - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

                    More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
                  example: NLAMS
              required:
                - UNLocationCode
            - type: object
              title: Country Code
              properties:
                countryCode:
                  type: string
                  pattern: '^[A-Z]{2}$'
                  minLength: 2
                  maxLength: 2
                  description: |
                    The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                  example: NL
              required:
                - countryCode
        invoicePayableAt:
          type: object
          description: |
            Location where payment of ocean freight and charges for the main transport will take place by the customer.

            The location can be provided as a `UN Location Code` or as a fallback - a `freeText` field
          oneOf:
            - type: object
              title: UN Location Code
              properties:
                UNLocationCode:
                  type: string
                  pattern: '^[A-Z]{2}[A-Z2-9]{3}$'
                  minLength: 5
                  maxLength: 5
                  description: |-
                    The UN Location code specifying where the place is located. The pattern used must be

                    - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                    - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

                    More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
                  example: NLAMS
              required:
                - UNLocationCode
            - type: object
              title: Free text
              properties:
                freeText:
                  type: string
                  maxLength: 35
                  description: |
                    The name of the location where payment will be rendered by the customer.
                  example: DCSA Headquarters
              required:
                - freeText
        partyContactDetails:
          type: array
          minItems: 1
          description: |
            The contact details of the person(s) to contact in relation to the **Transport Document** (changes, notifications etc.) 
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        documentParties:
          type: object
          description: |
            All `Parties` with associated roles.
          properties:
            shipper:
              $ref: '#/components/schemas/Shipper'
            consignee:
              $ref: '#/components/schemas/Consignee'
            endorsee:
              $ref: '#/components/schemas/Endorsee'
            other:
              type: array
              description: A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.
              items:
                $ref: '#/components/schemas/OtherDocumentParty'
          required:
            - shipper
        consignmentItems:
          type: array
          minItems: 1
          description: |
            A list of `ConsignmentItems`
          items:
            $ref: '#/components/schemas/ConsignmentItemCarrier'
        # Includes calculated fields!
        utilizedTransportEquipments:
          type: array
          minItems: 1
          description: |
            A list of `Utilized Transport Equipments` describing the equipment being used.
          items:
            $ref: '#/components/schemas/UtilizedTransportEquipmentCarrier'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
      required:
        - transportDocumentReference
        - transportDocumentStatus
        - transportDocumentTypeCode
        - isShippedOnBoardType
        - isElectronic
        - isToOrder
        - invoicePayableAt
        - partyContactDetails
        - documentParties
        - consignmentItems
        - utilizedTransportEquipments
        - termsAndConditions
        - receiptTypeAtOrigin
        - deliveryTypeAtDestination
        - cargoMovementTypeAtOrigin
        - cargoMovementTypeAtDestination
        - carrierCode
        - carrierCodeListProvider
        - issuingParty
        - transports

    ####################################
    # Transport Document Status response
    ####################################
    TransportDocumentRefStatus:
      type: object
      title: Transport Document Response
      description: |
        The `transportDocumentReference` along with the `transportDocumentStatus` for the `Transport Document` is returned.
      properties:
        transportDocumentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 20
          description: |
            A unique number allocated by the shipping line to the transport document and the main number used for the tracking of the status of the shipment.
          example: HHL71800000
        transportDocumentStatus:
          type: string
          maxLength: 50
          description: |
            The status of the `Transport Document`. Possible values are:
            - DRAFT
            - APPROVED
            - ISSUED
            - PENDING SURRENDER FOR AMENDMENT
            - SURRENDER FOR AMENDMENT
            - PENDING SURRENDER FOR DELIVERY
            - SURRENDER FOR DELIVERY
            - VOIDED
          example: DRAFT
      required:
        - transportDocumentReference
        - transportDocumentStatus

    ############
    # Transports
    ############
    Transports:
      type: object
      properties:
        plannedArrivalDate:
          type: string
          format: date
          description: |
            The planned date of arrival.
        plannedDepartureDate:
          type: string
          format: date
          description: |
            The planned date of departure.
        preCarriageBy:
          type: string
          maxLength: 50
          description: |
            Mode of transportation for pre-carriage when transport to the port of loading is organized by the carrier. If this attributes is populated, then a Place of Receipt must also be defined. The currently supported values include:
            - `VESSEL` (Vessel)
            - `RAIL` (Rail)
            - `TRUCK` (Truck)
            - `BARGE` (Barge)
          example: RAIL
        onCarriageBy:
          type: string
          maxLength: 50
          description: |
            Mode of transportation for on-carriage when transport from the port of discharge is organized by the carrier. If this attributes is populated, then a Place of Delivery must also be defined. The currently supported values include:
            - `VESSEL` (Vessel)
            - `RAIL` (Rail)
            - `TRUCK` (Truck)
            - `BARGE` (Barge)
          example: TRUCK
        placeOfReceipt:
          $ref: '#/components/schemas/PlaceOfReceipt'
        portOfLoading:
          $ref: '#/components/schemas/PortOfLoading'
        portOfDischarge:
          $ref: '#/components/schemas/PortOfDischarge'
        placeOfDelivery:
          $ref: '#/components/schemas/PlaceOfDelivery'
        onwardInlandRouting:
          $ref: '#/components/schemas/OnwardInlandRouting'
        vesselVoyage:
          type: array
          minItems: 1
          description: |
            Allow the possibility to include multiple vessels/voyages in the `Transport Document` (e.g. the first sea going vessel and the mother vessel). At least one is mandatory to provide.
          items:
            type: object
            description: 'Vessel and export voyage'
            properties:
              vesselName:
                type: string
                pattern: ^\S(?:.*\S)?$
                maxLength: 50
                description: |
                  The name of the first sea going Vessel on board which the cargo is loaded or intended to be loaded
                example: King of the Seas
              carrierExportVoyageNumber:
                type: string
                pattern: ^\S(?:.*\S)?$
                maxLength: 50
                example: 2103S
                description: |
                  The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
              universalExportVoyageReference:
                type: string
                pattern: '^\d{2}[0-9A-Z]{2}[NEWSR]$'
                minLength: 5
                maxLength: 5
                description: |
                  A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
                  - `2 digits` for the year
                  - `2 alphanumeric characters` for the sequence number of the voyage
                  - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
                example: 2103N
            required:
              - vesselName
              - carrierExportVoyageNumber
      required:
        - plannedArrivalDate
        - plannedDepartureDate
        - portOfLoading
        - portOfDischarge
        - vesselVoyage
    PlaceOfReceipt:
      title: Place of Receipt
      description: |
        General purpose object to capture `Place of Receipt` location specified as: the location where the cargo is handed over by the shipper, or his agent, to the shipping line. This indicates the point at which the shipping line takes on responsibility for carriage of the container.

        **Condition:** Only when pre-carriage is done by the carrier.

        The location can be specified in **one** of the following ways: `UN Location Code`, `Facility` or an `Address`.
      example:
        locationName: Hamburg
        locationType: UNLO
        UNLocationCode: DEHAM
      oneOf:
        - $ref: '#/components/schemas/AddressLocation'
        - $ref: '#/components/schemas/FacilityLocation'
        - $ref: '#/components/schemas/UNLocationLocation'
      discriminator:
        propertyName: locationType
        mapping:
          ADDR: '#/components/schemas/AddressLocation'
          FACI: '#/components/schemas/FacilityLocation'
          UNLO: '#/components/schemas/UNLocationLocation'
    PortOfLoading:
      title: Port of Loading
      description: |
        General purpose object to capture `Port of Loading` location specified as: the location where the cargo is loaded onto a first sea-going vessel for water transportation.

        The location can be specified in **one** of the following ways: `UN Location Code` or `City and Country`.
      example:
        locationName: Hamburg
        locationType: UNLO
        UNLocationCode: DEHAM
      oneOf:
        - $ref: '#/components/schemas/CityLocation'
        - $ref: '#/components/schemas/UNLocationLocation'
      discriminator:
        propertyName: locationType
        mapping:
          CITY: '#/components/schemas/CityLocation'
          UNLO: '#/components/schemas/UNLocationLocation'
    PortOfDischarge:
      title: Port of Discharge
      description: |
        General purpose object to capture `Port of Discharge` location specified as: the location where the cargo is discharged from the last sea-going vessel.

        The location can be specified in **one** of the following ways: `UN Location Code` or `City and Country`.
      example:
        locationName: Hamburg
        locationType: UNLO
        UNLocationCode: DEHAM
      oneOf:
        - $ref: '#/components/schemas/CityLocation'
        - $ref: '#/components/schemas/UNLocationLocation'
      discriminator:
        propertyName: locationType
        mapping:
          CITY: '#/components/schemas/CityLocation'
          UNLO: '#/components/schemas/UNLocationLocation'
    PlaceOfDelivery:
      title: Place of Delivery
      description: |
        General purpose object to capture `Place of Delivery` location specified as: the location where the cargo is handed over to the consignee, or his agent, by the shipping line and where responsibility of the shipping line ceases.

        **Condition:** Only when onward transport is done by the carrier

        The location can be specified in **one** of the following ways: `UN Location Code`, `Facility` or an `Address`.
      example:
        locationName: Hamburg
        locationType: UNLO
        UNLocationCode: DEHAM
      oneOf:
        - $ref: '#/components/schemas/AddressLocation'
        - $ref: '#/components/schemas/FacilityLocation'
        - $ref: '#/components/schemas/UNLocationLocation'
      discriminator:
        propertyName: locationType
        mapping:
          ADDR: '#/components/schemas/AddressLocation'
          FACI: '#/components/schemas/FacilityLocation'
          UNLO: '#/components/schemas/UNLocationLocation'
    OnwardInlandRouting:
      title: Onward Inland Routing
      description: |
        General purpose object to capture `Onward Inland Routing` location specified as the end location of the inland movement that takes place after the container(s) being delivered to the port of discharge/place of delivery for account and risk of merchant (merchant haulage).

        The location can be specified in **one** of the following ways: `UN Location Code`, `Facility` or an `Address`.
      example:
        locationName: Hamburg
        locationType: UNLO
        UNLocationCode: DEHAM
      oneOf:
        - $ref: '#/components/schemas/AddressLocation'
        - $ref: '#/components/schemas/FacilityLocation'
        - $ref: '#/components/schemas/UNLocationLocation'
      discriminator:
        propertyName: locationType
        mapping:
          ADDR: '#/components/schemas/AddressLocation'
          FACI: '#/components/schemas/FacilityLocation'
          UNLO: '#/components/schemas/UNLocationLocation'

    ########
    # Charge
    ########
    Charge:
      type: object
      description: |
        Addresses the monetary value of freight and other service charges for a `Booking`.
      properties:
        chargeName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            Free text field describing the charge to apply
          example: Documentation fee - Destination
        currencyAmount:
          type: number
          format: float
          minimum: 0
          description: |
            The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.
          example: 1012.12
        currencyCode:
          type: string
          pattern: '^[A-Z]{3}$'
          minLength: 3
          maxLength: 3
          description: |
            The currency for the charge, using a 3-character code ([ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)).
          example: DKK
        paymentTermCode:
          type: string
          description: |
            An indicator of whether a charge is prepaid (PRE) or collect (COL). When prepaid, the charge is the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charge is the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).

            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        calculationBasis:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.
          example: Per day
        unitPrice:
          type: number
          format: float
          minimum: 0
          description: |
            The unit price of this charge item in the currency of the charge.
          example: 3456.6
        quantity:
          type: number
          format: float
          minimum: 0
          description: |
            The amount of unit for this charge item.
          example: 34.4
      required:
        - chargeName
        - currencyAmount
        - currencyCode
        - paymentTermCode
        - calculationBasis
        - unitPrice
        - quantity
