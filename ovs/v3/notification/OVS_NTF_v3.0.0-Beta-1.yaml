openapi: 3.0.0
x-stoplight:
  id: 68ical6qxlu31
info:
  title: DCSA OpenAPI specification for Operational Vessel Schedules Notifications
  version: 1.0.0-Beta-1
  summary: Operational Vessel Schedules Noification
  description: "API specification issued by DCSA.org.\r\n\r\nOperational Vessel Schedules Notifications for [DCSA OpenAPI specification for OVS](https://app.swaggerhub.com/apis/dcsaorg/DCSA_OVS/3.0.0#/) is a lightweight notification based on [CloudEvents](https://cloudevents.io/). The `POST` endPoint of the consumer is called whenever a `Operation vessel schedule` that is being subscribed to changes state or is updated.\r\n\r\nSubscribing to notification is done outside scope of this API.\r\n\r\n### Stats API\r\nThe Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to the OVS Notification API. Further details can be found [here](https://developer.dcsa.org/#/http/guides/api-guides/stats-api)\r\n\r\nPlease also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.\r\n\r\n"
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: 'ttps://dcsa.org'
    email: info@dcsa.org
servers:
  - url: 'http://localhost:3000'
paths:
  /v3/operational-vessel-schedule-notifications:
    post:
      summary: Send operational vessel schedule notification
      tags:
        - Notifications
      responses:
        '204':
          description: No Content
          headers:
            API-Version:
              schema:
                type: string
                example: 1.0.0-Beta-1
              description: ' [SemVer](https://semver.org/) used to indicate the version of the consumer (the responding party). This is optional to provide.'
      operationId: post-v3-ovs-notifications
      x-stoplight:
        id: br3gd1s3zxk6y
      parameters:
        - schema:
            type: string
            example: 1.0.0-Beta-1
          in: header
          name: API-Version
          description: ' An API-Version header **MUST** be provided to the request (mandatory). The header **MUST** be a [SemVer](https://semver.org/) specifying the provider (the calling party) API version.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationalVesselScheduleNotification'
            examples:
              serviceScheduleChangedExample:
                summary: |
                  When an overall service schedule is adjusted
                description: |
                  A notification explaining that there is a change in the service schedule.
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.ovs-notification.v3
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  data:
                    carrierServiceCode: FE1
                    universalServiceReference: SR12345A
              vesselDataChangedExample:
                summary: |
                  When data around a vessel is adjusted
                description: |
                  A notification explaining that the data related to a vessel is changed in the service that was subscribed.
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.ovs-notification.v3
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  data:
                    carrierServiceCode: FE1
                    universalServiceReference: SR12345A
                    vesselIMONumber: '9321483'
              voyageDataChangedExample:
                summary: |
                  When data around a voyage is adjusted
                description: |
                  A notification explaining that the data related to a specific voyage is changed in the service that was subscribed.
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.ovs-notification.v3
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  data:
                    carrierServiceCode: FE1
                    universalServiceReference: SR12345A
                    vesselIMONumber: '9321483'
                    carrierVoyageNumber: 103N
                    universalVoyageReference: 2103N
              locationDataChangedExample:
                summary: |
                  When data around a location is adjusted
                description: |
                  A notification explaining that the data related to a specific location is changed in the service that was subscribed.
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.ovs-notification.v3
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  data:
                    carrierServiceCode: FE1
                    universalServiceReference: SR12345A
                    vesselIMONumber: '9321483'
                    carrierVoyageNumber: 103N
                    universalVoyageReference: 2103N
                    UNLocationCode: NLAMS
                    facilitySMDGCode: ACT
        description: The payload to create a OVS notification.
    parameters: []
components:
  schemas:
    OperationalVesselScheduleNotification:
      type: object
      x-stoplight:
        id: 16f0fc131903d
      x-examples:
        Example 1:
          specversion: '1.0'
          id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
          source: 'https://member.com/'
          type: org.dcsa.ovs.v3
          time: '2018-04-05T17:31:00Z'
          datacontenttype: application/json
          data:
            carrierServiceCode: FE1
            universalServiceReference: SR12345A
            vesselIMONumber: '9321483'
            carrierVoyageNumber: 103N
            universalVoyageReference: 2103N
            UNLocationCode: NLAMS
            facilitySMDGCode: ACT
      title: OVS Notification
      description: '`CloudEvent` specific properties for the `Notification`.'
      required:
        - specversion
        - id
        - source
        - type
        - time
        - datacontenttype
        - data
      properties:
        specversion:
          type: string
          description: |
            The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.

            Currently, this attribute will only have the 'major' and 'minor' version numbers included in it. This allows for 'patch' changes to the specification to be made without changing this property's value in the serialization. Note: for 'release candidate' releases a suffix might be used for testing purposes.
          example: '1.0'
        id:
          type: string
          maxLength: 100
          description: |
            Identifies the event. Producers MUST ensure that `source` + `id` is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same `id`. Consumers MAY assume that Events with identical `source` and `id` are duplicates.
          example: 3cecb101-7a1a-43a4-9d62-e88a131651e2
        source:
          type: string
          maxLength: 4096
          description: |
            Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.

            Producers MUST ensure that `source` + `id` is unique for each distinct event.

            An application MAY assign a unique `source` to each distinct producer, which makes it easy to produce unique IDs since no other producer will have the same source. The application MAY use UUIDs, URNs, DNS authorities or an application-specific scheme to create unique `source` identifiers.

            A source MAY include more than one producer. In that case the producers MUST collaborate to ensure that `source` + `id` is unique for each distinct event.
          example: 'https://member.com/'
        type:
          type: string
          description: |
            This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type - see [Versioning of CloudEvents in the Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents) for more information.
          example: org.dcsa.ovs-notification.v3
        time:
          type: string
          format: date-time
          description: |
            Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same `source` MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.
          example: '2018-04-05T17:31:00Z'
        datacontenttype:
          type: string
          description: |
            Content type of `data` value. This attribute enables `data` to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, an event rendered using the [JSON envelope](formats/json-format.md#3-envelope) format might carry an XML payload in `data`, and the consumer is informed by this attribute being set to "application/xml". The rules for how `data` content is rendered for different `datacontenttype` values are defined in the event format specifications; for example, the JSON event format defines the relationship in [section 3.1](formats/json-format.md#31-handling-of-data).

            For some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol.

            In some event formats the `datacontenttype` attribute MAY be omitted. For example, if a JSON format event has no `datacontenttype` attribute, then it is implied that the `data` is a JSON value conforming to the "application/json" media type. In other words: a JSON-format event with no `datacontenttype` is exactly equivalent to one with `datacontenttype="application/json"`.

            When translating an event message with no `datacontenttype` attribute to a different format or protocol binding, the target `datacontenttype` SHOULD be set explicitly to the implied `datacontenttype` of the source.
          example: application/json
        data:
          type: object
          description: OVS specific properties for Notification.
          properties:
            carrierServiceCode:
              type: string
              description: "The carrier-specific code of the service for which the schedule details are published.\r\n\r\n**Conditional** : Mandatory if `universalServiceReference` is absent."
              maxLength: 11
              example: FE1
            universalServiceReference:
              type: string
              pattern: '^SR\d{5}[A-Z]$'
              maxLength: 8
              example: SR12345A
              description: "A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\\d{5}[A-Z]`. The letters `SR` followed by `5` digits, followed by a checksum-character as a capital letter from `A to Z`.\r\n\r\n**Conditional** : Mandatory is `carrierServiceCode` is absent."
            vesselIMONumber:
              type: string
              x-stoplight:
                id: h93mjwn4yvyv4
              description: 'The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd''s register code, which does not change during the lifetime of the vessel.'
              maxLength: 7
              example: '9321483'
              pattern: '^\d{7}$'
            carrierVoyageNumber:
              type: string
              x-stoplight:
                id: yldgkfrei82wa
              description: The carrier-specific identifier of the Voyage. This can be import or export voyage number.
              example: 2103N
              maxLength: 50
            universalVoyageReference:
              type: string
              x-stoplight:
                id: 64jqs5jtmtffb
              description: "A global unique voyage reference for the Voyage, as per DCSA standard, agreed by VSA partners for the voyage. This can be import or export voyage reference. The voyage reference must match the regular expression pattern: `\\d{2}[0-9A-Z]{2}[NEWSR]`\r\n\r\n- `2 digits` for the year\r\n- `2 alphanumeric` characters for the sequence number of the voyage\r\n- `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip)."
            UNLocationCode:
              type: string
              x-stoplight:
                id: 1l6f9ycjrac9d
              description: "The UN Location code specifying where the place is located. The pattern used must be\r\n\r\n- 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)\r\n- 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used\r\n\r\nMore info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)"
              minLength: 5
              maxLength: 5
              example: NLAMS
            facilitySMDGCode:
              type: string
              x-stoplight:
                id: wiejmbtkbmhcm
              description: "The code used for identifying the specific facility. This code does not include the UN Location Code.\r\n\r\nThe codeList used by SMDG is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)."
              maxLength: 6
              example: ACT
